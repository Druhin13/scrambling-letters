{"version":3,"sources":["js/scramble.js"],"names":["Scrambler","scrambleArgs","randomChar","length","l","r","Math","random","toString","replace","substr","indexOf","isObject","a","constructor","Object","passedAsObject","target","speed","text","randomTime","scrambleFire","scrambleFireArgs","scramble","document","querySelectorAll","forEach","element","getAttribute","setAttribute","truth","textContent","split","truthHTML","innerHTML","startText","newLetters","revert","HTMLreset","defineEndText","end","endText","startTextTemp","item","index","push","String","ticker","setInterval","map","letter","i","setTimeout","join","killCheck","every","e","innerContent","children","clearInterval"],"mappings":"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","file":"scramble.32ba5a9f.js","sourceRoot":"..","sourcesContent":["/* eslint-disable import/prefer-default-export */\n\nexport const Scrambler = function (scrambleArgs) {\n  /** * helper functions ** */\n  // utility fn to get a random character\n  const randomChar = function (length) {\n    const l = length || 1;\n    const r = Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, l);\n\t\tif (' \\t\\n\\r\\v'.indexOf(r) < 0) return r;\n\t\treturn false;\n  };\n  // object test\n  const isObject = function (a) {\n    return (!!a) && (a.constructor === Object);\n  };\n  // did the user pass an object as an argument?\n  const passedAsObject = (isObject(scrambleArgs) || typeof scrambleArgs === 'object');\n  // set function default arguments if it was an object\n  if (passedAsObject) {\n    scrambleArgs.target = (typeof scrambleArgs.target !== 'undefined' && (passedAsObject)) ? scrambleArgs.target : '[data-scrambler]';\n    scrambleArgs.random = (typeof scrambleArgs.random !== 'undefined' && (passedAsObject)) ? scrambleArgs.random : [1000, 3000];\n    scrambleArgs.speed = (typeof scrambleArgs.speed !== 'undefined' && (passedAsObject)) ? scrambleArgs.speed : 100;\n    scrambleArgs.text = (typeof scrambleArgs.text !== 'undefined' && (passedAsObject)) ? scrambleArgs.text : false;\n  }\n  // utility fn to get a random delay time\n  const randomTime = function () {\n    if (passedAsObject) {\n      return scrambleArgs.random[0] + ((Math.random() * (1 - scrambleArgs.random[1])) + scrambleArgs.random[1]);\n    }\n    return 1000 + ((Math.random() * (1 - 3000)) + 3000);\n  };\n\n  const scrambleFire = function (scrambleFireArgs) { // remember, hoisted\n    // get chosen scramble items\n    const scramble = (passedAsObject) ? [...document.querySelectorAll(scrambleFireArgs.target)] : [...document.querySelectorAll(scrambleFireArgs)];\n\n    // for each scramble element\n    scramble.forEach((element) => {\n      if (element.getAttribute('data-scramble-active') !== 'true') {\n        element.setAttribute('data-scramble-active', 'true');\n\n        let truth = element.textContent.split(''); // get letters\n        const truthHTML = element.innerHTML; // get html\n        let startText = truth;\n        let newLetters = element.textContent.split('');\n        const revert = []; // init empty kill switch array\n        const speed = (scrambleFireArgs.speed) ? scrambleFireArgs.speed : 100;\n        let HTMLreset = false;\n\n        // if user defines an ending text string then use that instead of the original text\n        const defineEndText = function (end) {\n          const endText = end || element.textContent;\n          truth = endText.split('');\n          newLetters = endText.split('');\n          const startTextTemp = [];\n          truth.forEach((item, index) => {\n            if (' \\t\\n\\r\\v'.indexOf(truth[index]) > -1) {\n              startTextTemp.push(' ');\n            } else {\n              startTextTemp.push(randomChar());\n            }\n          });\n          startText = startTextTemp;\n        };\n        // first check passed option and then data-attribute\n        if (scrambleFireArgs.text && scrambleFireArgs.text !== '' && (typeof scrambleFireArgs.text === 'string' || scrambleFireArgs.text instanceof String)) {\n          defineEndText(scrambleFireArgs.text);\n          HTMLreset = true;\n        } else if (element.getAttribute('data-scramble-text') && element.getAttribute('data-scramble-text') !== '') {\n          defineEndText(element.getAttribute('data-scramble-text'));\n          HTMLreset = true;\n        }\n\n        const ticker = setInterval(() => {\n          // map over letters and replace with random or revert back to truth\n          startText.map((letter, i) => {\n            // break if a space\n            if (' \\t\\n\\r\\v'.indexOf(letter) > -1) return false;\n            // set new random letter\n            newLetters[i] = randomChar();\n            // set random timeout to make letters reset at different times\n            setTimeout(() => {\n              revert[i] = true;\n            }, randomTime());\n            // reset individual letter if kill switch\n            if (revert[i] === true) {\n              newLetters[i] = truth[i];\n            }\n            // set html\n            element.textContent = newLetters.join('');\n            return true;\n          });\n\n          // kill interval after all letter returned to normal to save stack\n          const killCheck = (newLetters.length === truth.length) && newLetters.every((e, i) => e === truth[i]);\n          if (killCheck) {\n            element.innerHTML = truthHTML;\n            if (HTMLreset) {\n              const innerContent = element.children[0];\n              if (innerContent && innerContent !== '') {\n                innerContent.textContent = newLetters.join('');\n              } else {\n                element.textContent = newLetters.join('');\n              }\n            }\n            clearInterval(ticker); // stop looping\n            element.setAttribute('data-scramble-active', 'false');\n          }\n        }, speed); // end ticker\n      } // end check for active\n    }); // end forEach\n  }; // end scrambleFire\n\n  scrambleFire(scrambleArgs); // call action fn\n}; // end Scramble\n"]}