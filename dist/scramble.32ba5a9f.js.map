{"version":3,"sources":["js/scramble.js"],"names":["Scrambler","ScramblerSetup","scrambleArgs","randomChar","length","l","r","Math","random","toString","replace","substr","indexOf","isObject","a","constructor","Object","checkPassedAsObj","passedAsObject","target","speed","text","randomTime","scrambleFire","scrambleFireArgs","scramble","document","querySelectorAll","forEach","element","getAttribute","setAttribute","truth","textContent","split","truthHTML","innerHTML","startText","newLetters","revert","HTMLreset","defineEndText","end","endText","startTextTemp","item","index","push","String","ticker","setInterval","map","letter","i","setTimeout","join","killCheck","every","e","innerContent","children","clearInterval","console","warn"],"mappings":"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","file":"scramble.32ba5a9f.js","sourceRoot":"..","sourcesContent":["/* eslint-disable import/prefer-default-export */\n\nexport const Scrambler = function() { // named export\n\n  const ScramblerSetup = (function (scrambleArgs) { // wrapper function\n    /** * helper functions ** */\n    // utility fn to get a random character\n    const randomChar = function (length) {\n      const l = length || 1;\n      const r = Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, l);\n      if (' \\t\\n\\r\\v'.indexOf(r) < 0) return r;\n      return false;\n    };\n\n    // object test\n    const isObject = function (a) {\n      return (!!a) && (a.constructor === Object);\n    };\n    \n    // set function default arguments if it was an object\n    const checkPassedAsObj = (function() {\n      // did the user pass an object as an argument?\n      let passedAsObject = (isObject(scrambleArgs) || typeof scrambleArgs === 'object');\n      if (passedAsObject) {\n        scrambleArgs.target = (typeof scrambleArgs.target !== 'undefined' && (passedAsObject)) ? scrambleArgs.target : '[data-scrambler]';\n        scrambleArgs.random = (typeof scrambleArgs.random !== 'undefined' && (passedAsObject)) ? scrambleArgs.random : [1000, 3000];\n        scrambleArgs.speed = (typeof scrambleArgs.speed !== 'undefined' && (passedAsObject)) ? scrambleArgs.speed : 100;\n        scrambleArgs.text = (typeof scrambleArgs.text !== 'undefined' && (passedAsObject)) ? scrambleArgs.text : false;\n        return true;\n      }\n      else {\n        return false;\n      }\n    })();\n\n    // utility fn to get a random delay time\n    const randomTime = function () {\n      if (passedAsObject) {\n        return scrambleArgs.random[0] + ((Math.random() * (1 - scrambleArgs.random[1])) + scrambleArgs.random[1]);\n      }\n      return 1000 + ((Math.random() * (1 - 3000)) + 3000);\n    };\n\n    const scrambleFire = function (scrambleFireArgs) { // remember, hoisted\n      // get chosen scramble items\n      const scramble = (passedAsObject) ? [...document.querySelectorAll(scrambleFireArgs.target)] : [...document.querySelectorAll(scrambleFireArgs)];\n\n      // for each scramble element\n      scramble.forEach((element) => {\n        if (element.getAttribute('data-scramble-active') !== 'true') {\n          element.setAttribute('data-scramble-active', 'true');\n\n          let truth = element.textContent.split(''); // get letters\n          const truthHTML = element.innerHTML; // get html\n          let startText = truth;\n          let newLetters = element.textContent.split('');\n          const revert = []; // init empty kill switch array\n          const speed = (scrambleFireArgs.speed) ? scrambleFireArgs.speed : 100;\n          let HTMLreset = false;\n\n          // if user defines an ending text string then use that instead of the original text\n          const defineEndText = function (end) {\n            const endText = end || element.textContent;\n            truth = endText.split('');\n            newLetters = endText.split('');\n            const startTextTemp = [];\n            truth.forEach((item, index) => {\n              if (' \\t\\n\\r\\v'.indexOf(truth[index]) > -1) {\n                startTextTemp.push(' ');\n              } else {\n                startTextTemp.push(randomChar());\n              }\n            });\n            startText = startTextTemp;\n          };\n          // first check passed option and then data-attribute\n          if (scrambleFireArgs.text && scrambleFireArgs.text !== '' && (typeof scrambleFireArgs.text === 'string' || scrambleFireArgs.text instanceof String)) {\n            defineEndText(scrambleFireArgs.text);\n            HTMLreset = true;\n          } else if (element.getAttribute('data-scramble-text') && element.getAttribute('data-scramble-text') !== '') {\n            defineEndText(element.getAttribute('data-scramble-text'));\n            HTMLreset = true;\n          }\n\n          const ticker = setInterval(() => {\n            // map over letters and replace with random or revert back to truth\n            startText.map((letter, i) => {\n              // break if a space\n              if (' \\t\\n\\r\\v'.indexOf(letter) > -1) return false;\n              // set new random letter\n              newLetters[i] = randomChar();\n              // set random timeout to make letters reset at different times\n              setTimeout(() => {\n                revert[i] = true;\n              }, randomTime());\n              // reset individual letter if kill switch\n              if (revert[i] === true) {\n                newLetters[i] = truth[i];\n              }\n              // set html\n              element.textContent = newLetters.join('');\n              return true;\n            });\n\n            // kill interval after all letter returned to normal to save stack\n            const killCheck = (newLetters.length === truth.length) && newLetters.every((e, i) => e === truth[i]);\n            if (killCheck) {\n              element.innerHTML = truthHTML;\n              if (HTMLreset) {\n                const innerContent = element.children[0];\n                if (innerContent && innerContent !== '') {\n                  innerContent.textContent = newLetters.join('');\n                } else {\n                  element.textContent = newLetters.join('');\n                }\n              }\n              clearInterval(ticker); // stop looping\n              element.setAttribute('data-scramble-active', 'false');\n            }\n          }, speed); // end ticker\n        } // end check for active\n      }); // end forEach\n    }; // end scrambleFire\n\n    scrambleFire(scrambleArgs); // call action fn\n\n    // expose functions\n    return {\n      scrambleFire,\n      randomChar,\n      randomTime,\n      isObject,\n      checkPassedAsObj\n    };\n  }()); // end ScramblerSetuo\n\n  return ScramblerSetup.scrambleFire; // return main fn\n};\n\nconsole.warn(Scrambler);"]}