{"version":3,"sources":["js/scramble.js","js/example.js"],"names":["Scrambler","scrambleArgs","randomChar","a","length","l","r","Math","random","toString","replace","substr","indexOf","passedAsObject","constructor","Object","target","speed","text","randomTime","scrambleFireArgs","document","querySelectorAll","forEach","element","getAttribute","setAttribute","truth","textContent","split","truthHTML","innerHTML","startText","newLetters","revert","HTMLreset","defineEndText","end","endText","startTextTemp","item","index","push","String","ticker","setInterval","killCheck","map","letter","i","setTimeout","join","every","e","innerContent","children","clearInterval","buttonT","querySelector","buttonP","buttonN","addEventListener"],"mappings":"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","file":"example.09678f12.js","sourceRoot":"..","sourcesContent":["/* eslint-disable import/prefer-default-export */\n\nexport const Scrambler = function (scrambleArgs) {\n  /** * helper functions ** */\n  // utility fn to get a random character\n  const randomChar = function (length) {\n    const l = length || 1;\n    const r = Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, l);\n\t\tif (' \\t\\n\\r\\v'.indexOf(r) < 0) return r;\n\t\treturn false;\n  };\n  // object test\n  const isObject = function (a) {\n    return (!!a) && (a.constructor === Object);\n  };\n  // did the user pass an object as an argument?\n  const passedAsObject = (isObject(scrambleArgs) || typeof scrambleArgs === 'object');\n  // set function default arguments if it was an object\n  if (passedAsObject) {\n    scrambleArgs.target = (typeof scrambleArgs.target !== 'undefined' && (passedAsObject)) ? scrambleArgs.target : '[data-scrambler]';\n    scrambleArgs.random = (typeof scrambleArgs.random !== 'undefined' && (passedAsObject)) ? scrambleArgs.random : [1000, 3000];\n    scrambleArgs.speed = (typeof scrambleArgs.speed !== 'undefined' && (passedAsObject)) ? scrambleArgs.speed : 100;\n    scrambleArgs.text = (typeof scrambleArgs.text !== 'undefined' && (passedAsObject)) ? scrambleArgs.text : false;\n  }\n  // utility fn to get a random delay time\n  const randomTime = function () {\n    if (passedAsObject) {\n      return scrambleArgs.random[0] + ((Math.random() * (1 - scrambleArgs.random[1])) + scrambleArgs.random[1]);\n    }\n    return 1000 + ((Math.random() * (1 - 3000)) + 3000);\n  };\n\n  const scrambleFire = function (scrambleFireArgs) { // remember, hoisted\n    // get chosen scramble items\n    const scramble = (passedAsObject) ? [...document.querySelectorAll(scrambleFireArgs.target)] : [...document.querySelectorAll(scrambleFireArgs)];\n\n    // for each scramble element\n    scramble.forEach((element) => {\n      if (element.getAttribute('data-scramble-active') !== 'true') {\n        element.setAttribute('data-scramble-active', 'true');\n\n        let truth = element.textContent.split(''); // get letters\n        const truthHTML = element.innerHTML; // get html\n        let startText = truth;\n        let newLetters = element.textContent.split('');\n        const revert = []; // init empty kill switch array\n        const speed = (scrambleFireArgs.speed) ? scrambleFireArgs.speed : 100;\n        let HTMLreset = false;\n\n        // if user defines an ending text string then use that instead of the original text\n        const defineEndText = function (end) {\n          const endText = end || element.textContent;\n          truth = endText.split('');\n          newLetters = endText.split('');\n          const startTextTemp = [];\n          truth.forEach((item, index) => {\n            if (' \\t\\n\\r\\v'.indexOf(truth[index]) > -1) {\n              startTextTemp.push(' ');\n            } else {\n              startTextTemp.push(randomChar());\n            }\n          });\n          startText = startTextTemp;\n        };\n        // first check passed option and then data-attribute\n        if (scrambleFireArgs.text && scrambleFireArgs.text !== '' && (typeof scrambleFireArgs.text === 'string' || scrambleFireArgs.text instanceof String)) {\n          defineEndText(scrambleFireArgs.text);\n          HTMLreset = true;\n        } else if (element.getAttribute('data-scramble-text') && element.getAttribute('data-scramble-text') !== '') {\n          defineEndText(element.getAttribute('data-scramble-text'));\n          HTMLreset = true;\n        }\n\n        const ticker = setInterval(() => {\n          // map over letters and replace with random or revert back to truth\n          startText.map((letter, i) => {\n            // break if a space\n            if (' \\t\\n\\r\\v'.indexOf(letter) > -1) return false;\n            // set new random letter\n            newLetters[i] = randomChar();\n            // set random timeout to make letters reset at different times\n            setTimeout(() => {\n              revert[i] = true;\n            }, randomTime());\n            // reset individual letter if kill switch\n            if (revert[i] === true) {\n              newLetters[i] = truth[i];\n            }\n            // set html\n            element.textContent = newLetters.join('');\n            return true;\n          });\n\n          // kill interval after all letter returned to normal to save stack\n          const killCheck = (newLetters.length === truth.length) && newLetters.every((e, i) => e === truth[i]);\n          if (killCheck) {\n            element.innerHTML = truthHTML;\n            if (HTMLreset) {\n              const innerContent = element.children[0];\n              if (innerContent && innerContent !== '') {\n                innerContent.textContent = newLetters.join('');\n              } else {\n                element.textContent = newLetters.join('');\n              }\n            }\n            clearInterval(ticker); // stop looping\n            element.setAttribute('data-scramble-active', 'false');\n          }\n        }, speed); // end ticker\n      } // end check for active\n    }); // end forEach\n  }; // end scrambleFire\n\n  scrambleFire(scrambleArgs); // call action fn\n}; // end Scramble\n","import { Scrambler } from './scramble';\n\nScrambler({\n  target: '[data-title-scrambler]',\n  random: [1000, 30000],\n  speed: 100,\n});\n\nScrambler('p:not(.no-scramble), ul:not(.no-scramble) li');\n\nScrambler({\n  target: '#scramble-text-id',\n  random: [1000, 30000],\n  speed: 100,\n});\n\nconst buttonT = document.querySelector('#scramble-title-button');\nconst buttonP = document.querySelector('#scramble-paragraph-button');\nconst buttonN = document.querySelector('#scramble-paragraph-new');\n\nbuttonT.addEventListener('click', () => {\n  Scrambler('[data-title-scrambler]');\n  Scrambler({\n    target: '#scramble-text-id',\n    random: [1000, 30000],\n    speed: 100,\n  });\n});\n\nbuttonP.addEventListener('click', () => {\n  Scrambler('p:not(.no-scramble), ul:not(.no-scramble) li, h3:not(.no-scramble)');\n});\n\nbuttonN.addEventListener('click', () => {\n  Scrambler({\n    target: '[data-title-scrambler]',\n    random: [1000, 30000],\n    speed: 100,\n    text: 'Secret message',\n  });\n});\n"]}