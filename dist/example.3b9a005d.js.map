{"version":3,"sources":["js/scrambleUtil.js","js/scrambleSetup.js","js/scramble.js","js/example.js"],"names":["randomChar","length","debug","l","r","Math","random","toString","replace","substr","indexOf","randomTime","arg","rand","asObj","isArray","isObject","a","constructor","Object","Array","isBool","ScrambleSetup","scrambleFireArgs","passedAsObject","target","speed","text","document","querySelectorAll","forEach","element","getAttribute","setAttribute","truth","textContent","split","truthHTML","innerHTML","startText","newLetters","revert","HTMLreset","defineEndText","end","endText","startTextTemp","item","index","push","String","ticker","setInterval","killCheck","map","letter","i","setTimeout","join","every","e","innerContent","children","clearInterval","Scrambler","buttonT","querySelector","buttonP","buttonN","addEventListener"],"mappings":"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","file":"example.3b9a005d.js","sourceRoot":"..","sourcesContent":["/* eslint-disable import/prefer-default-export, no-console */\n\n// export helper functions - these are used in the ScrambleSetup wrapper\n\n// utility fn to get a random character\nexport const randomChar = function (length, debug) {\n  const l = length || 1;\n  const d = debug || false;\n  const r = Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, l);\n  if (' \\t\\n\\r\\v'.indexOf(r) < 0 && debug !== true) return r;\n  return false;\n};\n\n// utility fn to get a random delay time\nexport const randomTime = function (arg, rand) {\n  const asObj = arg || false;\n  if (asObj && isArray(rand) && rand.length > 1) {\n    return rand[0] + ((Math.random() * (1 - rand[1])) + rand[1]);\n  }\n  return 1000 + ((Math.random() * (1 - 3000)) + 3000);\n};\n\n// object test\nexport const isObject = function (a) {\n  return (!!a) && (a.constructor === Object);\n};\n\n// array test\nexport const isArray = function (a) {\n  return (!!a) && (a.constructor === Array);\n};\n\n// boolean test\nexport const isBool = function (a) {\n  return typeof a === 'boolean';\n};","/* eslint-disable import/prefer-default-export, no-console */\n\n// get util functions\nimport { randomChar, randomTime, isObject, isArray, isBool } from './scrambleUtil';\n\n// export main setup function - this is imported in the main api export\nexport const ScrambleSetup = (function () { // wrapper function\n\n  const scrambleFire = function (scrambleFireArgs) {\n    // return if array passed (needs string or object)\n    if ( isArray(scrambleFireArgs) || isBool(scrambleFireArgs) ) {\n      return false;\n    }\n\n    // set function default arguments if it was an object\n    const passedAsObject = ( isObject(scrambleFireArgs) || typeof scrambleFireArgs === 'object' );\n    if (passedAsObject) {\n      scrambleFireArgs.target = (typeof scrambleFireArgs.target !== 'undefined' && (passedAsObject)) ? scrambleFireArgs.target : '[data-scrambler]';\n      scrambleFireArgs.random = (typeof scrambleFireArgs.random !== 'undefined' && (passedAsObject)) ? scrambleFireArgs.random : [1000, 3000];\n      scrambleFireArgs.speed = (typeof scrambleFireArgs.speed !== 'undefined' && (passedAsObject)) ? scrambleFireArgs.speed : 100;\n      scrambleFireArgs.text = (typeof scrambleFireArgs.text !== 'undefined' && (passedAsObject)) ? scrambleFireArgs.text : false;\n    }\n\n    // get chosen scramble items\n    const scramble = (passedAsObject) ? [...document.querySelectorAll(scrambleFireArgs.target)] : [...document.querySelectorAll(scrambleFireArgs)];\n\n    // for each scramble element\n    scramble.forEach((element) => {\n      \n      if (element.getAttribute('data-scramble-active') !== 'true') {\n        element.setAttribute('data-scramble-active', 'true');\n\n        let truth = element.textContent.split(''); // get letters\n        const truthHTML = element.innerHTML; // get html\n        let startText = truth;\n        let newLetters = element.textContent.split('');\n        const revert = []; // init empty kill switch array\n        const speed = (scrambleFireArgs.speed) ? scrambleFireArgs.speed : 100;\n        let HTMLreset = false;\n\n        // if user defines an ending text string then use that instead of the original text\n        const defineEndText = function (end) {\n          const endText = end || element.textContent;\n          truth = endText.split('');\n          newLetters = endText.split('');\n          const startTextTemp = [];\n          truth.forEach((item, index) => {\n            if (' \\t\\n\\r\\v'.indexOf(truth[index]) > -1) {\n              startTextTemp.push(' ');\n            } else {\n              startTextTemp.push(randomChar());\n            }\n          });\n          startText = startTextTemp;\n        };\n        // first check passed option and then data-attribute\n        if (scrambleFireArgs.text && scrambleFireArgs.text !== '' && (typeof scrambleFireArgs.text === 'string' || scrambleFireArgs.text instanceof String)) {\n          defineEndText(scrambleFireArgs.text);\n          HTMLreset = true;\n        } else if (element.getAttribute('data-scramble-text') && element.getAttribute('data-scramble-text') !== '') {\n          defineEndText(element.getAttribute('data-scramble-text'));\n          HTMLreset = true;\n        }\n\n        const ticker = setInterval(() => {\n          // map over letters and replace with random or revert back to truth\n          startText.map((letter, i) => {\n            // break if a space\n            if (' \\t\\n\\r\\v'.indexOf(letter) > -1) return false;\n            // set new random letter\n            newLetters[i] = randomChar();\n            // set random timeout to make letters reset at different times\n            setTimeout(() => {\n              revert[i] = true;\n            }, randomTime( isObject(scrambleFireArgs), scrambleFireArgs.random ));\n            // reset individual letter if kill switch\n            if (revert[i] === true) {\n              newLetters[i] = truth[i];\n            }\n            // set html\n            element.textContent = newLetters.join('');\n            return true;\n          });\n\n          // kill interval after all letter returned to normal to save stack\n          const killCheck = (newLetters.length === truth.length) && newLetters.every((e, i) => e === truth[i]);\n          if (killCheck) {\n            element.innerHTML = truthHTML;\n            if (HTMLreset) {\n              const innerContent = element.children[0];\n              if (innerContent && innerContent !== '') {\n                innerContent.textContent = newLetters.join('');\n              } else {\n                element.textContent = newLetters.join('');\n              }\n            }\n            clearInterval(ticker); // stop looping\n            element.setAttribute('data-scramble-active', 'false');\n          }\n        }, speed); // end ticker\n      } // end check for active\n    }); // end forEach\n    return true;\n  }; // end scrambleFire\n\n  // expose function\n  return scrambleFire;\n}()); // end ScramblerSetup","/* eslint-disable import/prefer-default-export, no-console */\n\n// get setup function\nimport { ScrambleSetup } from './scrambleSetup';\n\n// export main api function\nexport const Scrambler = (function (setup) { // wrapper function\n  return setup;\n}(ScrambleSetup));","/* eslint-disable no-console */\n\nimport { Scrambler } from './scramble';\n\nScrambler({\n  target: '[data-title-scrambler]',\n  random: [1000, 5000],\n  speed: 100,\n});\n\nScrambler('p:not(.no-scramble), ul:not(.no-scramble) li');\n\nconst buttonT = document.querySelector('#scramble-title-button');\nconst buttonP = document.querySelector('#scramble-paragraph-button');\nconst buttonN = document.querySelector('#scramble-paragraph-decode');\n\nbuttonT.addEventListener('click', () => {\n  Scrambler({\n    target: '[data-title-scrambler]',\n    random: [1000, 10000]\n  });\n});\n\nbuttonP.addEventListener('click', () => {\n  Scrambler({\n    target: 'p:not(.no-scramble), ul:not(.no-scramble) li, h3:not(.no-scramble)',\n    random: [1000, 30000],\n  });\n});\n\nbuttonN.addEventListener('click', () => {\n  Scrambler({\n    target: '[data-title-scrambler]',\n    random: [1000, 20000],\n    speed: 100,\n    text: 'Secret message',\n  });\n});\n"]}