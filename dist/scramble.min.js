!function t(n,r,e){function i(u,c){if(!r[u]){if(!n[u]){var f="function"==typeof require&&require;if(!c&&f)return f(u,!0);if(o)return o(u,!0);var a=new Error("Cannot find module '"+u+"'");throw a.code="MODULE_NOT_FOUND",a}var s=r[u]={exports:{}};n[u][0].call(s.exports,function(t){var r=n[u][1][t];return i(r||t)},s,s.exports,t,n,r,e)}return r[u].exports}for(var o="function"==typeof require&&require,u=0;u<e.length;u++)i(e[u]);return i}({1:[function(t,n,r){(function(n){"use strict";if(t(327),t(328),t(2),n._babelPolyfill)throw new Error("only one instance of babel-polyfill is allowed");n._babelPolyfill=!0;var r="defineProperty";function e(t,n,e){t[n]||Object[r](t,n,{writable:!0,configurable:!0,value:e})}e(String.prototype,"padLeft","".padStart),e(String.prototype,"padRight","".padEnd),"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function(t){[][t]&&e(Array,t,Function.call.bind([][t]))})}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{2:2,327:327,328:328}],2:[function(t,n,r){t(130),n.exports=t(23).RegExp.escape},{130:130,23:23}],3:[function(t,n,r){n.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},{}],4:[function(t,n,r){var e=t(18);n.exports=function(t,n){if("number"!=typeof t&&"Number"!=e(t))throw TypeError(n);return+t}},{18:18}],5:[function(t,n,r){var e=t(128)("unscopables"),i=Array.prototype;void 0==i[e]&&t(42)(i,e,{}),n.exports=function(t){i[e][t]=!0}},{128:128,42:42}],6:[function(t,n,r){n.exports=function(t,n,r,e){if(!(t instanceof n)||void 0!==e&&e in t)throw TypeError(r+": incorrect invocation!");return t}},{}],7:[function(t,n,r){var e=t(51);n.exports=function(t){if(!e(t))throw TypeError(t+" is not an object!");return t}},{51:51}],8:[function(t,n,r){"use strict";var e=t(119),i=t(114),o=t(118);n.exports=[].copyWithin||function(t,n){var r=e(this),u=o(r.length),c=i(t,u),f=i(n,u),a=arguments.length>2?arguments[2]:void 0,s=Math.min((void 0===a?u:i(a,u))-f,u-c),l=1;for(f<c&&c<f+s&&(l=-1,f+=s-1,c+=s-1);s-- >0;)f in r?r[c]=r[f]:delete r[c],c+=l,f+=l;return r}},{114:114,118:118,119:119}],9:[function(t,n,r){"use strict";var e=t(119),i=t(114),o=t(118);n.exports=function(t){for(var n=e(this),r=o(n.length),u=arguments.length,c=i(u>1?arguments[1]:void 0,r),f=u>2?arguments[2]:void 0,a=void 0===f?r:i(f,r);a>c;)n[c++]=t;return n}},{114:114,118:118,119:119}],10:[function(t,n,r){var e=t(39);n.exports=function(t,n){var r=[];return e(t,!1,r.push,r,n),r}},{39:39}],11:[function(t,n,r){var e=t(117),i=t(118),o=t(114);n.exports=function(t){return function(n,r,u){var c,f=e(n),a=i(f.length),s=o(u,a);if(t&&r!=r){for(;a>s;)if((c=f[s++])!=c)return!0}else for(;a>s;s++)if((t||s in f)&&f[s]===r)return t||s||0;return!t&&-1}}},{114:114,117:117,118:118}],12:[function(t,n,r){var e=t(25),i=t(47),o=t(119),u=t(118),c=t(15);n.exports=function(t,n){var r=1==t,f=2==t,a=3==t,s=4==t,l=6==t,h=5==t||l,v=n||c;return function(n,c,p){for(var y,g,d=o(n),m=i(d),b=e(c,p,3),S=u(m.length),w=0,x=r?v(n,S):f?v(n,0):void 0;S>w;w++)if((h||w in m)&&(g=b(y=m[w],w,d),t))if(r)x[w]=g;else if(g)switch(t){case 3:return!0;case 5:return y;case 6:return w;case 2:x.push(y)}else if(s)return!1;return l?-1:a||s?s:x}}},{118:118,119:119,15:15,25:25,47:47}],13:[function(t,n,r){var e=t(3),i=t(119),o=t(47),u=t(118);n.exports=function(t,n,r,c,f){e(n);var a=i(t),s=o(a),l=u(a.length),h=f?l-1:0,v=f?-1:1;if(r<2)for(;;){if(h in s){c=s[h],h+=v;break}if(h+=v,f?h<0:l<=h)throw TypeError("Reduce of empty array with no initial value")}for(;f?h>=0:l>h;h+=v)h in s&&(c=n(c,s[h],h,a));return c}},{118:118,119:119,3:3,47:47}],14:[function(t,n,r){var e=t(51),i=t(49),o=t(128)("species");n.exports=function(t){var n;return i(t)&&("function"!=typeof(n=t.constructor)||n!==Array&&!i(n.prototype)||(n=void 0),e(n)&&null===(n=n[o])&&(n=void 0)),void 0===n?Array:n}},{128:128,49:49,51:51}],15:[function(t,n,r){var e=t(14);n.exports=function(t,n){return new(e(t))(n)}},{14:14}],16:[function(t,n,r){"use strict";var e=t(3),i=t(51),o=t(46),u=[].slice,c={};n.exports=Function.bind||function(t){var n=e(this),r=u.call(arguments,1),f=function(){var e=r.concat(u.call(arguments));return this instanceof f?function(t,n,r){if(!(n in c)){for(var e=[],i=0;i<n;i++)e[i]="a["+i+"]";c[n]=Function("F,a","return new F("+e.join(",")+")")}return c[n](t,r)}(n,e.length,e):o(n,e,t)};return i(n.prototype)&&(f.prototype=n.prototype),f}},{3:3,46:46,51:51}],17:[function(t,n,r){var e=t(18),i=t(128)("toStringTag"),o="Arguments"==e(function(){return arguments}());n.exports=function(t){var n,r,u;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(r=function(t,n){try{return t[n]}catch(t){}}(n=Object(t),i))?r:o?e(n):"Object"==(u=e(n))&&"function"==typeof n.callee?"Arguments":u}},{128:128,18:18}],18:[function(t,n,r){var e={}.toString;n.exports=function(t){return e.call(t).slice(8,-1)}},{}],19:[function(t,n,r){"use strict";var e=t(72).f,i=t(71),o=t(93),u=t(25),c=t(6),f=t(39),a=t(55),s=t(57),l=t(100),h=t(29),v=t(66).fastKey,p=t(125),y=h?"_s":"size",g=function(t,n){var r,e=v(n);if("F"!==e)return t._i[e];for(r=t._f;r;r=r.n)if(r.k==n)return r};n.exports={getConstructor:function(t,n,r,a){var s=t(function(t,e){c(t,s,n,"_i"),t._t=n,t._i=i(null),t._f=void 0,t._l=void 0,t[y]=0,void 0!=e&&f(e,r,t[a],t)});return o(s.prototype,{clear:function(){for(var t=p(this,n),r=t._i,e=t._f;e;e=e.n)e.r=!0,e.p&&(e.p=e.p.n=void 0),delete r[e.i];t._f=t._l=void 0,t[y]=0},delete:function(t){var r=p(this,n),e=g(r,t);if(e){var i=e.n,o=e.p;delete r._i[e.i],e.r=!0,o&&(o.n=i),i&&(i.p=o),r._f==e&&(r._f=i),r._l==e&&(r._l=o),r[y]--}return!!e},forEach:function(t){p(this,n);for(var r,e=u(t,arguments.length>1?arguments[1]:void 0,3);r=r?r.n:this._f;)for(e(r.v,r.k,this);r&&r.r;)r=r.p},has:function(t){return!!g(p(this,n),t)}}),h&&e(s.prototype,"size",{get:function(){return p(this,n)[y]}}),s},def:function(t,n,r){var e,i,o=g(t,n);return o?o.v=r:(t._l=o={i:i=v(n,!0),k:n,v:r,p:e=t._l,n:void 0,r:!1},t._f||(t._f=o),e&&(e.n=o),t[y]++,"F"!==i&&(t._i[i]=o)),t},getEntry:g,setStrong:function(t,n,r){a(t,n,function(t,r){this._t=p(t,n),this._k=r,this._l=void 0},function(){for(var t=this._k,n=this._l;n&&n.r;)n=n.p;return this._t&&(this._l=n=n?n.n:this._t._f)?s(0,"keys"==t?n.k:"values"==t?n.v:[n.k,n.v]):(this._t=void 0,s(1))},r?"entries":"values",!r,!0),l(n)}}},{100:100,125:125,25:25,29:29,39:39,55:55,57:57,6:6,66:66,71:71,72:72,93:93}],20:[function(t,n,r){var e=t(17),i=t(10);n.exports=function(t){return function(){if(e(this)!=t)throw TypeError(t+"#toJSON isn't generic");return i(this)}}},{10:10,17:17}],21:[function(t,n,r){"use strict";var e=t(93),i=t(66).getWeak,o=t(7),u=t(51),c=t(6),f=t(39),a=t(12),s=t(41),l=t(125),h=a(5),v=a(6),p=0,y=function(t){return t._l||(t._l=new g)},g=function(){this.a=[]},d=function(t,n){return h(t.a,function(t){return t[0]===n})};g.prototype={get:function(t){var n=d(this,t);if(n)return n[1]},has:function(t){return!!d(this,t)},set:function(t,n){var r=d(this,t);r?r[1]=n:this.a.push([t,n])},delete:function(t){var n=v(this.a,function(n){return n[0]===t});return~n&&this.a.splice(n,1),!!~n}},n.exports={getConstructor:function(t,n,r,o){var a=t(function(t,e){c(t,a,n,"_i"),t._t=n,t._i=p++,t._l=void 0,void 0!=e&&f(e,r,t[o],t)});return e(a.prototype,{delete:function(t){if(!u(t))return!1;var r=i(t);return!0===r?y(l(this,n)).delete(t):r&&s(r,this._i)&&delete r[this._i]},has:function(t){if(!u(t))return!1;var r=i(t);return!0===r?y(l(this,n)).has(t):r&&s(r,this._i)}}),a},def:function(t,n,r){var e=i(o(n),!0);return!0===e?y(t).set(n,r):e[t._i]=r,t},ufstore:y}},{12:12,125:125,39:39,41:41,51:51,6:6,66:66,7:7,93:93}],22:[function(t,n,r){"use strict";var e=t(40),i=t(33),o=t(94),u=t(93),c=t(66),f=t(39),a=t(6),s=t(51),l=t(35),h=t(56),v=t(101),p=t(45);n.exports=function(t,n,r,y,g,d){var m=e[t],b=m,S=g?"set":"add",w=b&&b.prototype,x={},_=function(t){var n=w[t];o(w,t,"delete"==t?function(t){return!(d&&!s(t))&&n.call(this,0===t?0:t)}:"has"==t?function(t){return!(d&&!s(t))&&n.call(this,0===t?0:t)}:"get"==t?function(t){return d&&!s(t)?void 0:n.call(this,0===t?0:t)}:"add"==t?function(t){return n.call(this,0===t?0:t),this}:function(t,r){return n.call(this,0===t?0:t,r),this})};if("function"==typeof b&&(d||w.forEach&&!l(function(){(new b).entries().next()}))){var E=new b,O=E[S](d?{}:-0,1)!=E,M=l(function(){E.has(1)}),P=h(function(t){new b(t)}),F=!d&&l(function(){for(var t=new b,n=5;n--;)t[S](n,n);return!t.has(-0)});P||((b=n(function(n,r){a(n,b,t);var e=p(new m,n,b);return void 0!=r&&f(r,g,e[S],e),e})).prototype=w,w.constructor=b),(M||F)&&(_("delete"),_("has"),g&&_("get")),(F||O)&&_(S),d&&w.clear&&delete w.clear}else b=y.getConstructor(n,t,g,S),u(b.prototype,r),c.NEED=!0;return v(b,t),x[t]=b,i(i.G+i.W+i.F*(b!=m),x),d||y.setStrong(b,t,g),b}},{101:101,33:33,35:35,39:39,40:40,45:45,51:51,56:56,6:6,66:66,93:93,94:94}],23:[function(t,n,r){var e=n.exports={version:"2.5.0"};"number"==typeof __e&&(__e=e)},{}],24:[function(t,n,r){"use strict";var e=t(72),i=t(92);n.exports=function(t,n,r){n in t?e.f(t,n,i(0,r)):t[n]=r}},{72:72,92:92}],25:[function(t,n,r){var e=t(3);n.exports=function(t,n,r){if(e(t),void 0===n)return t;switch(r){case 1:return function(r){return t.call(n,r)};case 2:return function(r,e){return t.call(n,r,e)};case 3:return function(r,e,i){return t.call(n,r,e,i)}}return function(){return t.apply(n,arguments)}}},{3:3}],26:[function(t,n,r){"use strict";var e=t(35),i=Date.prototype.getTime,o=Date.prototype.toISOString,u=function(t){return t>9?t:"0"+t};n.exports=e(function(){return"0385-07-25T07:06:39.999Z"!=o.call(new Date(-5e13-1))})||!e(function(){o.call(new Date(NaN))})?function(){if(!isFinite(i.call(this)))throw RangeError("Invalid time value");var t=this,n=t.getUTCFullYear(),r=t.getUTCMilliseconds(),e=n<0?"-":n>9999?"+":"";return e+("00000"+Math.abs(n)).slice(e?-6:-4)+"-"+u(t.getUTCMonth()+1)+"-"+u(t.getUTCDate())+"T"+u(t.getUTCHours())+":"+u(t.getUTCMinutes())+":"+u(t.getUTCSeconds())+"."+(r>99?r:"0"+u(r))+"Z"}:o},{35:35}],27:[function(t,n,r){"use strict";var e=t(7),i=t(120);n.exports=function(t){if("string"!==t&&"number"!==t&&"default"!==t)throw TypeError("Incorrect hint");return i(e(this),"number"!=t)}},{120:120,7:7}],28:[function(t,n,r){n.exports=function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t}},{}],29:[function(t,n,r){n.exports=!t(35)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},{35:35}],30:[function(t,n,r){var e=t(51),i=t(40).document,o=e(i)&&e(i.createElement);n.exports=function(t){return o?i.createElement(t):{}}},{40:40,51:51}],31:[function(t,n,r){n.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},{}],32:[function(t,n,r){var e=t(81),i=t(78),o=t(82);n.exports=function(t){var n=e(t),r=i.f;if(r)for(var u,c=r(t),f=o.f,a=0;c.length>a;)f.call(t,u=c[a++])&&n.push(u);return n}},{78:78,81:81,82:82}],33:[function(t,n,r){var e=t(40),i=t(23),o=t(42),u=t(94),c=t(25),f=function(t,n,r){var a,s,l,h,v=t&f.F,p=t&f.G,y=t&f.S,g=t&f.P,d=t&f.B,m=p?e:y?e[n]||(e[n]={}):(e[n]||{}).prototype,b=p?i:i[n]||(i[n]={}),S=b.prototype||(b.prototype={});for(a in p&&(r=n),r)l=((s=!v&&m&&void 0!==m[a])?m:r)[a],h=d&&s?c(l,e):g&&"function"==typeof l?c(Function.call,l):l,m&&u(m,a,l,t&f.U),b[a]!=l&&o(b,a,h),g&&S[a]!=l&&(S[a]=l)};e.core=i,f.F=1,f.G=2,f.S=4,f.P=8,f.B=16,f.W=32,f.U=64,f.R=128,n.exports=f},{23:23,25:25,40:40,42:42,94:94}],34:[function(t,n,r){var e=t(128)("match");n.exports=function(t){var n=/./;try{"/./"[t](n)}catch(r){try{return n[e]=!1,!"/./"[t](n)}catch(t){}}return!0}},{128:128}],35:[function(t,n,r){n.exports=function(t){try{return!!t()}catch(t){return!0}}},{}],36:[function(t,n,r){"use strict";var e=t(42),i=t(94),o=t(35),u=t(28),c=t(128);n.exports=function(t,n,r){var f=c(t),a=r(u,f,""[t]),s=a[0],l=a[1];o(function(){var n={};return n[f]=function(){return 7},7!=""[t](n)})&&(i(String.prototype,t,s),e(RegExp.prototype,f,2==n?function(t,n){return l.call(t,this,n)}:function(t){return l.call(t,this)}))}},{128:128,28:28,35:35,42:42,94:94}],37:[function(t,n,r){"use strict";var e=t(7);n.exports=function(){var t=e(this),n="";return t.global&&(n+="g"),t.ignoreCase&&(n+="i"),t.multiline&&(n+="m"),t.unicode&&(n+="u"),t.sticky&&(n+="y"),n}},{7:7}],38:[function(t,n,r){"use strict";var e=t(49),i=t(51),o=t(118),u=t(25),c=t(128)("isConcatSpreadable");n.exports=function t(n,r,f,a,s,l,h,v){for(var p,y,g=s,d=0,m=!!h&&u(h,v,3);d<a;){if(d in f){if(p=m?m(f[d],d,r):f[d],y=!1,i(p)&&(y=void 0!==(y=p[c])?!!y:e(p)),y&&l>0)g=t(n,r,p,o(p.length),g,l-1)-1;else{if(g>=9007199254740991)throw TypeError();n[g]=p}g++}d++}return g}},{118:118,128:128,25:25,49:49,51:51}],39:[function(t,n,r){var e=t(25),i=t(53),o=t(48),u=t(7),c=t(118),f=t(129),a={},s={};(r=n.exports=function(t,n,r,l,h){var v,p,y,g,d=h?function(){return t}:f(t),m=e(r,l,n?2:1),b=0;if("function"!=typeof d)throw TypeError(t+" is not iterable!");if(o(d)){for(v=c(t.length);v>b;b++)if((g=n?m(u(p=t[b])[0],p[1]):m(t[b]))===a||g===s)return g}else for(y=d.call(t);!(p=y.next()).done;)if((g=i(y,m,p.value,n))===a||g===s)return g}).BREAK=a,r.RETURN=s},{118:118,129:129,25:25,48:48,53:53,7:7}],40:[function(t,n,r){var e=n.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)},{}],41:[function(t,n,r){var e={}.hasOwnProperty;n.exports=function(t,n){return e.call(t,n)}},{}],42:[function(t,n,r){var e=t(72),i=t(92);n.exports=t(29)?function(t,n,r){return e.f(t,n,i(1,r))}:function(t,n,r){return t[n]=r,t}},{29:29,72:72,92:92}],43:[function(t,n,r){var e=t(40).document;n.exports=e&&e.documentElement},{40:40}],44:[function(t,n,r){n.exports=!t(29)&&!t(35)(function(){return 7!=Object.defineProperty(t(30)("div"),"a",{get:function(){return 7}}).a})},{29:29,30:30,35:35}],45:[function(t,n,r){var e=t(51),i=t(99).set;n.exports=function(t,n,r){var o,u=n.constructor;return u!==r&&"function"==typeof u&&(o=u.prototype)!==r.prototype&&e(o)&&i&&i(t,o),t}},{51:51,99:99}],46:[function(t,n,r){n.exports=function(t,n,r){var e=void 0===r;switch(n.length){case 0:return e?t():t.call(r);case 1:return e?t(n[0]):t.call(r,n[0]);case 2:return e?t(n[0],n[1]):t.call(r,n[0],n[1]);case 3:return e?t(n[0],n[1],n[2]):t.call(r,n[0],n[1],n[2]);case 4:return e?t(n[0],n[1],n[2],n[3]):t.call(r,n[0],n[1],n[2],n[3])}return t.apply(r,n)}},{}],47:[function(t,n,r){var e=t(18);n.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==e(t)?t.split(""):Object(t)}},{18:18}],48:[function(t,n,r){var e=t(58),i=t(128)("iterator"),o=Array.prototype;n.exports=function(t){return void 0!==t&&(e.Array===t||o[i]===t)}},{128:128,58:58}],49:[function(t,n,r){var e=t(18);n.exports=Array.isArray||function(t){return"Array"==e(t)}},{18:18}],50:[function(t,n,r){var e=t(51),i=Math.floor;n.exports=function(t){return!e(t)&&isFinite(t)&&i(t)===t}},{51:51}],51:[function(t,n,r){n.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},{}],52:[function(t,n,r){var e=t(51),i=t(18),o=t(128)("match");n.exports=function(t){var n;return e(t)&&(void 0!==(n=t[o])?!!n:"RegExp"==i(t))}},{128:128,18:18,51:51}],53:[function(t,n,r){var e=t(7);n.exports=function(t,n,r,i){try{return i?n(e(r)[0],r[1]):n(r)}catch(n){var o=t.return;throw void 0!==o&&e(o.call(t)),n}}},{7:7}],54:[function(t,n,r){"use strict";var e=t(71),i=t(92),o=t(101),u={};t(42)(u,t(128)("iterator"),function(){return this}),n.exports=function(t,n,r){t.prototype=e(u,{next:i(1,r)}),o(t,n+" Iterator")}},{101:101,128:128,42:42,71:71,92:92}],55:[function(t,n,r){"use strict";var e=t(60),i=t(33),o=t(94),u=t(42),c=t(41),f=t(58),a=t(54),s=t(101),l=t(79),h=t(128)("iterator"),v=!([].keys&&"next"in[].keys()),p=function(){return this};n.exports=function(t,n,r,y,g,d,m){a(r,n,y);var b,S,w,x=function(t){if(!v&&t in M)return M[t];switch(t){case"keys":case"values":return function(){return new r(this,t)}}return function(){return new r(this,t)}},_=n+" Iterator",E="values"==g,O=!1,M=t.prototype,P=M[h]||M["@@iterator"]||g&&M[g],F=P||x(g),A=g?E?x("entries"):F:void 0,j="Array"==n&&M.entries||P;if(j&&(w=l(j.call(new t)))!==Object.prototype&&w.next&&(s(w,_,!0),e||c(w,h)||u(w,h,p)),E&&P&&"values"!==P.name&&(O=!0,F=function(){return P.call(this)}),e&&!m||!v&&!O&&M[h]||u(M,h,F),f[n]=F,f[_]=p,g)if(b={values:E?F:x("values"),keys:d?F:x("keys"),entries:A},m)for(S in b)S in M||o(M,S,b[S]);else i(i.P+i.F*(v||O),n,b);return b}},{101:101,128:128,33:33,41:41,42:42,54:54,58:58,60:60,79:79,94:94}],56:[function(t,n,r){var e=t(128)("iterator"),i=!1;try{var o=[7][e]();o.return=function(){i=!0},Array.from(o,function(){throw 2})}catch(t){}n.exports=function(t,n){if(!n&&!i)return!1;var r=!1;try{var o=[7],u=o[e]();u.next=function(){return{done:r=!0}},o[e]=function(){return u},t(o)}catch(t){}return r}},{128:128}],57:[function(t,n,r){n.exports=function(t,n){return{value:n,done:!!t}}},{}],58:[function(t,n,r){n.exports={}},{}],59:[function(t,n,r){var e=t(81),i=t(117);n.exports=function(t,n){for(var r,o=i(t),u=e(o),c=u.length,f=0;c>f;)if(o[r=u[f++]]===n)return r}},{117:117,81:81}],60:[function(t,n,r){n.exports=!1},{}],61:[function(t,n,r){var e=Math.expm1;n.exports=!e||e(10)>22025.465794806718||e(10)<22025.465794806718||-2e-17!=e(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:Math.exp(t)-1}:e},{}],62:[function(t,n,r){var e=t(65),i=Math.pow,o=i(2,-52),u=i(2,-23),c=i(2,127)*(2-u),f=i(2,-126);n.exports=Math.fround||function(t){var n,r,i=Math.abs(t),a=e(t);return i<f?a*(i/f/u+1/o-1/o)*f*u:(r=(n=(1+u/o)*i)-(n-i))>c||r!=r?a*(1/0):a*r}},{65:65}],63:[function(t,n,r){n.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:Math.log(1+t)}},{}],64:[function(t,n,r){n.exports=Math.scale||function(t,n,r,e,i){return 0===arguments.length||t!=t||n!=n||r!=r||e!=e||i!=i?NaN:t===1/0||t===-1/0?t:(t-n)*(i-e)/(r-n)+e}},{}],65:[function(t,n,r){n.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},{}],66:[function(t,n,r){var e=t(124)("meta"),i=t(51),o=t(41),u=t(72).f,c=0,f=Object.isExtensible||function(){return!0},a=!t(35)(function(){return f(Object.preventExtensions({}))}),s=function(t){u(t,e,{value:{i:"O"+ ++c,w:{}}})},l=n.exports={KEY:e,NEED:!1,fastKey:function(t,n){if(!i(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!o(t,e)){if(!f(t))return"F";if(!n)return"E";s(t)}return t[e].i},getWeak:function(t,n){if(!o(t,e)){if(!f(t))return!0;if(!n)return!1;s(t)}return t[e].w},onFreeze:function(t){return a&&l.NEED&&f(t)&&!o(t,e)&&s(t),t}}},{124:124,35:35,41:41,51:51,72:72}],67:[function(t,n,r){var e=t(160),i=t(33),o=t(103)("metadata"),u=o.store||(o.store=new(t(266))),c=function(t,n,r){var i=u.get(t);if(!i){if(!r)return;u.set(t,i=new e)}var o=i.get(n);if(!o){if(!r)return;i.set(n,o=new e)}return o};n.exports={store:u,map:c,has:function(t,n,r){var e=c(n,r,!1);return void 0!==e&&e.has(t)},get:function(t,n,r){var e=c(n,r,!1);return void 0===e?void 0:e.get(t)},set:function(t,n,r,e){c(r,e,!0).set(t,n)},keys:function(t,n){var r=c(t,n,!1),e=[];return r&&r.forEach(function(t,n){e.push(n)}),e},key:function(t){return void 0===t||"symbol"==typeof t?t:String(t)},exp:function(t){i(i.S,"Reflect",t)}}},{103:103,160:160,266:266,33:33}],68:[function(t,n,r){var e=t(40),i=t(113).set,o=e.MutationObserver||e.WebKitMutationObserver,u=e.process,c=e.Promise,f="process"==t(18)(u);n.exports=function(){var t,n,r,a=function(){var e,i;for(f&&(e=u.domain)&&e.exit();t;){i=t.fn,t=t.next;try{i()}catch(e){throw t?r():n=void 0,e}}n=void 0,e&&e.enter()};if(f)r=function(){u.nextTick(a)};else if(o){var s=!0,l=document.createTextNode("");new o(a).observe(l,{characterData:!0}),r=function(){l.data=s=!s}}else if(c&&c.resolve){var h=c.resolve();r=function(){h.then(a)}}else r=function(){i.call(e,a)};return function(e){var i={fn:e,next:void 0};n&&(n.next=i),t||(t=i,r()),n=i}}},{113:113,18:18,40:40}],69:[function(t,n,r){"use strict";var e=t(3);n.exports.f=function(t){return new function(t){var n,r;this.promise=new t(function(t,e){if(void 0!==n||void 0!==r)throw TypeError("Bad Promise constructor");n=t,r=e}),this.resolve=e(n),this.reject=e(r)}(t)}},{3:3}],70:[function(t,n,r){"use strict";var e=t(81),i=t(78),o=t(82),u=t(119),c=t(47),f=Object.assign;n.exports=!f||t(35)(function(){var t={},n={},r=Symbol(),e="abcdefghijklmnopqrst";return t[r]=7,e.split("").forEach(function(t){n[t]=t}),7!=f({},t)[r]||Object.keys(f({},n)).join("")!=e})?function(t,n){for(var r=u(t),f=arguments.length,a=1,s=i.f,l=o.f;f>a;)for(var h,v=c(arguments[a++]),p=s?e(v).concat(s(v)):e(v),y=p.length,g=0;y>g;)l.call(v,h=p[g++])&&(r[h]=v[h]);return r}:f},{119:119,35:35,47:47,78:78,81:81,82:82}],71:[function(t,n,r){var e=t(7),i=t(73),o=t(31),u=t(102)("IE_PROTO"),c=function(){},f=function(){var n,r=t(30)("iframe"),e=o.length;for(r.style.display="none",t(43).appendChild(r),r.src="javascript:",(n=r.contentWindow.document).open(),n.write("<script>document.F=Object<\/script>"),n.close(),f=n.F;e--;)delete f.prototype[o[e]];return f()};n.exports=Object.create||function(t,n){var r;return null!==t?(c.prototype=e(t),r=new c,c.prototype=null,r[u]=t):r=f(),void 0===n?r:i(r,n)}},{102:102,30:30,31:31,43:43,7:7,73:73}],72:[function(t,n,r){var e=t(7),i=t(44),o=t(120),u=Object.defineProperty;r.f=t(29)?Object.defineProperty:function(t,n,r){if(e(t),n=o(n,!0),e(r),i)try{return u(t,n,r)}catch(t){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(t[n]=r.value),t}},{120:120,29:29,44:44,7:7}],73:[function(t,n,r){var e=t(72),i=t(7),o=t(81);n.exports=t(29)?Object.defineProperties:function(t,n){i(t);for(var r,u=o(n),c=u.length,f=0;c>f;)e.f(t,r=u[f++],n[r]);return t}},{29:29,7:7,72:72,81:81}],74:[function(t,n,r){"use strict";n.exports=t(60)||!t(35)(function(){var n=Math.random();__defineSetter__.call(null,n,function(){}),delete t(40)[n]})},{35:35,40:40,60:60}],75:[function(t,n,r){var e=t(82),i=t(92),o=t(117),u=t(120),c=t(41),f=t(44),a=Object.getOwnPropertyDescriptor;r.f=t(29)?a:function(t,n){if(t=o(t),n=u(n,!0),f)try{return a(t,n)}catch(t){}if(c(t,n))return i(!e.f.call(t,n),t[n])}},{117:117,120:120,29:29,41:41,44:44,82:82,92:92}],76:[function(t,n,r){var e=t(117),i=t(77).f,o={}.toString,u="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];n.exports.f=function(t){return u&&"[object Window]"==o.call(t)?function(t){try{return i(t)}catch(t){return u.slice()}}(t):i(e(t))}},{117:117,77:77}],77:[function(t,n,r){var e=t(80),i=t(31).concat("length","prototype");r.f=Object.getOwnPropertyNames||function(t){return e(t,i)}},{31:31,80:80}],78:[function(t,n,r){r.f=Object.getOwnPropertySymbols},{}],79:[function(t,n,r){var e=t(41),i=t(119),o=t(102)("IE_PROTO"),u=Object.prototype;n.exports=Object.getPrototypeOf||function(t){return t=i(t),e(t,o)?t[o]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},{102:102,119:119,41:41}],80:[function(t,n,r){var e=t(41),i=t(117),o=t(11)(!1),u=t(102)("IE_PROTO");n.exports=function(t,n){var r,c=i(t),f=0,a=[];for(r in c)r!=u&&e(c,r)&&a.push(r);for(;n.length>f;)e(c,r=n[f++])&&(~o(a,r)||a.push(r));return a}},{102:102,11:11,117:117,41:41}],81:[function(t,n,r){var e=t(80),i=t(31);n.exports=Object.keys||function(t){return e(t,i)}},{31:31,80:80}],82:[function(t,n,r){r.f={}.propertyIsEnumerable},{}],83:[function(t,n,r){var e=t(33),i=t(23),o=t(35);n.exports=function(t,n){var r=(i.Object||{})[t]||Object[t],u={};u[t]=n(r),e(e.S+e.F*o(function(){r(1)}),"Object",u)}},{23:23,33:33,35:35}],84:[function(t,n,r){var e=t(81),i=t(117),o=t(82).f;n.exports=function(t){return function(n){for(var r,u=i(n),c=e(u),f=c.length,a=0,s=[];f>a;)o.call(u,r=c[a++])&&s.push(t?[r,u[r]]:u[r]);return s}}},{117:117,81:81,82:82}],85:[function(t,n,r){var e=t(77),i=t(78),o=t(7),u=t(40).Reflect;n.exports=u&&u.ownKeys||function(t){var n=e.f(o(t)),r=i.f;return r?n.concat(r(t)):n}},{40:40,7:7,77:77,78:78}],86:[function(t,n,r){var e=t(40).parseFloat,i=t(111).trim;n.exports=1/e(t(112)+"-0")!=-1/0?function(t){var n=i(String(t),3),r=e(n);return 0===r&&"-"==n.charAt(0)?-0:r}:e},{111:111,112:112,40:40}],87:[function(t,n,r){var e=t(40).parseInt,i=t(111).trim,o=t(112),u=/^[-+]?0[xX]/;n.exports=8!==e(o+"08")||22!==e(o+"0x16")?function(t,n){var r=i(String(t),3);return e(r,n>>>0||(u.test(r)?16:10))}:e},{111:111,112:112,40:40}],88:[function(t,n,r){"use strict";var e=t(89),i=t(46),o=t(3);n.exports=function(){for(var t=o(this),n=arguments.length,r=Array(n),u=0,c=e._,f=!1;n>u;)(r[u]=arguments[u++])===c&&(f=!0);return function(){var e,o=arguments.length,u=0,a=0;if(!f&&!o)return i(t,r,this);if(e=r.slice(),f)for(;n>u;u++)e[u]===c&&(e[u]=arguments[a++]);for(;o>a;)e.push(arguments[a++]);return i(t,e,this)}}},{3:3,46:46,89:89}],89:[function(t,n,r){n.exports=t(40)},{40:40}],90:[function(t,n,r){n.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},{}],91:[function(t,n,r){var e=t(69);n.exports=function(t,n){var r=e.f(t);return(0,r.resolve)(n),r.promise}},{69:69}],92:[function(t,n,r){n.exports=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}}},{}],93:[function(t,n,r){var e=t(94);n.exports=function(t,n,r){for(var i in n)e(t,i,n[i],r);return t}},{94:94}],94:[function(t,n,r){var e=t(40),i=t(42),o=t(41),u=t(124)("src"),c=Function.toString,f=(""+c).split("toString");t(23).inspectSource=function(t){return c.call(t)},(n.exports=function(t,n,r,c){var a="function"==typeof r;a&&(o(r,"name")||i(r,"name",n)),t[n]!==r&&(a&&(o(r,u)||i(r,u,t[n]?""+t[n]:f.join(String(n)))),t===e?t[n]=r:c?t[n]?t[n]=r:i(t,n,r):(delete t[n],i(t,n,r)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[u]||c.call(this)})},{124:124,23:23,40:40,41:41,42:42}],95:[function(t,n,r){n.exports=function(t,n){var r=n===Object(n)?function(t){return n[t]}:n;return function(n){return String(n).replace(t,r)}}},{}],96:[function(t,n,r){n.exports=Object.is||function(t,n){return t===n?0!==t||1/t==1/n:t!=t&&n!=n}},{}],97:[function(t,n,r){"use strict";var e=t(33),i=t(3),o=t(25),u=t(39);n.exports=function(t){e(e.S,t,{from:function(t){var n,r,e,c,f=arguments[1];return i(this),(n=void 0!==f)&&i(f),void 0==t?new this:(r=[],n?(e=0,c=o(f,arguments[2],2),u(t,!1,function(t){r.push(c(t,e++))})):u(t,!1,r.push,r),new this(r))}})}},{25:25,3:3,33:33,39:39}],98:[function(t,n,r){"use strict";var e=t(33);n.exports=function(t){e(e.S,t,{of:function(){for(var t=arguments.length,n=Array(t);t--;)n[t]=arguments[t];return new this(n)}})}},{33:33}],99:[function(t,n,r){var e=t(51),i=t(7),o=function(t,n){if(i(t),!e(n)&&null!==n)throw TypeError(n+": can't set as prototype!")};n.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(n,r,e){try{(e=t(25)(Function.call,t(75).f(Object.prototype,"__proto__").set,2))(n,[]),r=!(n instanceof Array)}catch(t){r=!0}return function(t,n){return o(t,n),r?t.__proto__=n:e(t,n),t}}({},!1):void 0),check:o}},{25:25,51:51,7:7,75:75}],100:[function(t,n,r){"use strict";var e=t(40),i=t(72),o=t(29),u=t(128)("species");n.exports=function(t){var n=e[t];o&&n&&!n[u]&&i.f(n,u,{configurable:!0,get:function(){return this}})}},{128:128,29:29,40:40,72:72}],101:[function(t,n,r){var e=t(72).f,i=t(41),o=t(128)("toStringTag");n.exports=function(t,n,r){t&&!i(t=r?t:t.prototype,o)&&e(t,o,{configurable:!0,value:n})}},{128:128,41:41,72:72}],102:[function(t,n,r){var e=t(103)("keys"),i=t(124);n.exports=function(t){return e[t]||(e[t]=i(t))}},{103:103,124:124}],103:[function(t,n,r){var e=t(40),i=e["__core-js_shared__"]||(e["__core-js_shared__"]={});n.exports=function(t){return i[t]||(i[t]={})}},{40:40}],104:[function(t,n,r){var e=t(7),i=t(3),o=t(128)("species");n.exports=function(t,n){var r,u=e(t).constructor;return void 0===u||void 0==(r=e(u)[o])?n:i(r)}},{128:128,3:3,7:7}],105:[function(t,n,r){"use strict";var e=t(35);n.exports=function(t,n){return!!t&&e(function(){n?t.call(null,function(){},1):t.call(null)})}},{35:35}],106:[function(t,n,r){var e=t(116),i=t(28);n.exports=function(t){return function(n,r){var o,u,c=String(i(n)),f=e(r),a=c.length;return f<0||f>=a?t?"":void 0:(o=c.charCodeAt(f))<55296||o>56319||f+1===a||(u=c.charCodeAt(f+1))<56320||u>57343?t?c.charAt(f):o:t?c.slice(f,f+2):u-56320+(o-55296<<10)+65536}}},{116:116,28:28}],107:[function(t,n,r){var e=t(52),i=t(28);n.exports=function(t,n,r){if(e(n))throw TypeError("String#"+r+" doesn't accept regex!");return String(i(t))}},{28:28,52:52}],108:[function(t,n,r){var e=t(33),i=t(35),o=t(28),u=/"/g,c=function(t,n,r,e){var i=String(o(t)),c="<"+n;return""!==r&&(c+=" "+r+'="'+String(e).replace(u,"&quot;")+'"'),c+">"+i+"</"+n+">"};n.exports=function(t,n){var r={};r[t]=n(c),e(e.P+e.F*i(function(){var n=""[t]('"');return n!==n.toLowerCase()||n.split('"').length>3}),"String",r)}},{28:28,33:33,35:35}],109:[function(t,n,r){var e=t(118),i=t(110),o=t(28);n.exports=function(t,n,r,u){var c=String(o(t)),f=c.length,a=void 0===r?" ":String(r),s=e(n);if(s<=f||""==a)return c;var l=s-f,h=i.call(a,Math.ceil(l/a.length));return h.length>l&&(h=h.slice(0,l)),u?h+c:c+h}},{110:110,118:118,28:28}],110:[function(t,n,r){"use strict";var e=t(116),i=t(28);n.exports=function(t){var n=String(i(this)),r="",o=e(t);if(o<0||o==1/0)throw RangeError("Count can't be negative");for(;o>0;(o>>>=1)&&(n+=n))1&o&&(r+=n);return r}},{116:116,28:28}],111:[function(t,n,r){var e=t(33),i=t(28),o=t(35),u=t(112),c="["+u+"]",f=RegExp("^"+c+c+"*"),a=RegExp(c+c+"*$"),s=function(t,n,r){var i={},c=o(function(){return!!u[t]()||"​"!="​"[t]()}),f=i[t]=c?n(l):u[t];r&&(i[r]=f),e(e.P+e.F*c,"String",i)},l=s.trim=function(t,n){return t=String(i(t)),1&n&&(t=t.replace(f,"")),2&n&&(t=t.replace(a,"")),t};n.exports=s},{112:112,28:28,33:33,35:35}],112:[function(t,n,r){n.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},{}],113:[function(t,n,r){var e,i,o,u=t(25),c=t(46),f=t(43),a=t(30),s=t(40),l=s.process,h=s.setImmediate,v=s.clearImmediate,p=s.MessageChannel,y=s.Dispatch,g=0,d={},m=function(){var t=+this;if(d.hasOwnProperty(t)){var n=d[t];delete d[t],n()}},b=function(t){m.call(t.data)};h&&v||(h=function(t){for(var n=[],r=1;arguments.length>r;)n.push(arguments[r++]);return d[++g]=function(){c("function"==typeof t?t:Function(t),n)},e(g),g},v=function(t){delete d[t]},"process"==t(18)(l)?e=function(t){l.nextTick(u(m,t,1))}:y&&y.now?e=function(t){y.now(u(m,t,1))}:p?(o=(i=new p).port2,i.port1.onmessage=b,e=u(o.postMessage,o,1)):s.addEventListener&&"function"==typeof postMessage&&!s.importScripts?(e=function(t){s.postMessage(t+"","*")},s.addEventListener("message",b,!1)):e="onreadystatechange"in a("script")?function(t){f.appendChild(a("script")).onreadystatechange=function(){f.removeChild(this),m.call(t)}}:function(t){setTimeout(u(m,t,1),0)}),n.exports={set:h,clear:v}},{18:18,25:25,30:30,40:40,43:43,46:46}],114:[function(t,n,r){var e=t(116),i=Math.max,o=Math.min;n.exports=function(t,n){return(t=e(t))<0?i(t+n,0):o(t,n)}},{116:116}],115:[function(t,n,r){var e=t(116),i=t(118);n.exports=function(t){if(void 0===t)return 0;var n=e(t),r=i(n);if(n!==r)throw RangeError("Wrong length!");return r}},{116:116,118:118}],116:[function(t,n,r){var e=Math.ceil,i=Math.floor;n.exports=function(t){return isNaN(t=+t)?0:(t>0?i:e)(t)}},{}],117:[function(t,n,r){var e=t(47),i=t(28);n.exports=function(t){return e(i(t))}},{28:28,47:47}],118:[function(t,n,r){var e=t(116),i=Math.min;n.exports=function(t){return t>0?i(e(t),9007199254740991):0}},{116:116}],119:[function(t,n,r){var e=t(28);n.exports=function(t){return Object(e(t))}},{28:28}],120:[function(t,n,r){var e=t(51);n.exports=function(t,n){if(!e(t))return t;var r,i;if(n&&"function"==typeof(r=t.toString)&&!e(i=r.call(t)))return i;if("function"==typeof(r=t.valueOf)&&!e(i=r.call(t)))return i;if(!n&&"function"==typeof(r=t.toString)&&!e(i=r.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},{51:51}],121:[function(t,n,r){"use strict";if(t(29)){var e=t(60),i=t(40),o=t(35),u=t(33),c=t(123),f=t(122),a=t(25),s=t(6),l=t(92),h=t(42),v=t(93),p=t(116),y=t(118),g=t(115),d=t(114),m=t(120),b=t(41),S=t(17),w=t(51),x=t(119),_=t(48),E=t(71),O=t(79),M=t(77).f,P=t(129),F=t(124),A=t(128),j=t(12),N=t(11),I=t(104),T=t(141),L=t(58),R=t(56),k=t(100),D=t(9),W=t(8),C=t(72),G=t(75),U=C.f,B=G.f,V=i.RangeError,z=i.TypeError,Y=i.Uint8Array,q=Array.prototype,J=f.ArrayBuffer,K=f.DataView,H=j(0),X=j(2),$=j(3),Z=j(4),Q=j(5),tt=j(6),nt=N(!0),rt=N(!1),et=T.values,it=T.keys,ot=T.entries,ut=q.lastIndexOf,ct=q.reduce,ft=q.reduceRight,at=q.join,st=q.sort,lt=q.slice,ht=q.toString,vt=q.toLocaleString,pt=A("iterator"),yt=A("toStringTag"),gt=F("typed_constructor"),dt=F("def_constructor"),mt=c.CONSTR,bt=c.TYPED,St=c.VIEW,wt=j(1,function(t,n){return Mt(I(t,t[dt]),n)}),xt=o(function(){return 1===new Y(new Uint16Array([1]).buffer)[0]}),_t=!!Y&&!!Y.prototype.set&&o(function(){new Y(1).set({})}),Et=function(t,n){var r=p(t);if(r<0||r%n)throw V("Wrong offset!");return r},Ot=function(t){if(w(t)&&bt in t)return t;throw z(t+" is not a typed array!")},Mt=function(t,n){if(!(w(t)&&gt in t))throw z("It is not a typed array constructor!");return new t(n)},Pt=function(t,n){return Ft(I(t,t[dt]),n)},Ft=function(t,n){for(var r=0,e=n.length,i=Mt(t,e);e>r;)i[r]=n[r++];return i},At=function(t,n,r){U(t,n,{get:function(){return this._d[r]}})},jt=function(t){var n,r,e,i,o,u,c=x(t),f=arguments.length,s=f>1?arguments[1]:void 0,l=void 0!==s,h=P(c);if(void 0!=h&&!_(h)){for(u=h.call(c),e=[],n=0;!(o=u.next()).done;n++)e.push(o.value);c=e}for(l&&f>2&&(s=a(s,arguments[2],2)),n=0,r=y(c.length),i=Mt(this,r);r>n;n++)i[n]=l?s(c[n],n):c[n];return i},Nt=function(){for(var t=0,n=arguments.length,r=Mt(this,n);n>t;)r[t]=arguments[t++];return r},It=!!Y&&o(function(){vt.call(new Y(1))}),Tt=function(){return vt.apply(It?lt.call(Ot(this)):Ot(this),arguments)},Lt={copyWithin:function(t,n){return W.call(Ot(this),t,n,arguments.length>2?arguments[2]:void 0)},every:function(t){return Z(Ot(this),t,arguments.length>1?arguments[1]:void 0)},fill:function(t){return D.apply(Ot(this),arguments)},filter:function(t){return Pt(this,X(Ot(this),t,arguments.length>1?arguments[1]:void 0))},find:function(t){return Q(Ot(this),t,arguments.length>1?arguments[1]:void 0)},findIndex:function(t){return tt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},forEach:function(t){H(Ot(this),t,arguments.length>1?arguments[1]:void 0)},indexOf:function(t){return rt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},includes:function(t){return nt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},join:function(t){return at.apply(Ot(this),arguments)},lastIndexOf:function(t){return ut.apply(Ot(this),arguments)},map:function(t){return wt(Ot(this),t,arguments.length>1?arguments[1]:void 0)},reduce:function(t){return ct.apply(Ot(this),arguments)},reduceRight:function(t){return ft.apply(Ot(this),arguments)},reverse:function(){for(var t,n=Ot(this).length,r=Math.floor(n/2),e=0;e<r;)t=this[e],this[e++]=this[--n],this[n]=t;return this},some:function(t){return $(Ot(this),t,arguments.length>1?arguments[1]:void 0)},sort:function(t){return st.call(Ot(this),t)},subarray:function(t,n){var r=Ot(this),e=r.length,i=d(t,e);return new(I(r,r[dt]))(r.buffer,r.byteOffset+i*r.BYTES_PER_ELEMENT,y((void 0===n?e:d(n,e))-i))}},Rt=function(t,n){return Pt(this,lt.call(Ot(this),t,n))},kt=function(t){Ot(this);var n=Et(arguments[1],1),r=this.length,e=x(t),i=y(e.length),o=0;if(i+n>r)throw V("Wrong length!");for(;o<i;)this[n+o]=e[o++]},Dt={entries:function(){return ot.call(Ot(this))},keys:function(){return it.call(Ot(this))},values:function(){return et.call(Ot(this))}},Wt=function(t,n){return w(t)&&t[bt]&&"symbol"!=typeof n&&n in t&&String(+n)==String(n)},Ct=function(t,n){return Wt(t,n=m(n,!0))?l(2,t[n]):B(t,n)},Gt=function(t,n,r){return!(Wt(t,n=m(n,!0))&&w(r)&&b(r,"value"))||b(r,"get")||b(r,"set")||r.configurable||b(r,"writable")&&!r.writable||b(r,"enumerable")&&!r.enumerable?U(t,n,r):(t[n]=r.value,t)};mt||(G.f=Ct,C.f=Gt),u(u.S+u.F*!mt,"Object",{getOwnPropertyDescriptor:Ct,defineProperty:Gt}),o(function(){ht.call({})})&&(ht=vt=function(){return at.call(this)});var Ut=v({},Lt);v(Ut,Dt),h(Ut,pt,Dt.values),v(Ut,{slice:Rt,set:kt,constructor:function(){},toString:ht,toLocaleString:Tt}),At(Ut,"buffer","b"),At(Ut,"byteOffset","o"),At(Ut,"byteLength","l"),At(Ut,"length","e"),U(Ut,yt,{get:function(){return this[bt]}}),n.exports=function(t,n,r,f){var a=t+((f=!!f)?"Clamped":"")+"Array",l="get"+t,v="set"+t,p=i[a],d=p||{},m=p&&O(p),b=!p||!c.ABV,x={},_=p&&p.prototype,P=function(t,r){U(t,r,{get:function(){return function(t,r){var e=t._d;return e.v[l](r*n+e.o,xt)}(this,r)},set:function(t){return function(t,r,e){var i=t._d;f&&(e=(e=Math.round(e))<0?0:e>255?255:255&e),i.v[v](r*n+i.o,e,xt)}(this,r,t)},enumerable:!0})};b?(p=r(function(t,r,e,i){s(t,p,a,"_d");var o,u,c,f,l=0,v=0;if(w(r)){if(!(r instanceof J||"ArrayBuffer"==(f=S(r))||"SharedArrayBuffer"==f))return bt in r?Ft(p,r):jt.call(p,r);o=r,v=Et(e,n);var d=r.byteLength;if(void 0===i){if(d%n)throw V("Wrong length!");if((u=d-v)<0)throw V("Wrong length!")}else if((u=y(i)*n)+v>d)throw V("Wrong length!");c=u/n}else c=g(r),o=new J(u=c*n);for(h(t,"_d",{b:o,o:v,l:u,e:c,v:new K(o)});l<c;)P(t,l++)}),_=p.prototype=E(Ut),h(_,"constructor",p)):o(function(){p(1)})&&o(function(){new p(-1)})&&R(function(t){new p,new p(null),new p(1.5),new p(t)},!0)||(p=r(function(t,r,e,i){var o;return s(t,p,a),w(r)?r instanceof J||"ArrayBuffer"==(o=S(r))||"SharedArrayBuffer"==o?void 0!==i?new d(r,Et(e,n),i):void 0!==e?new d(r,Et(e,n)):new d(r):bt in r?Ft(p,r):jt.call(p,r):new d(g(r))}),H(m!==Function.prototype?M(d).concat(M(m)):M(d),function(t){t in p||h(p,t,d[t])}),p.prototype=_,e||(_.constructor=p));var F=_[pt],A=!!F&&("values"==F.name||void 0==F.name),j=Dt.values;h(p,gt,!0),h(_,bt,a),h(_,St,!0),h(_,dt,p),(f?new p(1)[yt]==a:yt in _)||U(_,yt,{get:function(){return a}}),x[a]=p,u(u.G+u.W+u.F*(p!=d),x),u(u.S,a,{BYTES_PER_ELEMENT:n}),u(u.S+u.F*o(function(){d.of.call(p,1)}),a,{from:jt,of:Nt}),"BYTES_PER_ELEMENT"in _||h(_,"BYTES_PER_ELEMENT",n),u(u.P,a,Lt),k(a),u(u.P+u.F*_t,a,{set:kt}),u(u.P+u.F*!A,a,Dt),e||_.toString==ht||(_.toString=ht),u(u.P+u.F*o(function(){new p(1).slice()}),a,{slice:Rt}),u(u.P+u.F*(o(function(){return[1,2].toLocaleString()!=new p([1,2]).toLocaleString()})||!o(function(){_.toLocaleString.call([1,2])})),a,{toLocaleString:Tt}),L[a]=A?F:j,e||A||h(_,pt,j)}}else n.exports=function(){}},{100:100,104:104,11:11,114:114,115:115,116:116,118:118,119:119,12:12,120:120,122:122,123:123,124:124,128:128,129:129,141:141,17:17,25:25,29:29,33:33,35:35,40:40,41:41,42:42,48:48,51:51,56:56,58:58,6:6,60:60,71:71,72:72,75:75,77:77,79:79,8:8,9:9,92:92,93:93}],122:[function(t,n,r){"use strict";var e=t(40),i=t(29),o=t(60),u=t(123),c=t(42),f=t(93),a=t(35),s=t(6),l=t(116),h=t(118),v=t(115),p=t(77).f,y=t(72).f,g=t(9),d=t(101),m="prototype",b="Wrong index!",S=e.ArrayBuffer,w=e.DataView,x=e.Math,_=e.RangeError,E=e.Infinity,O=S,M=x.abs,P=x.pow,F=x.floor,A=x.log,j=x.LN2,N=i?"_b":"buffer",I=i?"_l":"byteLength",T=i?"_o":"byteOffset";function L(t,n,r){var e,i,o,u=Array(r),c=8*r-n-1,f=(1<<c)-1,a=f>>1,s=23===n?P(2,-24)-P(2,-77):0,l=0,h=t<0||0===t&&1/t<0?1:0;for((t=M(t))!=t||t===E?(i=t!=t?1:0,e=f):(e=F(A(t)/j),t*(o=P(2,-e))<1&&(e--,o*=2),(t+=e+a>=1?s/o:s*P(2,1-a))*o>=2&&(e++,o/=2),e+a>=f?(i=0,e=f):e+a>=1?(i=(t*o-1)*P(2,n),e+=a):(i=t*P(2,a-1)*P(2,n),e=0));n>=8;u[l++]=255&i,i/=256,n-=8);for(e=e<<n|i,c+=n;c>0;u[l++]=255&e,e/=256,c-=8);return u[--l]|=128*h,u}function R(t,n,r){var e,i=8*r-n-1,o=(1<<i)-1,u=o>>1,c=i-7,f=r-1,a=t[f--],s=127&a;for(a>>=7;c>0;s=256*s+t[f],f--,c-=8);for(e=s&(1<<-c)-1,s>>=-c,c+=n;c>0;e=256*e+t[f],f--,c-=8);if(0===s)s=1-u;else{if(s===o)return e?NaN:a?-E:E;e+=P(2,n),s-=u}return(a?-1:1)*e*P(2,s-n)}function k(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function D(t){return[255&t]}function W(t){return[255&t,t>>8&255]}function C(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function G(t){return L(t,52,8)}function U(t){return L(t,23,4)}function B(t,n,r){y(t[m],n,{get:function(){return this[r]}})}function V(t,n,r,e){var i=v(+r);if(i+n>t[I])throw _(b);var o=t[N]._b,u=i+t[T],c=o.slice(u,u+n);return e?c:c.reverse()}function z(t,n,r,e,i,o){var u=v(+r);if(u+n>t[I])throw _(b);for(var c=t[N]._b,f=u+t[T],a=e(+i),s=0;s<n;s++)c[f+s]=a[o?s:n-s-1]}if(u.ABV){if(!a(function(){S(1)})||!a(function(){new S(-1)})||a(function(){return new S,new S(1.5),new S(NaN),"ArrayBuffer"!=S.name})){for(var Y,q=(S=function(t){return s(this,S),new O(v(t))})[m]=O[m],J=p(O),K=0;J.length>K;)(Y=J[K++])in S||c(S,Y,O[Y]);o||(q.constructor=S)}var H=new w(new S(2)),X=w[m].setInt8;H.setInt8(0,2147483648),H.setInt8(1,2147483649),!H.getInt8(0)&&H.getInt8(1)||f(w[m],{setInt8:function(t,n){X.call(this,t,n<<24>>24)},setUint8:function(t,n){X.call(this,t,n<<24>>24)}},!0)}else S=function(t){s(this,S,"ArrayBuffer");var n=v(t);this._b=g.call(Array(n),0),this[I]=n},w=function(t,n,r){s(this,w,"DataView"),s(t,S,"DataView");var e=t[I],i=l(n);if(i<0||i>e)throw _("Wrong offset!");if(i+(r=void 0===r?e-i:h(r))>e)throw _("Wrong length!");this[N]=t,this[T]=i,this[I]=r},i&&(B(S,"byteLength","_l"),B(w,"buffer","_b"),B(w,"byteLength","_l"),B(w,"byteOffset","_o")),f(w[m],{getInt8:function(t){return V(this,1,t)[0]<<24>>24},getUint8:function(t){return V(this,1,t)[0]},getInt16:function(t){var n=V(this,2,t,arguments[1]);return(n[1]<<8|n[0])<<16>>16},getUint16:function(t){var n=V(this,2,t,arguments[1]);return n[1]<<8|n[0]},getInt32:function(t){return k(V(this,4,t,arguments[1]))},getUint32:function(t){return k(V(this,4,t,arguments[1]))>>>0},getFloat32:function(t){return R(V(this,4,t,arguments[1]),23,4)},getFloat64:function(t){return R(V(this,8,t,arguments[1]),52,8)},setInt8:function(t,n){z(this,1,t,D,n)},setUint8:function(t,n){z(this,1,t,D,n)},setInt16:function(t,n){z(this,2,t,W,n,arguments[2])},setUint16:function(t,n){z(this,2,t,W,n,arguments[2])},setInt32:function(t,n){z(this,4,t,C,n,arguments[2])},setUint32:function(t,n){z(this,4,t,C,n,arguments[2])},setFloat32:function(t,n){z(this,4,t,U,n,arguments[2])},setFloat64:function(t,n){z(this,8,t,G,n,arguments[2])}});d(S,"ArrayBuffer"),d(w,"DataView"),c(w[m],u.VIEW,!0),r.ArrayBuffer=S,r.DataView=w},{101:101,115:115,116:116,118:118,123:123,29:29,35:35,40:40,42:42,6:6,60:60,72:72,77:77,9:9,93:93}],123:[function(t,n,r){for(var e,i=t(40),o=t(42),u=t(124),c=u("typed_array"),f=u("view"),a=!(!i.ArrayBuffer||!i.DataView),s=a,l=0,h="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");l<9;)(e=i[h[l++]])?(o(e.prototype,c,!0),o(e.prototype,f,!0)):s=!1;n.exports={ABV:a,CONSTR:s,TYPED:c,VIEW:f}},{124:124,40:40,42:42}],124:[function(t,n,r){var e=0,i=Math.random();n.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++e+i).toString(36))}},{}],125:[function(t,n,r){var e=t(51);n.exports=function(t,n){if(!e(t)||t._t!==n)throw TypeError("Incompatible receiver, "+n+" required!");return t}},{51:51}],126:[function(t,n,r){var e=t(40),i=t(23),o=t(60),u=t(127),c=t(72).f;n.exports=function(t){var n=i.Symbol||(i.Symbol=o?{}:e.Symbol||{});"_"==t.charAt(0)||t in n||c(n,t,{value:u.f(t)})}},{127:127,23:23,40:40,60:60,72:72}],127:[function(t,n,r){r.f=t(128)},{128:128}],128:[function(t,n,r){var e=t(103)("wks"),i=t(124),o=t(40).Symbol,u="function"==typeof o;(n.exports=function(t){return e[t]||(e[t]=u&&o[t]||(u?o:i)("Symbol."+t))}).store=e},{103:103,124:124,40:40}],129:[function(t,n,r){var e=t(17),i=t(128)("iterator"),o=t(58);n.exports=t(23).getIteratorMethod=function(t){if(void 0!=t)return t[i]||t["@@iterator"]||o[e(t)]}},{128:128,17:17,23:23,58:58}],130:[function(t,n,r){var e=t(33),i=t(95)(/[\\^$*+?.()|[\]{}]/g,"\\$&");e(e.S,"RegExp",{escape:function(t){return i(t)}})},{33:33,95:95}],131:[function(t,n,r){var e=t(33);e(e.P,"Array",{copyWithin:t(8)}),t(5)("copyWithin")},{33:33,5:5,8:8}],132:[function(t,n,r){"use strict";var e=t(33),i=t(12)(4);e(e.P+e.F*!t(105)([].every,!0),"Array",{every:function(t){return i(this,t,arguments[1])}})},{105:105,12:12,33:33}],133:[function(t,n,r){var e=t(33);e(e.P,"Array",{fill:t(9)}),t(5)("fill")},{33:33,5:5,9:9}],134:[function(t,n,r){"use strict";var e=t(33),i=t(12)(2);e(e.P+e.F*!t(105)([].filter,!0),"Array",{filter:function(t){return i(this,t,arguments[1])}})},{105:105,12:12,33:33}],135:[function(t,n,r){"use strict";var e=t(33),i=t(12)(6),o="findIndex",u=!0;o in[]&&Array(1)[o](function(){u=!1}),e(e.P+e.F*u,"Array",{findIndex:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),t(5)(o)},{12:12,33:33,5:5}],136:[function(t,n,r){"use strict";var e=t(33),i=t(12)(5),o=!0;"find"in[]&&Array(1).find(function(){o=!1}),e(e.P+e.F*o,"Array",{find:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),t(5)("find")},{12:12,33:33,5:5}],137:[function(t,n,r){"use strict";var e=t(33),i=t(12)(0),o=t(105)([].forEach,!0);e(e.P+e.F*!o,"Array",{forEach:function(t){return i(this,t,arguments[1])}})},{105:105,12:12,33:33}],138:[function(t,n,r){"use strict";var e=t(25),i=t(33),o=t(119),u=t(53),c=t(48),f=t(118),a=t(24),s=t(129);i(i.S+i.F*!t(56)(function(t){Array.from(t)}),"Array",{from:function(t){var n,r,i,l,h=o(t),v="function"==typeof this?this:Array,p=arguments.length,y=p>1?arguments[1]:void 0,g=void 0!==y,d=0,m=s(h);if(g&&(y=e(y,p>2?arguments[2]:void 0,2)),void 0==m||v==Array&&c(m))for(r=new v(n=f(h.length));n>d;d++)a(r,d,g?y(h[d],d):h[d]);else for(l=m.call(h),r=new v;!(i=l.next()).done;d++)a(r,d,g?u(l,y,[i.value,d],!0):i.value);return r.length=d,r}})},{118:118,119:119,129:129,24:24,25:25,33:33,48:48,53:53,56:56}],139:[function(t,n,r){"use strict";var e=t(33),i=t(11)(!1),o=[].indexOf,u=!!o&&1/[1].indexOf(1,-0)<0;e(e.P+e.F*(u||!t(105)(o)),"Array",{indexOf:function(t){return u?o.apply(this,arguments)||0:i(this,t,arguments[1])}})},{105:105,11:11,33:33}],140:[function(t,n,r){var e=t(33);e(e.S,"Array",{isArray:t(49)})},{33:33,49:49}],141:[function(t,n,r){"use strict";var e=t(5),i=t(57),o=t(58),u=t(117);n.exports=t(55)(Array,"Array",function(t,n){this._t=u(t),this._i=0,this._k=n},function(){var t=this._t,n=this._k,r=this._i++;return!t||r>=t.length?(this._t=void 0,i(1)):i(0,"keys"==n?r:"values"==n?t[r]:[r,t[r]])},"values"),o.Arguments=o.Array,e("keys"),e("values"),e("entries")},{117:117,5:5,55:55,57:57,58:58}],142:[function(t,n,r){"use strict";var e=t(33),i=t(117),o=[].join;e(e.P+e.F*(t(47)!=Object||!t(105)(o)),"Array",{join:function(t){return o.call(i(this),void 0===t?",":t)}})},{105:105,117:117,33:33,47:47}],143:[function(t,n,r){"use strict";var e=t(33),i=t(117),o=t(116),u=t(118),c=[].lastIndexOf,f=!!c&&1/[1].lastIndexOf(1,-0)<0;e(e.P+e.F*(f||!t(105)(c)),"Array",{lastIndexOf:function(t){if(f)return c.apply(this,arguments)||0;var n=i(this),r=u(n.length),e=r-1;for(arguments.length>1&&(e=Math.min(e,o(arguments[1]))),e<0&&(e=r+e);e>=0;e--)if(e in n&&n[e]===t)return e||0;return-1}})},{105:105,116:116,117:117,118:118,33:33}],144:[function(t,n,r){"use strict";var e=t(33),i=t(12)(1);e(e.P+e.F*!t(105)([].map,!0),"Array",{map:function(t){return i(this,t,arguments[1])}})},{105:105,12:12,33:33}],145:[function(t,n,r){"use strict";var e=t(33),i=t(24);e(e.S+e.F*t(35)(function(){function t(){}return!(Array.of.call(t)instanceof t)}),"Array",{of:function(){for(var t=0,n=arguments.length,r=new("function"==typeof this?this:Array)(n);n>t;)i(r,t,arguments[t++]);return r.length=n,r}})},{24:24,33:33,35:35}],146:[function(t,n,r){"use strict";var e=t(33),i=t(13);e(e.P+e.F*!t(105)([].reduceRight,!0),"Array",{reduceRight:function(t){return i(this,t,arguments.length,arguments[1],!0)}})},{105:105,13:13,33:33}],147:[function(t,n,r){"use strict";var e=t(33),i=t(13);e(e.P+e.F*!t(105)([].reduce,!0),"Array",{reduce:function(t){return i(this,t,arguments.length,arguments[1],!1)}})},{105:105,13:13,33:33}],148:[function(t,n,r){"use strict";var e=t(33),i=t(43),o=t(18),u=t(114),c=t(118),f=[].slice;e(e.P+e.F*t(35)(function(){i&&f.call(i)}),"Array",{slice:function(t,n){var r=c(this.length),e=o(this);if(n=void 0===n?r:n,"Array"==e)return f.call(this,t,n);for(var i=u(t,r),a=u(n,r),s=c(a-i),l=Array(s),h=0;h<s;h++)l[h]="String"==e?this.charAt(i+h):this[i+h];return l}})},{114:114,118:118,18:18,33:33,35:35,43:43}],149:[function(t,n,r){"use strict";var e=t(33),i=t(12)(3);e(e.P+e.F*!t(105)([].some,!0),"Array",{some:function(t){return i(this,t,arguments[1])}})},{105:105,12:12,33:33}],150:[function(t,n,r){"use strict";var e=t(33),i=t(3),o=t(119),u=t(35),c=[].sort,f=[1,2,3];e(e.P+e.F*(u(function(){f.sort(void 0)})||!u(function(){f.sort(null)})||!t(105)(c)),"Array",{sort:function(t){return void 0===t?c.call(o(this)):c.call(o(this),i(t))}})},{105:105,119:119,3:3,33:33,35:35}],151:[function(t,n,r){t(100)("Array")},{100:100}],152:[function(t,n,r){var e=t(33);e(e.S,"Date",{now:function(){return(new Date).getTime()}})},{33:33}],153:[function(t,n,r){var e=t(33),i=t(26);e(e.P+e.F*(Date.prototype.toISOString!==i),"Date",{toISOString:i})},{26:26,33:33}],154:[function(t,n,r){"use strict";var e=t(33),i=t(119),o=t(120);e(e.P+e.F*t(35)(function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}),"Date",{toJSON:function(t){var n=i(this),r=o(n);return"number"!=typeof r||isFinite(r)?n.toISOString():null}})},{119:119,120:120,33:33,35:35}],155:[function(t,n,r){var e=t(128)("toPrimitive"),i=Date.prototype;e in i||t(42)(i,e,t(27))},{128:128,27:27,42:42}],156:[function(t,n,r){var e=Date.prototype,i=e.toString,o=e.getTime;new Date(NaN)+""!="Invalid Date"&&t(94)(e,"toString",function(){var t=o.call(this);return t==t?i.call(this):"Invalid Date"})},{94:94}],157:[function(t,n,r){var e=t(33);e(e.P,"Function",{bind:t(16)})},{16:16,33:33}],158:[function(t,n,r){"use strict";var e=t(51),i=t(79),o=t(128)("hasInstance"),u=Function.prototype;o in u||t(72).f(u,o,{value:function(t){if("function"!=typeof this||!e(t))return!1;if(!e(this.prototype))return t instanceof this;for(;t=i(t);)if(this.prototype===t)return!0;return!1}})},{128:128,51:51,72:72,79:79}],159:[function(t,n,r){var e=t(72).f,i=Function.prototype,o=/^\s*function ([^ (]*)/;"name"in i||t(29)&&e(i,"name",{configurable:!0,get:function(){try{return(""+this).match(o)[1]}catch(t){return""}}})},{29:29,72:72}],160:[function(t,n,r){"use strict";var e=t(19),i=t(125);n.exports=t(22)("Map",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{get:function(t){var n=e.getEntry(i(this,"Map"),t);return n&&n.v},set:function(t,n){return e.def(i(this,"Map"),0===t?0:t,n)}},e,!0)},{125:125,19:19,22:22}],161:[function(t,n,r){var e=t(33),i=t(63),o=Math.sqrt,u=Math.acosh;e(e.S+e.F*!(u&&710==Math.floor(u(Number.MAX_VALUE))&&u(1/0)==1/0),"Math",{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?Math.log(t)+Math.LN2:i(t-1+o(t-1)*o(t+1))}})},{33:33,63:63}],162:[function(t,n,r){var e=t(33),i=Math.asinh;e(e.S+e.F*!(i&&1/i(0)>0),"Math",{asinh:function t(n){return isFinite(n=+n)&&0!=n?n<0?-t(-n):Math.log(n+Math.sqrt(n*n+1)):n}})},{33:33}],163:[function(t,n,r){var e=t(33),i=Math.atanh;e(e.S+e.F*!(i&&1/i(-0)<0),"Math",{atanh:function(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}})},{33:33}],164:[function(t,n,r){var e=t(33),i=t(65);e(e.S,"Math",{cbrt:function(t){return i(t=+t)*Math.pow(Math.abs(t),1/3)}})},{33:33,65:65}],165:[function(t,n,r){var e=t(33);e(e.S,"Math",{clz32:function(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}})},{33:33}],166:[function(t,n,r){var e=t(33),i=Math.exp;e(e.S,"Math",{cosh:function(t){return(i(t=+t)+i(-t))/2}})},{33:33}],167:[function(t,n,r){var e=t(33),i=t(61);e(e.S+e.F*(i!=Math.expm1),"Math",{expm1:i})},{33:33,61:61}],168:[function(t,n,r){var e=t(33);e(e.S,"Math",{fround:t(62)})},{33:33,62:62}],169:[function(t,n,r){var e=t(33),i=Math.abs;e(e.S,"Math",{hypot:function(t,n){for(var r,e,o=0,u=0,c=arguments.length,f=0;u<c;)f<(r=i(arguments[u++]))?(o=o*(e=f/r)*e+1,f=r):o+=r>0?(e=r/f)*e:r;return f===1/0?1/0:f*Math.sqrt(o)}})},{33:33}],170:[function(t,n,r){var e=t(33),i=Math.imul;e(e.S+e.F*t(35)(function(){return-5!=i(4294967295,5)||2!=i.length}),"Math",{imul:function(t,n){var r=+t,e=+n,i=65535&r,o=65535&e;return 0|i*o+((65535&r>>>16)*o+i*(65535&e>>>16)<<16>>>0)}})},{33:33,35:35}],171:[function(t,n,r){var e=t(33);e(e.S,"Math",{log10:function(t){return Math.log(t)*Math.LOG10E}})},{33:33}],172:[function(t,n,r){var e=t(33);e(e.S,"Math",{log1p:t(63)})},{33:33,63:63}],173:[function(t,n,r){var e=t(33);e(e.S,"Math",{log2:function(t){return Math.log(t)/Math.LN2}})},{33:33}],174:[function(t,n,r){var e=t(33);e(e.S,"Math",{sign:t(65)})},{33:33,65:65}],175:[function(t,n,r){var e=t(33),i=t(61),o=Math.exp;e(e.S+e.F*t(35)(function(){return-2e-17!=!Math.sinh(-2e-17)}),"Math",{sinh:function(t){return Math.abs(t=+t)<1?(i(t)-i(-t))/2:(o(t-1)-o(-t-1))*(Math.E/2)}})},{33:33,35:35,61:61}],176:[function(t,n,r){var e=t(33),i=t(61),o=Math.exp;e(e.S,"Math",{tanh:function(t){var n=i(t=+t),r=i(-t);return n==1/0?1:r==1/0?-1:(n-r)/(o(t)+o(-t))}})},{33:33,61:61}],177:[function(t,n,r){var e=t(33);e(e.S,"Math",{trunc:function(t){return(t>0?Math.floor:Math.ceil)(t)}})},{33:33}],178:[function(t,n,r){"use strict";var e=t(40),i=t(41),o=t(18),u=t(45),c=t(120),f=t(35),a=t(77).f,s=t(75).f,l=t(72).f,h=t(111).trim,v=e.Number,p=v,y=v.prototype,g="Number"==o(t(71)(y)),d="trim"in String.prototype,m=function(t){var n=c(t,!1);if("string"==typeof n&&n.length>2){var r,e,i,o=(n=d?n.trim():h(n,3)).charCodeAt(0);if(43===o||45===o){if(88===(r=n.charCodeAt(2))||120===r)return NaN}else if(48===o){switch(n.charCodeAt(1)){case 66:case 98:e=2,i=49;break;case 79:case 111:e=8,i=55;break;default:return+n}for(var u,f=n.slice(2),a=0,s=f.length;a<s;a++)if((u=f.charCodeAt(a))<48||u>i)return NaN;return parseInt(f,e)}}return+n};if(!v(" 0o1")||!v("0b1")||v("+0x1")){v=function(t){var n=arguments.length<1?0:t,r=this;return r instanceof v&&(g?f(function(){y.valueOf.call(r)}):"Number"!=o(r))?u(new p(m(n)),r,v):m(n)};for(var b,S=t(29)?a(p):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),w=0;S.length>w;w++)i(p,b=S[w])&&!i(v,b)&&l(v,b,s(p,b));v.prototype=y,y.constructor=v,t(94)(e,"Number",v)}},{111:111,120:120,18:18,29:29,35:35,40:40,41:41,45:45,71:71,72:72,75:75,77:77,94:94}],179:[function(t,n,r){var e=t(33);e(e.S,"Number",{EPSILON:Math.pow(2,-52)})},{33:33}],180:[function(t,n,r){var e=t(33),i=t(40).isFinite;e(e.S,"Number",{isFinite:function(t){return"number"==typeof t&&i(t)}})},{33:33,40:40}],181:[function(t,n,r){var e=t(33);e(e.S,"Number",{isInteger:t(50)})},{33:33,50:50}],182:[function(t,n,r){var e=t(33);e(e.S,"Number",{isNaN:function(t){return t!=t}})},{33:33}],183:[function(t,n,r){var e=t(33),i=t(50),o=Math.abs;e(e.S,"Number",{isSafeInteger:function(t){return i(t)&&o(t)<=9007199254740991}})},{33:33,50:50}],184:[function(t,n,r){var e=t(33);e(e.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},{33:33}],185:[function(t,n,r){var e=t(33);e(e.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},{33:33}],186:[function(t,n,r){var e=t(33),i=t(86);e(e.S+e.F*(Number.parseFloat!=i),"Number",{parseFloat:i})},{33:33,86:86}],187:[function(t,n,r){var e=t(33),i=t(87);e(e.S+e.F*(Number.parseInt!=i),"Number",{parseInt:i})},{33:33,87:87}],188:[function(t,n,r){"use strict";var e=t(33),i=t(116),o=t(4),u=t(110),c=1..toFixed,f=Math.floor,a=[0,0,0,0,0,0],s="Number.toFixed: incorrect invocation!",l=function(t,n){for(var r=-1,e=n;++r<6;)e+=t*a[r],a[r]=e%1e7,e=f(e/1e7)},h=function(t){for(var n=6,r=0;--n>=0;)r+=a[n],a[n]=f(r/t),r=r%t*1e7},v=function(){for(var t=6,n="";--t>=0;)if(""!==n||0===t||0!==a[t]){var r=String(a[t]);n=""===n?r:n+u.call("0",7-r.length)+r}return n},p=function(t,n,r){return 0===n?r:n%2==1?p(t,n-1,r*t):p(t*t,n/2,r)};e(e.P+e.F*(!!c&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!t(35)(function(){c.call({})})),"Number",{toFixed:function(t){var n,r,e,c,f=o(this,s),a=i(t),y="",g="0";if(a<0||a>20)throw RangeError(s);if(f!=f)return"NaN";if(f<=-1e21||f>=1e21)return String(f);if(f<0&&(y="-",f=-f),f>1e-21)if(r=(n=function(t){for(var n=0,r=t;r>=4096;)n+=12,r/=4096;for(;r>=2;)n+=1,r/=2;return n}(f*p(2,69,1))-69)<0?f*p(2,-n,1):f/p(2,n,1),r*=4503599627370496,(n=52-n)>0){for(l(0,r),e=a;e>=7;)l(1e7,0),e-=7;for(l(p(10,e,1),0),e=n-1;e>=23;)h(1<<23),e-=23;h(1<<e),l(1,1),h(2),g=v()}else l(0,r),l(1<<-n,0),g=v()+u.call("0",a);return g=a>0?y+((c=g.length)<=a?"0."+u.call("0",a-c)+g:g.slice(0,c-a)+"."+g.slice(c-a)):y+g}})},{110:110,116:116,33:33,35:35,4:4}],189:[function(t,n,r){"use strict";var e=t(33),i=t(35),o=t(4),u=1..toPrecision;e(e.P+e.F*(i(function(){return"1"!==u.call(1,void 0)})||!i(function(){u.call({})})),"Number",{toPrecision:function(t){var n=o(this,"Number#toPrecision: incorrect invocation!");return void 0===t?u.call(n):u.call(n,t)}})},{33:33,35:35,4:4}],190:[function(t,n,r){var e=t(33);e(e.S+e.F,"Object",{assign:t(70)})},{33:33,70:70}],191:[function(t,n,r){var e=t(33);e(e.S,"Object",{create:t(71)})},{33:33,71:71}],192:[function(t,n,r){var e=t(33);e(e.S+e.F*!t(29),"Object",{defineProperties:t(73)})},{29:29,33:33,73:73}],193:[function(t,n,r){var e=t(33);e(e.S+e.F*!t(29),"Object",{defineProperty:t(72).f})},{29:29,33:33,72:72}],194:[function(t,n,r){var e=t(51),i=t(66).onFreeze;t(83)("freeze",function(t){return function(n){return t&&e(n)?t(i(n)):n}})},{51:51,66:66,83:83}],195:[function(t,n,r){var e=t(117),i=t(75).f;t(83)("getOwnPropertyDescriptor",function(){return function(t,n){return i(e(t),n)}})},{117:117,75:75,83:83}],196:[function(t,n,r){t(83)("getOwnPropertyNames",function(){return t(76).f})},{76:76,83:83}],197:[function(t,n,r){var e=t(119),i=t(79);t(83)("getPrototypeOf",function(){return function(t){return i(e(t))}})},{119:119,79:79,83:83}],198:[function(t,n,r){var e=t(51);t(83)("isExtensible",function(t){return function(n){return!!e(n)&&(!t||t(n))}})},{51:51,83:83}],199:[function(t,n,r){var e=t(51);t(83)("isFrozen",function(t){return function(n){return!e(n)||!!t&&t(n)}})},{51:51,83:83}],200:[function(t,n,r){var e=t(51);t(83)("isSealed",function(t){return function(n){return!e(n)||!!t&&t(n)}})},{51:51,83:83}],201:[function(t,n,r){var e=t(33);e(e.S,"Object",{is:t(96)})},{33:33,96:96}],202:[function(t,n,r){var e=t(119),i=t(81);t(83)("keys",function(){return function(t){return i(e(t))}})},{119:119,81:81,83:83}],203:[function(t,n,r){var e=t(51),i=t(66).onFreeze;t(83)("preventExtensions",function(t){return function(n){return t&&e(n)?t(i(n)):n}})},{51:51,66:66,83:83}],204:[function(t,n,r){var e=t(51),i=t(66).onFreeze;t(83)("seal",function(t){return function(n){return t&&e(n)?t(i(n)):n}})},{51:51,66:66,83:83}],205:[function(t,n,r){var e=t(33);e(e.S,"Object",{setPrototypeOf:t(99).set})},{33:33,99:99}],206:[function(t,n,r){"use strict";var e=t(17),i={};i[t(128)("toStringTag")]="z",i+""!="[object z]"&&t(94)(Object.prototype,"toString",function(){return"[object "+e(this)+"]"},!0)},{128:128,17:17,94:94}],207:[function(t,n,r){var e=t(33),i=t(86);e(e.G+e.F*(parseFloat!=i),{parseFloat:i})},{33:33,86:86}],208:[function(t,n,r){var e=t(33),i=t(87);e(e.G+e.F*(parseInt!=i),{parseInt:i})},{33:33,87:87}],209:[function(t,n,r){"use strict";var e,i,o,u,c=t(60),f=t(40),a=t(25),s=t(17),l=t(33),h=t(51),v=t(3),p=t(6),y=t(39),g=t(104),d=t(113).set,m=t(68)(),b=t(69),S=t(90),w=t(91),x=f.TypeError,_=f.process,E=f.Promise,O="process"==s(_),M=function(){},P=i=b.f,F=!!function(){try{var n=E.resolve(1),r=(n.constructor={})[t(128)("species")]=function(t){t(M,M)};return(O||"function"==typeof PromiseRejectionEvent)&&n.then(M)instanceof r}catch(t){}}(),A=c?function(t,n){return t===n||t===E&&n===u}:function(t,n){return t===n},j=function(t){var n;return!(!h(t)||"function"!=typeof(n=t.then))&&n},N=function(t,n){if(!t._n){t._n=!0;var r=t._c;m(function(){for(var e=t._v,i=1==t._s,o=0,u=function(n){var r,o,u=i?n.ok:n.fail,c=n.resolve,f=n.reject,a=n.domain;try{u?(i||(2==t._h&&L(t),t._h=1),!0===u?r=e:(a&&a.enter(),r=u(e),a&&a.exit()),r===n.promise?f(x("Promise-chain cycle")):(o=j(r))?o.call(r,c,f):c(r)):f(e)}catch(t){f(t)}};r.length>o;)u(r[o++]);t._c=[],t._n=!1,n&&!t._h&&I(t)})}},I=function(t){d.call(f,function(){var n,r,e,i=t._v,o=T(t);if(o&&(n=S(function(){O?_.emit("unhandledRejection",i,t):(r=f.onunhandledrejection)?r({promise:t,reason:i}):(e=f.console)&&e.error&&e.error("Unhandled promise rejection",i)}),t._h=O||T(t)?2:1),t._a=void 0,o&&n.e)throw n.v})},T=function(t){if(1==t._h)return!1;for(var n,r=t._a||t._c,e=0;r.length>e;)if((n=r[e++]).fail||!T(n.promise))return!1;return!0},L=function(t){d.call(f,function(){var n;O?_.emit("rejectionHandled",t):(n=f.onrejectionhandled)&&n({promise:t,reason:t._v})})},R=function(t){var n=this;n._d||(n._d=!0,(n=n._w||n)._v=t,n._s=2,n._a||(n._a=n._c.slice()),N(n,!0))},k=function(t){var n,r=this;if(!r._d){r._d=!0,r=r._w||r;try{if(r===t)throw x("Promise can't be resolved itself");(n=j(t))?m(function(){var e={_w:r,_d:!1};try{n.call(t,a(k,e,1),a(R,e,1))}catch(t){R.call(e,t)}}):(r._v=t,r._s=1,N(r,!1))}catch(t){R.call({_w:r,_d:!1},t)}}};F||(E=function(t){p(this,E,"Promise","_h"),v(t),e.call(this);try{t(a(k,this,1),a(R,this,1))}catch(t){R.call(this,t)}},(e=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=t(93)(E.prototype,{then:function(t,n){var r=P(g(this,E));return r.ok="function"!=typeof t||t,r.fail="function"==typeof n&&n,r.domain=O?_.domain:void 0,this._c.push(r),this._a&&this._a.push(r),this._s&&N(this,!1),r.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new e;this.promise=t,this.resolve=a(k,t,1),this.reject=a(R,t,1)},b.f=P=function(t){return A(E,t)?new o(t):i(t)}),l(l.G+l.W+l.F*!F,{Promise:E}),t(101)(E,"Promise"),t(100)("Promise"),u=t(23).Promise,l(l.S+l.F*!F,"Promise",{reject:function(t){var n=P(this);return(0,n.reject)(t),n.promise}}),l(l.S+l.F*(c||!F),"Promise",{resolve:function(t){return t instanceof E&&A(t.constructor,this)?t:w(this,t)}}),l(l.S+l.F*!(F&&t(56)(function(t){E.all(t).catch(M)})),"Promise",{all:function(t){var n=this,r=P(n),e=r.resolve,i=r.reject,o=S(function(){var r=[],o=0,u=1;y(t,!1,function(t){var c=o++,f=!1;r.push(void 0),u++,n.resolve(t).then(function(t){f||(f=!0,r[c]=t,--u||e(r))},i)}),--u||e(r)});return o.e&&i(o.v),r.promise},race:function(t){var n=this,r=P(n),e=r.reject,i=S(function(){y(t,!1,function(t){n.resolve(t).then(r.resolve,e)})});return i.e&&e(i.v),r.promise}})},{100:100,101:101,104:104,113:113,128:128,17:17,23:23,25:25,3:3,33:33,39:39,40:40,51:51,56:56,6:6,60:60,68:68,69:69,90:90,91:91,93:93}],210:[function(t,n,r){var e=t(33),i=t(3),o=t(7),u=(t(40).Reflect||{}).apply,c=Function.apply;e(e.S+e.F*!t(35)(function(){u(function(){})}),"Reflect",{apply:function(t,n,r){var e=i(t),f=o(r);return u?u(e,n,f):c.call(e,n,f)}})},{3:3,33:33,35:35,40:40,7:7}],211:[function(t,n,r){var e=t(33),i=t(71),o=t(3),u=t(7),c=t(51),f=t(35),a=t(16),s=(t(40).Reflect||{}).construct,l=f(function(){function t(){}return!(s(function(){},[],t)instanceof t)}),h=!f(function(){s(function(){})});e(e.S+e.F*(l||h),"Reflect",{construct:function(t,n){o(t),u(n);var r=arguments.length<3?t:o(arguments[2]);if(h&&!l)return s(t,n,r);if(t==r){switch(n.length){case 0:return new t;case 1:return new t(n[0]);case 2:return new t(n[0],n[1]);case 3:return new t(n[0],n[1],n[2]);case 4:return new t(n[0],n[1],n[2],n[3])}var e=[null];return e.push.apply(e,n),new(a.apply(t,e))}var f=r.prototype,v=i(c(f)?f:Object.prototype),p=Function.apply.call(t,v,n);return c(p)?p:v}})},{16:16,3:3,33:33,35:35,40:40,51:51,7:7,71:71}],212:[function(t,n,r){var e=t(72),i=t(33),o=t(7),u=t(120);i(i.S+i.F*t(35)(function(){Reflect.defineProperty(e.f({},1,{value:1}),1,{value:2})}),"Reflect",{defineProperty:function(t,n,r){o(t),n=u(n,!0),o(r);try{return e.f(t,n,r),!0}catch(t){return!1}}})},{120:120,33:33,35:35,7:7,72:72}],213:[function(t,n,r){var e=t(33),i=t(75).f,o=t(7);e(e.S,"Reflect",{deleteProperty:function(t,n){var r=i(o(t),n);return!(r&&!r.configurable)&&delete t[n]}})},{33:33,7:7,75:75}],214:[function(t,n,r){"use strict";var e=t(33),i=t(7),o=function(t){this._t=i(t),this._i=0;var n,r=this._k=[];for(n in t)r.push(n)};t(54)(o,"Object",function(){var t,n=this._k;do{if(this._i>=n.length)return{value:void 0,done:!0}}while(!((t=n[this._i++])in this._t));return{value:t,done:!1}}),e(e.S,"Reflect",{enumerate:function(t){return new o(t)}})},{33:33,54:54,7:7}],215:[function(t,n,r){var e=t(75),i=t(33),o=t(7);i(i.S,"Reflect",{getOwnPropertyDescriptor:function(t,n){return e.f(o(t),n)}})},{33:33,7:7,75:75}],216:[function(t,n,r){var e=t(33),i=t(79),o=t(7);e(e.S,"Reflect",{getPrototypeOf:function(t){return i(o(t))}})},{33:33,7:7,79:79}],217:[function(t,n,r){var e=t(75),i=t(79),o=t(41),u=t(33),c=t(51),f=t(7);u(u.S,"Reflect",{get:function t(n,r){var u,a,s=arguments.length<3?n:arguments[2];return f(n)===s?n[r]:(u=e.f(n,r))?o(u,"value")?u.value:void 0!==u.get?u.get.call(s):void 0:c(a=i(n))?t(a,r,s):void 0}})},{33:33,41:41,51:51,7:7,75:75,79:79}],218:[function(t,n,r){var e=t(33);e(e.S,"Reflect",{has:function(t,n){return n in t}})},{33:33}],219:[function(t,n,r){var e=t(33),i=t(7),o=Object.isExtensible;e(e.S,"Reflect",{isExtensible:function(t){return i(t),!o||o(t)}})},{33:33,7:7}],220:[function(t,n,r){var e=t(33);e(e.S,"Reflect",{ownKeys:t(85)})},{33:33,85:85}],221:[function(t,n,r){var e=t(33),i=t(7),o=Object.preventExtensions;e(e.S,"Reflect",{preventExtensions:function(t){i(t);try{return o&&o(t),!0}catch(t){return!1}}})},{33:33,7:7}],222:[function(t,n,r){var e=t(33),i=t(99);i&&e(e.S,"Reflect",{setPrototypeOf:function(t,n){i.check(t,n);try{return i.set(t,n),!0}catch(t){return!1}}})},{33:33,99:99}],223:[function(t,n,r){var e=t(72),i=t(75),o=t(79),u=t(41),c=t(33),f=t(92),a=t(7),s=t(51);c(c.S,"Reflect",{set:function t(n,r,c){var l,h,v=arguments.length<4?n:arguments[3],p=i.f(a(n),r);if(!p){if(s(h=o(n)))return t(h,r,c,v);p=f(0)}return u(p,"value")?!(!1===p.writable||!s(v)||((l=i.f(v,r)||f(0)).value=c,e.f(v,r,l),0)):void 0!==p.set&&(p.set.call(v,c),!0)}})},{33:33,41:41,51:51,7:7,72:72,75:75,79:79,92:92}],224:[function(t,n,r){var e=t(40),i=t(45),o=t(72).f,u=t(77).f,c=t(52),f=t(37),a=e.RegExp,s=a,l=a.prototype,h=/a/g,v=/a/g,p=new a(h)!==h;if(t(29)&&(!p||t(35)(function(){return v[t(128)("match")]=!1,a(h)!=h||a(v)==v||"/a/i"!=a(h,"i")}))){a=function(t,n){var r=this instanceof a,e=c(t),o=void 0===n;return!r&&e&&t.constructor===a&&o?t:i(p?new s(e&&!o?t.source:t,n):s((e=t instanceof a)?t.source:t,e&&o?f.call(t):n),r?this:l,a)};for(var y=function(t){t in a||o(a,t,{configurable:!0,get:function(){return s[t]},set:function(n){s[t]=n}})},g=u(s),d=0;g.length>d;)y(g[d++]);l.constructor=a,a.prototype=l,t(94)(e,"RegExp",a)}t(100)("RegExp")},{100:100,128:128,29:29,35:35,37:37,40:40,45:45,52:52,72:72,77:77,94:94}],225:[function(t,n,r){t(29)&&"g"!=/./g.flags&&t(72).f(RegExp.prototype,"flags",{configurable:!0,get:t(37)})},{29:29,37:37,72:72}],226:[function(t,n,r){t(36)("match",1,function(t,n,r){return[function(r){"use strict";var e=t(this),i=void 0==r?void 0:r[n];return void 0!==i?i.call(r,e):new RegExp(r)[n](String(e))},r]})},{36:36}],227:[function(t,n,r){t(36)("replace",2,function(t,n,r){return[function(e,i){"use strict";var o=t(this),u=void 0==e?void 0:e[n];return void 0!==u?u.call(e,o,i):r.call(String(o),e,i)},r]})},{36:36}],228:[function(t,n,r){t(36)("search",1,function(t,n,r){return[function(r){"use strict";var e=t(this),i=void 0==r?void 0:r[n];return void 0!==i?i.call(r,e):new RegExp(r)[n](String(e))},r]})},{36:36}],229:[function(t,n,r){t(36)("split",2,function(n,r,e){"use strict";var i=t(52),o=e,u=[].push;if("c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length){var c=void 0===/()??/.exec("")[1];e=function(t,n){var r=String(this);if(void 0===t&&0===n)return[];if(!i(t))return o.call(r,t,n);var e,f,a,s,l,h=[],v=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),p=0,y=void 0===n?4294967295:n>>>0,g=new RegExp(t.source,v+"g");for(c||(e=new RegExp("^"+g.source+"$(?!\\s)",v));(f=g.exec(r))&&!((a=f.index+f[0].length)>p&&(h.push(r.slice(p,f.index)),!c&&f.length>1&&f[0].replace(e,function(){for(l=1;l<arguments.length-2;l++)void 0===arguments[l]&&(f[l]=void 0)}),f.length>1&&f.index<r.length&&u.apply(h,f.slice(1)),s=f[0].length,p=a,h.length>=y));)g.lastIndex===f.index&&g.lastIndex++;return p===r.length?!s&&g.test("")||h.push(""):h.push(r.slice(p)),h.length>y?h.slice(0,y):h}}else"0".split(void 0,0).length&&(e=function(t,n){return void 0===t&&0===n?[]:o.call(this,t,n)});return[function(t,i){var o=n(this),u=void 0==t?void 0:t[r];return void 0!==u?u.call(t,o,i):e.call(String(o),t,i)},e]})},{36:36,52:52}],230:[function(t,n,r){"use strict";t(225);var e=t(7),i=t(37),o=t(29),u=/./.toString,c=function(n){t(94)(RegExp.prototype,"toString",n,!0)};t(35)(function(){return"/a/b"!=u.call({source:"a",flags:"b"})})?c(function(){var t=e(this);return"/".concat(t.source,"/","flags"in t?t.flags:!o&&t instanceof RegExp?i.call(t):void 0)}):"toString"!=u.name&&c(function(){return u.call(this)})},{225:225,29:29,35:35,37:37,7:7,94:94}],231:[function(t,n,r){"use strict";var e=t(19),i=t(125);n.exports=t(22)("Set",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return e.def(i(this,"Set"),t=0===t?0:t,t)}},e)},{125:125,19:19,22:22}],232:[function(t,n,r){"use strict";t(108)("anchor",function(t){return function(n){return t(this,"a","name",n)}})},{108:108}],233:[function(t,n,r){"use strict";t(108)("big",function(t){return function(){return t(this,"big","","")}})},{108:108}],234:[function(t,n,r){"use strict";t(108)("blink",function(t){return function(){return t(this,"blink","","")}})},{108:108}],235:[function(t,n,r){"use strict";t(108)("bold",function(t){return function(){return t(this,"b","","")}})},{108:108}],236:[function(t,n,r){"use strict";var e=t(33),i=t(106)(!1);e(e.P,"String",{codePointAt:function(t){return i(this,t)}})},{106:106,33:33}],237:[function(t,n,r){"use strict";var e=t(33),i=t(118),o=t(107),u="".endsWith;e(e.P+e.F*t(34)("endsWith"),"String",{endsWith:function(t){var n=o(this,t,"endsWith"),r=arguments.length>1?arguments[1]:void 0,e=i(n.length),c=void 0===r?e:Math.min(i(r),e),f=String(t);return u?u.call(n,f,c):n.slice(c-f.length,c)===f}})},{107:107,118:118,33:33,34:34}],238:[function(t,n,r){"use strict";t(108)("fixed",function(t){return function(){return t(this,"tt","","")}})},{108:108}],239:[function(t,n,r){"use strict";t(108)("fontcolor",function(t){return function(n){return t(this,"font","color",n)}})},{108:108}],240:[function(t,n,r){"use strict";t(108)("fontsize",function(t){return function(n){return t(this,"font","size",n)}})},{108:108}],241:[function(t,n,r){var e=t(33),i=t(114),o=String.fromCharCode,u=String.fromCodePoint;e(e.S+e.F*(!!u&&1!=u.length),"String",{fromCodePoint:function(t){for(var n,r=[],e=arguments.length,u=0;e>u;){if(n=+arguments[u++],i(n,1114111)!==n)throw RangeError(n+" is not a valid code point");r.push(n<65536?o(n):o(55296+((n-=65536)>>10),n%1024+56320))}return r.join("")}})},{114:114,33:33}],242:[function(t,n,r){"use strict";var e=t(33),i=t(107);e(e.P+e.F*t(34)("includes"),"String",{includes:function(t){return!!~i(this,t,"includes").indexOf(t,arguments.length>1?arguments[1]:void 0)}})},{107:107,33:33,34:34}],243:[function(t,n,r){"use strict";t(108)("italics",function(t){return function(){return t(this,"i","","")}})},{108:108}],244:[function(t,n,r){"use strict";var e=t(106)(!0);t(55)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,n=this._t,r=this._i;return r>=n.length?{value:void 0,done:!0}:(t=e(n,r),this._i+=t.length,{value:t,done:!1})})},{106:106,55:55}],245:[function(t,n,r){"use strict";t(108)("link",function(t){return function(n){return t(this,"a","href",n)}})},{108:108}],246:[function(t,n,r){var e=t(33),i=t(117),o=t(118);e(e.S,"String",{raw:function(t){for(var n=i(t.raw),r=o(n.length),e=arguments.length,u=[],c=0;r>c;)u.push(String(n[c++])),c<e&&u.push(String(arguments[c]));return u.join("")}})},{117:117,118:118,33:33}],247:[function(t,n,r){var e=t(33);e(e.P,"String",{repeat:t(110)})},{110:110,33:33}],248:[function(t,n,r){"use strict";t(108)("small",function(t){return function(){return t(this,"small","","")}})},{108:108}],249:[function(t,n,r){"use strict";var e=t(33),i=t(118),o=t(107),u="".startsWith;e(e.P+e.F*t(34)("startsWith"),"String",{startsWith:function(t){var n=o(this,t,"startsWith"),r=i(Math.min(arguments.length>1?arguments[1]:void 0,n.length)),e=String(t);return u?u.call(n,e,r):n.slice(r,r+e.length)===e}})},{107:107,118:118,33:33,34:34}],250:[function(t,n,r){"use strict";t(108)("strike",function(t){return function(){return t(this,"strike","","")}})},{108:108}],251:[function(t,n,r){"use strict";t(108)("sub",function(t){return function(){return t(this,"sub","","")}})},{108:108}],252:[function(t,n,r){"use strict";t(108)("sup",function(t){return function(){return t(this,"sup","","")}})},{108:108}],253:[function(t,n,r){"use strict";t(111)("trim",function(t){return function(){return t(this,3)}})},{111:111}],254:[function(t,n,r){"use strict";var e=t(40),i=t(41),o=t(29),u=t(33),c=t(94),f=t(66).KEY,a=t(35),s=t(103),l=t(101),h=t(124),v=t(128),p=t(127),y=t(126),g=t(59),d=t(32),m=t(49),b=t(7),S=t(117),w=t(120),x=t(92),_=t(71),E=t(76),O=t(75),M=t(72),P=t(81),F=O.f,A=M.f,j=E.f,N=e.Symbol,I=e.JSON,T=I&&I.stringify,L=v("_hidden"),R=v("toPrimitive"),k={}.propertyIsEnumerable,D=s("symbol-registry"),W=s("symbols"),C=s("op-symbols"),G=Object.prototype,U="function"==typeof N,B=e.QObject,V=!B||!B.prototype||!B.prototype.findChild,z=o&&a(function(){return 7!=_(A({},"a",{get:function(){return A(this,"a",{value:7}).a}})).a})?function(t,n,r){var e=F(G,n);e&&delete G[n],A(t,n,r),e&&t!==G&&A(G,n,e)}:A,Y=function(t){var n=W[t]=_(N.prototype);return n._k=t,n},q=U&&"symbol"==typeof N.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof N},J=function(t,n,r){return t===G&&J(C,n,r),b(t),n=w(n,!0),b(r),i(W,n)?(r.enumerable?(i(t,L)&&t[L][n]&&(t[L][n]=!1),r=_(r,{enumerable:x(0,!1)})):(i(t,L)||A(t,L,x(1,{})),t[L][n]=!0),z(t,n,r)):A(t,n,r)},K=function(t,n){b(t);for(var r,e=d(n=S(n)),i=0,o=e.length;o>i;)J(t,r=e[i++],n[r]);return t},H=function(t){var n=k.call(this,t=w(t,!0));return!(this===G&&i(W,t)&&!i(C,t))&&(!(n||!i(this,t)||!i(W,t)||i(this,L)&&this[L][t])||n)},X=function(t,n){if(t=S(t),n=w(n,!0),t!==G||!i(W,n)||i(C,n)){var r=F(t,n);return!r||!i(W,n)||i(t,L)&&t[L][n]||(r.enumerable=!0),r}},$=function(t){for(var n,r=j(S(t)),e=[],o=0;r.length>o;)i(W,n=r[o++])||n==L||n==f||e.push(n);return e},Z=function(t){for(var n,r=t===G,e=j(r?C:S(t)),o=[],u=0;e.length>u;)!i(W,n=e[u++])||r&&!i(G,n)||o.push(W[n]);return o};U||(c((N=function(){if(this instanceof N)throw TypeError("Symbol is not a constructor!");var t=h(arguments.length>0?arguments[0]:void 0),n=function(r){this===G&&n.call(C,r),i(this,L)&&i(this[L],t)&&(this[L][t]=!1),z(this,t,x(1,r))};return o&&V&&z(G,t,{configurable:!0,set:n}),Y(t)}).prototype,"toString",function(){return this._k}),O.f=X,M.f=J,t(77).f=E.f=$,t(82).f=H,t(78).f=Z,o&&!t(60)&&c(G,"propertyIsEnumerable",H,!0),p.f=function(t){return Y(v(t))}),u(u.G+u.W+u.F*!U,{Symbol:N});for(var Q="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),tt=0;Q.length>tt;)v(Q[tt++]);for(var nt=P(v.store),rt=0;nt.length>rt;)y(nt[rt++]);u(u.S+u.F*!U,"Symbol",{for:function(t){return i(D,t+="")?D[t]:D[t]=N(t)},keyFor:function(t){if(q(t))return g(D,t);throw TypeError(t+" is not a symbol!")},useSetter:function(){V=!0},useSimple:function(){V=!1}}),u(u.S+u.F*!U,"Object",{create:function(t,n){return void 0===n?_(t):K(_(t),n)},defineProperty:J,defineProperties:K,getOwnPropertyDescriptor:X,getOwnPropertyNames:$,getOwnPropertySymbols:Z}),I&&u(u.S+u.F*(!U||a(function(){var t=N();return"[null]"!=T([t])||"{}"!=T({a:t})||"{}"!=T(Object(t))})),"JSON",{stringify:function(t){if(void 0!==t&&!q(t)){for(var n,r,e=[t],i=1;arguments.length>i;)e.push(arguments[i++]);return"function"==typeof(n=e[1])&&(r=n),!r&&m(n)||(n=function(t,n){if(r&&(n=r.call(this,t,n)),!q(n))return n}),e[1]=n,T.apply(I,e)}}}),N.prototype[R]||t(42)(N.prototype,R,N.prototype.valueOf),l(N,"Symbol"),l(Math,"Math",!0),l(e.JSON,"JSON",!0)},{101:101,103:103,117:117,120:120,124:124,126:126,127:127,128:128,29:29,32:32,33:33,35:35,40:40,41:41,42:42,49:49,59:59,60:60,66:66,7:7,71:71,72:72,75:75,76:76,77:77,78:78,81:81,82:82,92:92,94:94}],255:[function(t,n,r){"use strict";var e=t(33),i=t(123),o=t(122),u=t(7),c=t(114),f=t(118),a=t(51),s=t(40).ArrayBuffer,l=t(104),h=o.ArrayBuffer,v=o.DataView,p=i.ABV&&s.isView,y=h.prototype.slice,g=i.VIEW;e(e.G+e.W+e.F*(s!==h),{ArrayBuffer:h}),e(e.S+e.F*!i.CONSTR,"ArrayBuffer",{isView:function(t){return p&&p(t)||a(t)&&g in t}}),e(e.P+e.U+e.F*t(35)(function(){return!new h(2).slice(1,void 0).byteLength}),"ArrayBuffer",{slice:function(t,n){if(void 0!==y&&void 0===n)return y.call(u(this),t);for(var r=u(this).byteLength,e=c(t,r),i=c(void 0===n?r:n,r),o=new(l(this,h))(f(i-e)),a=new v(this),s=new v(o),p=0;e<i;)s.setUint8(p++,a.getUint8(e++));return o}}),t(100)("ArrayBuffer")},{100:100,104:104,114:114,118:118,122:122,123:123,33:33,35:35,40:40,51:51,7:7}],256:[function(t,n,r){var e=t(33);e(e.G+e.W+e.F*!t(123).ABV,{DataView:t(122).DataView})},{122:122,123:123,33:33}],257:[function(t,n,r){t(121)("Float32",4,function(t){return function(n,r,e){return t(this,n,r,e)}})},{121:121}],258:[function(t,n,r){t(121)("Float64",8,function(t){return function(n,r,e){return t(this,n,r,e)}})},{121:121}],259:[function(t,n,r){t(121)("Int16",2,function(t){return function(n,r,e){return t(this,n,r,e)}})},{121:121}],260:[function(t,n,r){t(121)("Int32",4,function(t){return function(n,r,e){return t(this,n,r,e)}})},{121:121}],261:[function(t,n,r){t(121)("Int8",1,function(t){return function(n,r,e){return t(this,n,r,e)}})},{121:121}],262:[function(t,n,r){t(121)("Uint16",2,function(t){return function(n,r,e){return t(this,n,r,e)}})},{121:121}],263:[function(t,n,r){t(121)("Uint32",4,function(t){return function(n,r,e){return t(this,n,r,e)}})},{121:121}],264:[function(t,n,r){t(121)("Uint8",1,function(t){return function(n,r,e){return t(this,n,r,e)}})},{121:121}],265:[function(t,n,r){t(121)("Uint8",1,function(t){return function(n,r,e){return t(this,n,r,e)}},!0)},{121:121}],266:[function(t,n,r){"use strict";var e,i=t(12)(0),o=t(94),u=t(66),c=t(70),f=t(21),a=t(51),s=t(35),l=t(125),h=u.getWeak,v=Object.isExtensible,p=f.ufstore,y={},g=function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},d={get:function(t){if(a(t)){var n=h(t);return!0===n?p(l(this,"WeakMap")).get(t):n?n[this._i]:void 0}},set:function(t,n){return f.def(l(this,"WeakMap"),t,n)}},m=n.exports=t(22)("WeakMap",g,d,f,!0,!0);s(function(){return 7!=(new m).set((Object.freeze||Object)(y),7).get(y)})&&(c((e=f.getConstructor(g,"WeakMap")).prototype,d),u.NEED=!0,i(["delete","has","get","set"],function(t){var n=m.prototype,r=n[t];o(n,t,function(n,i){if(a(n)&&!v(n)){this._f||(this._f=new e);var o=this._f[t](n,i);return"set"==t?this:o}return r.call(this,n,i)})}))},{12:12,125:125,21:21,22:22,35:35,51:51,66:66,70:70,94:94}],267:[function(t,n,r){"use strict";var e=t(21),i=t(125);t(22)("WeakSet",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return e.def(i(this,"WeakSet"),t,!0)}},e,!1,!0)},{125:125,21:21,22:22}],268:[function(t,n,r){"use strict";var e=t(33),i=t(38),o=t(119),u=t(118),c=t(3),f=t(15);e(e.P,"Array",{flatMap:function(t){var n,r,e=o(this);return c(t),n=u(e.length),r=f(e,0),i(r,e,e,n,0,1,t,arguments[1]),r}}),t(5)("flatMap")},{118:118,119:119,15:15,3:3,33:33,38:38,5:5}],269:[function(t,n,r){"use strict";var e=t(33),i=t(38),o=t(119),u=t(118),c=t(116),f=t(15);e(e.P,"Array",{flatten:function(){var t=arguments[0],n=o(this),r=u(n.length),e=f(n,0);return i(e,n,n,r,0,void 0===t?1:c(t)),e}}),t(5)("flatten")},{116:116,118:118,119:119,15:15,33:33,38:38,5:5}],270:[function(t,n,r){"use strict";var e=t(33),i=t(11)(!0);e(e.P,"Array",{includes:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),t(5)("includes")},{11:11,33:33,5:5}],271:[function(t,n,r){var e=t(33),i=t(68)(),o=t(40).process,u="process"==t(18)(o);e(e.G,{asap:function(t){var n=u&&o.domain;i(n?n.bind(t):t)}})},{18:18,33:33,40:40,68:68}],272:[function(t,n,r){var e=t(33),i=t(18);e(e.S,"Error",{isError:function(t){return"Error"===i(t)}})},{18:18,33:33}],273:[function(t,n,r){var e=t(33);e(e.G,{global:t(40)})},{33:33,40:40}],274:[function(t,n,r){t(97)("Map")},{97:97}],275:[function(t,n,r){t(98)("Map")},{98:98}],276:[function(t,n,r){var e=t(33);e(e.P+e.R,"Map",{toJSON:t(20)("Map")})},{20:20,33:33}],277:[function(t,n,r){var e=t(33);e(e.S,"Math",{clamp:function(t,n,r){return Math.min(r,Math.max(n,t))}})},{33:33}],278:[function(t,n,r){var e=t(33);e(e.S,"Math",{DEG_PER_RAD:Math.PI/180})},{33:33}],279:[function(t,n,r){var e=t(33),i=180/Math.PI;e(e.S,"Math",{degrees:function(t){return t*i}})},{33:33}],280:[function(t,n,r){var e=t(33),i=t(64),o=t(62);e(e.S,"Math",{fscale:function(t,n,r,e,u){return o(i(t,n,r,e,u))}})},{33:33,62:62,64:64}],281:[function(t,n,r){var e=t(33);e(e.S,"Math",{iaddh:function(t,n,r,e){var i=t>>>0,o=r>>>0;return(n>>>0)+(e>>>0)+((i&o|(i|o)&~(i+o>>>0))>>>31)|0}})},{33:33}],282:[function(t,n,r){var e=t(33);e(e.S,"Math",{imulh:function(t,n){var r=+t,e=+n,i=65535&r,o=65535&e,u=r>>16,c=e>>16,f=(u*o>>>0)+(i*o>>>16);return u*c+(f>>16)+((i*c>>>0)+(65535&f)>>16)}})},{33:33}],283:[function(t,n,r){var e=t(33);e(e.S,"Math",{isubh:function(t,n,r,e){var i=t>>>0,o=r>>>0;return(n>>>0)-(e>>>0)-((~i&o|~(i^o)&i-o>>>0)>>>31)|0}})},{33:33}],284:[function(t,n,r){var e=t(33);e(e.S,"Math",{RAD_PER_DEG:180/Math.PI})},{33:33}],285:[function(t,n,r){var e=t(33),i=Math.PI/180;e(e.S,"Math",{radians:function(t){return t*i}})},{33:33}],286:[function(t,n,r){var e=t(33);e(e.S,"Math",{scale:t(64)})},{33:33,64:64}],287:[function(t,n,r){var e=t(33);e(e.S,"Math",{signbit:function(t){return(t=+t)!=t?t:0==t?1/t==1/0:t>0}})},{33:33}],288:[function(t,n,r){var e=t(33);e(e.S,"Math",{umulh:function(t,n){var r=+t,e=+n,i=65535&r,o=65535&e,u=r>>>16,c=e>>>16,f=(u*o>>>0)+(i*o>>>16);return u*c+(f>>>16)+((i*c>>>0)+(65535&f)>>>16)}})},{33:33}],289:[function(t,n,r){"use strict";var e=t(33),i=t(119),o=t(3),u=t(72);t(29)&&e(e.P+t(74),"Object",{__defineGetter__:function(t,n){u.f(i(this),t,{get:o(n),enumerable:!0,configurable:!0})}})},{119:119,29:29,3:3,33:33,72:72,74:74}],290:[function(t,n,r){"use strict";var e=t(33),i=t(119),o=t(3),u=t(72);t(29)&&e(e.P+t(74),"Object",{__defineSetter__:function(t,n){u.f(i(this),t,{set:o(n),enumerable:!0,configurable:!0})}})},{119:119,29:29,3:3,33:33,72:72,74:74}],291:[function(t,n,r){var e=t(33),i=t(84)(!0);e(e.S,"Object",{entries:function(t){return i(t)}})},{33:33,84:84}],292:[function(t,n,r){var e=t(33),i=t(85),o=t(117),u=t(75),c=t(24);e(e.S,"Object",{getOwnPropertyDescriptors:function(t){for(var n,r,e=o(t),f=u.f,a=i(e),s={},l=0;a.length>l;)void 0!==(r=f(e,n=a[l++]))&&c(s,n,r);return s}})},{117:117,24:24,33:33,75:75,85:85}],293:[function(t,n,r){"use strict";var e=t(33),i=t(119),o=t(120),u=t(79),c=t(75).f;t(29)&&e(e.P+t(74),"Object",{__lookupGetter__:function(t){var n,r=i(this),e=o(t,!0);do{if(n=c(r,e))return n.get}while(r=u(r))}})},{119:119,120:120,29:29,33:33,74:74,75:75,79:79}],294:[function(t,n,r){"use strict";var e=t(33),i=t(119),o=t(120),u=t(79),c=t(75).f;t(29)&&e(e.P+t(74),"Object",{__lookupSetter__:function(t){var n,r=i(this),e=o(t,!0);do{if(n=c(r,e))return n.set}while(r=u(r))}})},{119:119,120:120,29:29,33:33,74:74,75:75,79:79}],295:[function(t,n,r){var e=t(33),i=t(84)(!1);e(e.S,"Object",{values:function(t){return i(t)}})},{33:33,84:84}],296:[function(t,n,r){"use strict";var e=t(33),i=t(40),o=t(23),u=t(68)(),c=t(128)("observable"),f=t(3),a=t(7),s=t(6),l=t(93),h=t(42),v=t(39),p=v.RETURN,y=function(t){return null==t?void 0:f(t)},g=function(t){var n=t._c;n&&(t._c=void 0,n())},d=function(t){return void 0===t._o},m=function(t){d(t)||(t._o=void 0,g(t))},b=function(t,n){a(t),this._c=void 0,this._o=t,t=new S(this);try{var r=n(t),e=r;null!=r&&("function"==typeof r.unsubscribe?r=function(){e.unsubscribe()}:f(r),this._c=r)}catch(n){return void t.error(n)}d(this)&&g(this)};b.prototype=l({},{unsubscribe:function(){m(this)}});var S=function(t){this._s=t};S.prototype=l({},{next:function(t){var n=this._s;if(!d(n)){var r=n._o;try{var e=y(r.next);if(e)return e.call(r,t)}catch(t){try{m(n)}finally{throw t}}}},error:function(t){var n=this._s;if(d(n))throw t;var r=n._o;n._o=void 0;try{var e=y(r.error);if(!e)throw t;t=e.call(r,t)}catch(t){try{g(n)}finally{throw t}}return g(n),t},complete:function(t){var n=this._s;if(!d(n)){var r=n._o;n._o=void 0;try{var e=y(r.complete);t=e?e.call(r,t):void 0}catch(t){try{g(n)}finally{throw t}}return g(n),t}}});var w=function(t){s(this,w,"Observable","_f")._f=f(t)};l(w.prototype,{subscribe:function(t){return new b(t,this._f)},forEach:function(t){var n=this;return new(o.Promise||i.Promise)(function(r,e){f(t);var i=n.subscribe({next:function(n){try{return t(n)}catch(t){e(t),i.unsubscribe()}},error:e,complete:r})})}}),l(w,{from:function(t){var n="function"==typeof this?this:w,r=y(a(t)[c]);if(r){var e=a(r.call(t));return e.constructor===n?e:new n(function(t){return e.subscribe(t)})}return new n(function(n){var r=!1;return u(function(){if(!r){try{if(v(t,!1,function(t){if(n.next(t),r)return p})===p)return}catch(t){if(r)throw t;return void n.error(t)}n.complete()}}),function(){r=!0}})},of:function(){for(var t=0,n=arguments.length,r=Array(n);t<n;)r[t]=arguments[t++];return new("function"==typeof this?this:w)(function(t){var n=!1;return u(function(){if(!n){for(var e=0;e<r.length;++e)if(t.next(r[e]),n)return;t.complete()}}),function(){n=!0}})}}),h(w.prototype,c,function(){return this}),e(e.G,{Observable:w}),t(100)("Observable")},{100:100,128:128,23:23,3:3,33:33,39:39,40:40,42:42,6:6,68:68,7:7,93:93}],297:[function(t,n,r){"use strict";var e=t(33),i=t(23),o=t(40),u=t(104),c=t(91);e(e.P+e.R,"Promise",{finally:function(t){var n=u(this,i.Promise||o.Promise),r="function"==typeof t;return this.then(r?function(r){return c(n,t()).then(function(){return r})}:t,r?function(r){return c(n,t()).then(function(){throw r})}:t)}})},{104:104,23:23,33:33,40:40,91:91}],298:[function(t,n,r){"use strict";var e=t(33),i=t(69),o=t(90);e(e.S,"Promise",{try:function(t){var n=i.f(this),r=o(t);return(r.e?n.reject:n.resolve)(r.v),n.promise}})},{33:33,69:69,90:90}],299:[function(t,n,r){var e=t(67),i=t(7),o=e.key,u=e.set;e.exp({defineMetadata:function(t,n,r,e){u(t,n,i(r),o(e))}})},{67:67,7:7}],300:[function(t,n,r){var e=t(67),i=t(7),o=e.key,u=e.map,c=e.store;e.exp({deleteMetadata:function(t,n){var r=arguments.length<3?void 0:o(arguments[2]),e=u(i(n),r,!1);if(void 0===e||!e.delete(t))return!1;if(e.size)return!0;var f=c.get(n);return f.delete(r),!!f.size||c.delete(n)}})},{67:67,7:7}],301:[function(t,n,r){var e=t(231),i=t(10),o=t(67),u=t(7),c=t(79),f=o.keys,a=o.key,s=function(t,n){var r=f(t,n),o=c(t);if(null===o)return r;var u=s(o,n);return u.length?r.length?i(new e(r.concat(u))):u:r};o.exp({getMetadataKeys:function(t){return s(u(t),arguments.length<2?void 0:a(arguments[1]))}})},{10:10,231:231,67:67,7:7,79:79}],302:[function(t,n,r){var e=t(67),i=t(7),o=t(79),u=e.has,c=e.get,f=e.key,a=function(t,n,r){if(u(t,n,r))return c(t,n,r);var e=o(n);return null!==e?a(t,e,r):void 0};e.exp({getMetadata:function(t,n){return a(t,i(n),arguments.length<3?void 0:f(arguments[2]))}})},{67:67,7:7,79:79}],303:[function(t,n,r){var e=t(67),i=t(7),o=e.keys,u=e.key;e.exp({getOwnMetadataKeys:function(t){return o(i(t),arguments.length<2?void 0:u(arguments[1]))}})},{67:67,7:7}],304:[function(t,n,r){var e=t(67),i=t(7),o=e.get,u=e.key;e.exp({getOwnMetadata:function(t,n){return o(t,i(n),arguments.length<3?void 0:u(arguments[2]))}})},{67:67,7:7}],305:[function(t,n,r){var e=t(67),i=t(7),o=t(79),u=e.has,c=e.key,f=function(t,n,r){if(u(t,n,r))return!0;var e=o(n);return null!==e&&f(t,e,r)};e.exp({hasMetadata:function(t,n){return f(t,i(n),arguments.length<3?void 0:c(arguments[2]))}})},{67:67,7:7,79:79}],306:[function(t,n,r){var e=t(67),i=t(7),o=e.has,u=e.key;e.exp({hasOwnMetadata:function(t,n){return o(t,i(n),arguments.length<3?void 0:u(arguments[2]))}})},{67:67,7:7}],307:[function(t,n,r){var e=t(67),i=t(7),o=t(3),u=e.key,c=e.set;e.exp({metadata:function(t,n){return function(r,e){c(t,n,(void 0!==e?i:o)(r),u(e))}}})},{3:3,67:67,7:7}],308:[function(t,n,r){t(97)("Set")},{97:97}],309:[function(t,n,r){t(98)("Set")},{98:98}],310:[function(t,n,r){var e=t(33);e(e.P+e.R,"Set",{toJSON:t(20)("Set")})},{20:20,33:33}],311:[function(t,n,r){"use strict";var e=t(33),i=t(106)(!0);e(e.P,"String",{at:function(t){return i(this,t)}})},{106:106,33:33}],312:[function(t,n,r){"use strict";var e=t(33),i=t(28),o=t(118),u=t(52),c=t(37),f=RegExp.prototype,a=function(t,n){this._r=t,this._s=n};t(54)(a,"RegExp String",function(){var t=this._r.exec(this._s);return{value:t,done:null===t}}),e(e.P,"String",{matchAll:function(t){if(i(this),!u(t))throw TypeError(t+" is not a regexp!");var n=String(this),r="flags"in f?String(t.flags):c.call(t),e=new RegExp(t.source,~r.indexOf("g")?r:"g"+r);return e.lastIndex=o(t.lastIndex),new a(e,n)}})},{118:118,28:28,33:33,37:37,52:52,54:54}],313:[function(t,n,r){"use strict";var e=t(33),i=t(109);e(e.P,"String",{padEnd:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0,!1)}})},{109:109,33:33}],314:[function(t,n,r){"use strict";var e=t(33),i=t(109);e(e.P,"String",{padStart:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0,!0)}})},{109:109,33:33}],315:[function(t,n,r){"use strict";t(111)("trimLeft",function(t){return function(){return t(this,1)}},"trimStart")},{111:111}],316:[function(t,n,r){"use strict";t(111)("trimRight",function(t){return function(){return t(this,2)}},"trimEnd")},{111:111}],317:[function(t,n,r){t(126)("asyncIterator")},{126:126}],318:[function(t,n,r){t(126)("observable")},{126:126}],319:[function(t,n,r){var e=t(33);e(e.S,"System",{global:t(40)})},{33:33,40:40}],320:[function(t,n,r){t(97)("WeakMap")},{97:97}],321:[function(t,n,r){t(98)("WeakMap")},{98:98}],322:[function(t,n,r){t(97)("WeakSet")},{97:97}],323:[function(t,n,r){t(98)("WeakSet")},{98:98}],324:[function(t,n,r){for(var e=t(141),i=t(81),o=t(94),u=t(40),c=t(42),f=t(58),a=t(128),s=a("iterator"),l=a("toStringTag"),h=f.Array,v={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},p=i(v),y=0;y<p.length;y++){var g,d=p[y],m=v[d],b=u[d],S=b&&b.prototype;if(S&&(S[s]||c(S,s,h),S[l]||c(S,l,d),f[d]=h,m))for(g in e)S[g]||o(S,g,e[g],!0)}},{128:128,141:141,40:40,42:42,58:58,81:81,94:94}],325:[function(t,n,r){var e=t(33),i=t(113);e(e.G+e.B,{setImmediate:i.set,clearImmediate:i.clear})},{113:113,33:33}],326:[function(t,n,r){var e=t(40),i=t(33),o=t(46),u=t(88),c=e.navigator,f=!!c&&/MSIE .\./.test(c.userAgent),a=function(t){return f?function(n,r){return t(o(u,[].slice.call(arguments,2),"function"==typeof n?n:Function(n)),r)}:t};i(i.G+i.B+i.F*f,{setTimeout:a(e.setTimeout),setInterval:a(e.setInterval)})},{33:33,40:40,46:46,88:88}],327:[function(t,n,r){t(254),t(191),t(193),t(192),t(195),t(197),t(202),t(196),t(194),t(204),t(203),t(199),t(200),t(198),t(190),t(201),t(205),t(206),t(157),t(159),t(158),t(208),t(207),t(178),t(188),t(189),t(179),t(180),t(181),t(182),t(183),t(184),t(185),t(186),t(187),t(161),t(162),t(163),t(164),t(165),t(166),t(167),t(168),t(169),t(170),t(171),t(172),t(173),t(174),t(175),t(176),t(177),t(241),t(246),t(253),t(244),t(236),t(237),t(242),t(247),t(249),t(232),t(233),t(234),t(235),t(238),t(239),t(240),t(243),t(245),t(248),t(250),t(251),t(252),t(152),t(154),t(153),t(156),t(155),t(140),t(138),t(145),t(142),t(148),t(150),t(137),t(144),t(134),t(149),t(132),t(147),t(146),t(139),t(143),t(131),t(133),t(136),t(135),t(151),t(141),t(224),t(230),t(225),t(226),t(227),t(228),t(229),t(209),t(160),t(231),t(266),t(267),t(255),t(256),t(261),t(264),t(265),t(259),t(262),t(260),t(263),t(257),t(258),t(210),t(211),t(212),t(213),t(214),t(217),t(215),t(216),t(218),t(219),t(220),t(221),t(223),t(222),t(270),t(268),t(269),t(311),t(314),t(313),t(315),t(316),t(312),t(317),t(318),t(292),t(295),t(291),t(289),t(290),t(293),t(294),t(276),t(310),t(275),t(309),t(321),t(323),t(274),t(308),t(320),t(322),t(273),t(319),t(272),t(277),t(278),t(279),t(280),t(281),t(283),t(282),t(284),t(285),t(286),t(288),t(287),t(297),t(298),t(299),t(300),t(302),t(301),t(304),t(303),t(305),t(306),t(307),t(271),t(296),t(326),t(325),t(324),n.exports=t(23)},{131:131,132:132,133:133,134:134,135:135,136:136,137:137,138:138,139:139,140:140,141:141,142:142,143:143,144:144,145:145,146:146,147:147,148:148,149:149,150:150,151:151,152:152,153:153,154:154,155:155,156:156,157:157,158:158,159:159,160:160,161:161,162:162,163:163,164:164,165:165,166:166,167:167,168:168,169:169,170:170,171:171,172:172,173:173,174:174,175:175,176:176,177:177,178:178,179:179,180:180,181:181,182:182,183:183,184:184,185:185,186:186,187:187,188:188,189:189,190:190,191:191,192:192,193:193,194:194,195:195,196:196,197:197,198:198,199:199,200:200,201:201,202:202,203:203,204:204,205:205,206:206,207:207,208:208,209:209,210:210,211:211,212:212,213:213,214:214,215:215,216:216,217:217,218:218,219:219,220:220,221:221,222:222,223:223,224:224,225:225,226:226,227:227,228:228,229:229,23:23,230:230,231:231,232:232,233:233,234:234,235:235,236:236,237:237,238:238,239:239,240:240,241:241,242:242,243:243,244:244,245:245,246:246,247:247,248:248,249:249,250:250,251:251,252:252,253:253,254:254,255:255,256:256,257:257,258:258,259:259,260:260,261:261,262:262,263:263,264:264,265:265,266:266,267:267,268:268,269:269,270:270,271:271,272:272,273:273,274:274,275:275,276:276,277:277,278:278,279:279,280:280,281:281,282:282,283:283,284:284,285:285,286:286,287:287,288:288,289:289,290:290,291:291,292:292,293:293,294:294,295:295,296:296,297:297,298:298,299:299,300:300,301:301,302:302,303:303,304:304,305:305,306:306,307:307,308:308,309:309,310:310,311:311,312:312,313:313,314:314,315:315,316:316,317:317,318:318,319:319,320:320,321:321,322:322,323:323,324:324,325:325,326:326}],328:[function(t,n,r){(function(t){!function(t){"use strict";var r,e=Object.prototype,i=e.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},u=o.iterator||"@@iterator",c=o.asyncIterator||"@@asyncIterator",f=o.toStringTag||"@@toStringTag",a="object"==typeof n,s=t.regeneratorRuntime;if(s)a&&(n.exports=s);else{(s=t.regeneratorRuntime=a?n.exports:{}).wrap=S;var l="suspendedStart",h="suspendedYield",v="executing",p="completed",y={},g={};g[u]=function(){return this};var d=Object.getPrototypeOf,m=d&&d(d(N([])));m&&m!==e&&i.call(m,u)&&(g=m);var b=E.prototype=x.prototype=Object.create(g);_.prototype=b.constructor=E,E.constructor=_,E[f]=_.displayName="GeneratorFunction",s.isGeneratorFunction=function(t){var n="function"==typeof t&&t.constructor;return!!n&&(n===_||"GeneratorFunction"===(n.displayName||n.name))},s.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,E):(t.__proto__=E,f in t||(t[f]="GeneratorFunction")),t.prototype=Object.create(b),t},s.awrap=function(t){return{__await:t}},O(M.prototype),M.prototype[c]=function(){return this},s.AsyncIterator=M,s.async=function(t,n,r,e){var i=new M(S(t,n,r,e));return s.isGeneratorFunction(n)?i:i.next().then(function(t){return t.done?t.value:i.next()})},O(b),b[f]="Generator",b[u]=function(){return this},b.toString=function(){return"[object Generator]"},s.keys=function(t){var n=[];for(var r in t)n.push(r);return n.reverse(),function r(){for(;n.length;){var e=n.pop();if(e in t)return r.value=e,r.done=!1,r}return r.done=!0,r}},s.values=N,j.prototype={constructor:j,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=r,this.done=!1,this.delegate=null,this.method="next",this.arg=r,this.tryEntries.forEach(A),!t)for(var n in this)"t"===n.charAt(0)&&i.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=r)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function e(e,i){return c.type="throw",c.arg=t,n.next=e,i&&(n.method="next",n.arg=r),!!i}for(var o=this.tryEntries.length-1;o>=0;--o){var u=this.tryEntries[o],c=u.completion;if("root"===u.tryLoc)return e("end");if(u.tryLoc<=this.prev){var f=i.call(u,"catchLoc"),a=i.call(u,"finallyLoc");if(f&&a){if(this.prev<u.catchLoc)return e(u.catchLoc,!0);if(this.prev<u.finallyLoc)return e(u.finallyLoc)}else if(f){if(this.prev<u.catchLoc)return e(u.catchLoc,!0)}else{if(!a)throw new Error("try statement without catch or finally");if(this.prev<u.finallyLoc)return e(u.finallyLoc)}}}},abrupt:function(t,n){for(var r=this.tryEntries.length-1;r>=0;--r){var e=this.tryEntries[r];if(e.tryLoc<=this.prev&&i.call(e,"finallyLoc")&&this.prev<e.finallyLoc){var o=e;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=n&&n<=o.finallyLoc&&(o=null);var u=o?o.completion:{};return u.type=t,u.arg=n,o?(this.method="next",this.next=o.finallyLoc,y):this.complete(u)},complete:function(t,n){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&n&&(this.next=n),y},finish:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),A(r),y}},catch:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc===t){var e=r.completion;if("throw"===e.type){var i=e.arg;A(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,e){return this.delegate={iterator:N(t),resultName:n,nextLoc:e},"next"===this.method&&(this.arg=r),y}}}function S(t,n,r,e){var i=n&&n.prototype instanceof x?n:x,o=Object.create(i.prototype),u=new j(e||[]);return o._invoke=function(t,n,r){var e=l;return function(i,o){if(e===v)throw new Error("Generator is already running");if(e===p){if("throw"===i)throw o;return I()}for(r.method=i,r.arg=o;;){var u=r.delegate;if(u){var c=P(u,r);if(c){if(c===y)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(e===l)throw e=p,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);e=v;var f=w(t,n,r);if("normal"===f.type){if(e=r.done?p:h,f.arg===y)continue;return{value:f.arg,done:r.done}}"throw"===f.type&&(e=p,r.method="throw",r.arg=f.arg)}}}(t,r,u),o}function w(t,n,r){try{return{type:"normal",arg:t.call(n,r)}}catch(t){return{type:"throw",arg:t}}}function x(){}function _(){}function E(){}function O(t){["next","throw","return"].forEach(function(n){t[n]=function(t){return this._invoke(n,t)}})}function M(n){function r(t,e,o,u){var c=w(n[t],n,e);if("throw"!==c.type){var f=c.arg,a=f.value;return a&&"object"==typeof a&&i.call(a,"__await")?Promise.resolve(a.__await).then(function(t){r("next",t,o,u)},function(t){r("throw",t,o,u)}):Promise.resolve(a).then(function(t){f.value=t,o(f)},u)}u(c.arg)}var e;"object"==typeof t.process&&t.process.domain&&(r=t.process.domain.bind(r)),this._invoke=function(t,n){function i(){return new Promise(function(e,i){r(t,n,e,i)})}return e=e?e.then(i,i):i()}}function P(t,n){var e=t.iterator[n.method];if(e===r){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=r,P(t,n),"throw"===n.method))return y;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return y}var i=w(e,t.iterator,n.arg);if("throw"===i.type)return n.method="throw",n.arg=i.arg,n.delegate=null,y;var o=i.arg;return o?o.done?(n[t.resultName]=o.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=r),n.delegate=null,y):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function F(t){var n={tryLoc:t[0]};1 in t&&(n.catchLoc=t[1]),2 in t&&(n.finallyLoc=t[2],n.afterLoc=t[3]),this.tryEntries.push(n)}function A(t){var n=t.completion||{};n.type="normal",delete n.arg,t.completion=n}function j(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(F,this),this.reset(!0)}function N(t){if(t){var n=t[u];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var e=-1,o=function n(){for(;++e<t.length;)if(i.call(t,e))return n.value=t[e],n.done=!1,n;return n.value=r,n.done=!0,n};return o.next=o}}return{next:I}}function I(){return{value:r,done:!0}}}("object"==typeof t?t:"object"==typeof window?window:"object"==typeof self?self:this)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[1]);
var Scrambler=function(t){try{console.log(n);let n=!1;console.log(n);const o=function(){return Math.random().toString(36).replace(/[^a-z]+/g,"").substr(0,1)};let r=!!(e=t)&&e.constructor===Object||"object"==typeof t;r&&(t.target=void 0!==t.target&&r?t.target:"[data-scrambler]",t.random=void 0!==t.random&&r?t.random:[1e3,3e3]);const c=function(){return r?t.random[0]+(Math.random()*(1-t.random[1])+t.random[1]):-2999*Math.random()+3e3+1e3};1!=n&&function(t){console.warn(t);var e=r?[...document.querySelectorAll(t.target)]:[...document.querySelectorAll(t)];console.error(e),e.forEach(function(t,e){let n=t.textContent.split(""),r=t.textContent.split(""),a=[];const l=setInterval(function(){n.map((e,l)=>{" \t\n\r\v".indexOf(e)>-1||(r[l]=o(),setTimeout(function(){a[l]=!0},c()),!0===a[l]&&(r[l]=n[l]),t.textContent=r.join(""))});let e=r.length==n.length&&r.every(function(t,e){return t===n[e]});e&&clearInterval(l)},100)})}(t)}catch(t){console.trace("%cuh-oh: %c"+t,"color:indianred;","color:cornflowerblue;")}var e};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBvbHlmaWxsLmpzIiwic2NyYW1ibGUuanMiXSwibmFtZXMiOlsiZSIsInQiLCJuIiwiciIsInMiLCJvIiwidSIsImEiLCJyZXF1aXJlIiwiaSIsImYiLCJFcnJvciIsImNvZGUiLCJsIiwiZXhwb3J0cyIsImNhbGwiLCJsZW5ndGgiLCIxIiwiX2RlcmVxXyIsIm1vZHVsZSIsImdsb2JhbCIsIl9iYWJlbFBvbHlmaWxsIiwiREVGSU5FX1BST1BFUlRZIiwiZGVmaW5lIiwiTyIsImtleSIsInZhbHVlIiwiT2JqZWN0Iiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJTdHJpbmciLCJwcm90b3R5cGUiLCJwYWRTdGFydCIsInBhZEVuZCIsInNwbGl0IiwiZm9yRWFjaCIsIkFycmF5IiwiRnVuY3Rpb24iLCJiaW5kIiwidGhpcyIsInNlbGYiLCJ3aW5kb3ciLCIyIiwiMzI3IiwiMzI4IiwiUmVnRXhwIiwiZXNjYXBlIiwiMTMwIiwiMjMiLCIzIiwiaXQiLCJUeXBlRXJyb3IiLCI0IiwiY29mIiwibXNnIiwiMTgiLCI1IiwiVU5TQ09QQUJMRVMiLCJBcnJheVByb3RvIiwidW5kZWZpbmVkIiwiMTI4IiwiNDIiLCI2IiwiQ29uc3RydWN0b3IiLCJuYW1lIiwiZm9yYmlkZGVuRmllbGQiLCI3IiwiaXNPYmplY3QiLCI1MSIsIjgiLCJ0b09iamVjdCIsInRvQWJzb2x1dGVJbmRleCIsInRvTGVuZ3RoIiwiY29weVdpdGhpbiIsInRhcmdldCIsInN0YXJ0IiwibGVuIiwidG8iLCJmcm9tIiwiZW5kIiwiYXJndW1lbnRzIiwiY291bnQiLCJNYXRoIiwibWluIiwiaW5jIiwiMTE0IiwiMTE4IiwiMTE5IiwiOSIsImFMZW4iLCJpbmRleCIsImVuZFBvcyIsIjEwIiwiZm9yT2YiLCJpdGVyIiwiSVRFUkFUT1IiLCJyZXN1bHQiLCJwdXNoIiwiMzkiLCIxMSIsInRvSU9iamVjdCIsIklTX0lOQ0xVREVTIiwiJHRoaXMiLCJlbCIsImZyb21JbmRleCIsIjExNyIsIjEyIiwiY3R4IiwiSU9iamVjdCIsImFzYyIsIlRZUEUiLCIkY3JlYXRlIiwiSVNfTUFQIiwiSVNfRklMVEVSIiwiSVNfU09NRSIsIklTX0VWRVJZIiwiSVNfRklORF9JTkRFWCIsIk5PX0hPTEVTIiwiY3JlYXRlIiwiY2FsbGJhY2tmbiIsInRoYXQiLCJ2YWwiLCJyZXMiLCIxNSIsIjI1IiwiNDciLCIxMyIsImFGdW5jdGlvbiIsIm1lbW8iLCJpc1JpZ2h0IiwiMTQiLCJpc0FycmF5IiwiU1BFQ0lFUyIsIm9yaWdpbmFsIiwiQyIsImNvbnN0cnVjdG9yIiwiNDkiLCJzcGVjaWVzQ29uc3RydWN0b3IiLCIxNiIsImludm9rZSIsImFycmF5U2xpY2UiLCJzbGljZSIsImZhY3RvcmllcyIsImZuIiwicGFydEFyZ3MiLCJib3VuZCIsImFyZ3MiLCJjb25jYXQiLCJGIiwiam9pbiIsImNvbnN0cnVjdCIsIjQ2IiwiMTciLCJUQUciLCJBUkciLCJUIiwiQiIsInRyeUdldCIsImNhbGxlZSIsInRvU3RyaW5nIiwiMTkiLCJkUCIsInJlZGVmaW5lQWxsIiwiYW5JbnN0YW5jZSIsIiRpdGVyRGVmaW5lIiwic3RlcCIsInNldFNwZWNpZXMiLCJERVNDUklQVE9SUyIsImZhc3RLZXkiLCJ2YWxpZGF0ZSIsIlNJWkUiLCJnZXRFbnRyeSIsImVudHJ5IiwiX2kiLCJfZiIsImsiLCJnZXRDb25zdHJ1Y3RvciIsIndyYXBwZXIiLCJOQU1FIiwiQURERVIiLCJpdGVyYWJsZSIsIl90IiwiX2wiLCJjbGVhciIsImRhdGEiLCJwIiwiZGVsZXRlIiwibmV4dCIsInByZXYiLCJ2IiwiaGFzIiwiZ2V0IiwiZGVmIiwic2V0U3Ryb25nIiwiaXRlcmF0ZWQiLCJraW5kIiwiX2siLCIxMDAiLCIxMjUiLCIyOSIsIjU1IiwiNTciLCI2NiIsIjcxIiwiNzIiLCI5MyIsIjIwIiwiY2xhc3NvZiIsIjIxIiwiZ2V0V2VhayIsImFuT2JqZWN0IiwiY3JlYXRlQXJyYXlNZXRob2QiLCIkaGFzIiwiYXJyYXlGaW5kIiwiYXJyYXlGaW5kSW5kZXgiLCJpZCIsInVuY2F1Z2h0RnJvemVuU3RvcmUiLCJVbmNhdWdodEZyb3plblN0b3JlIiwiZmluZFVuY2F1Z2h0RnJvemVuIiwic3RvcmUiLCJzZXQiLCJzcGxpY2UiLCJ1ZnN0b3JlIiwiNDEiLCIyMiIsIiRleHBvcnQiLCJyZWRlZmluZSIsIm1ldGEiLCJmYWlscyIsIiRpdGVyRGV0ZWN0Iiwic2V0VG9TdHJpbmdUYWciLCJpbmhlcml0SWZSZXF1aXJlZCIsIm1ldGhvZHMiLCJjb21tb24iLCJJU19XRUFLIiwiQmFzZSIsInByb3RvIiwiZml4TWV0aG9kIiwiS0VZIiwiYiIsImVudHJpZXMiLCJpbnN0YW5jZSIsIkhBU05UX0NIQUlOSU5HIiwiVEhST1dTX09OX1BSSU1JVElWRVMiLCJBQ0NFUFRfSVRFUkFCTEVTIiwiQlVHR1lfWkVSTyIsIiRpbnN0YW5jZSIsIk5FRUQiLCJHIiwiVyIsIjEwMSIsIjMzIiwiMzUiLCI0MCIsIjQ1IiwiNTYiLCI5NCIsImNvcmUiLCJ2ZXJzaW9uIiwiX19lIiwiMjQiLCIkZGVmaW5lUHJvcGVydHkiLCJjcmVhdGVEZXNjIiwib2JqZWN0IiwiOTIiLCJjIiwiYXBwbHkiLCIyNiIsImdldFRpbWUiLCJEYXRlIiwiJHRvSVNPU3RyaW5nIiwidG9JU09TdHJpbmciLCJseiIsIm51bSIsIk5hTiIsImlzRmluaXRlIiwiUmFuZ2VFcnJvciIsImQiLCJ5IiwiZ2V0VVRDRnVsbFllYXIiLCJtIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwiYWJzIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENEYXRlIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDU2Vjb25kcyIsIjI3IiwidG9QcmltaXRpdmUiLCJoaW50IiwiMTIwIiwiMjgiLCJkZWZpbmVQcm9wZXJ0eSIsIjMwIiwiZG9jdW1lbnQiLCJpcyIsImNyZWF0ZUVsZW1lbnQiLCIzMSIsIjMyIiwiZ2V0S2V5cyIsImdPUFMiLCJwSUUiLCJnZXRTeW1ib2xzIiwic3ltYm9scyIsImlzRW51bSIsIjc4IiwiODEiLCI4MiIsImhpZGUiLCJ0eXBlIiwic291cmNlIiwib3duIiwib3V0IiwiZXhwIiwiSVNfRk9SQ0VEIiwiSVNfR0xPQkFMIiwiSVNfU1RBVElDIiwiUyIsIklTX1BST1RPIiwiUCIsIklTX0JJTkQiLCJleHBQcm90byIsIlUiLCJSIiwiMzQiLCJNQVRDSCIsInJlIiwiZXhlYyIsIjM2IiwiZGVmaW5lZCIsIndrcyIsIlNZTUJPTCIsImZucyIsInN0cmZuIiwicnhmbiIsInN0cmluZyIsImFyZyIsIjM3IiwiaWdub3JlQ2FzZSIsIm11bHRpbGluZSIsInVuaWNvZGUiLCJzdGlja3kiLCIzOCIsIklTX0NPTkNBVF9TUFJFQURBQkxFIiwiZmxhdHRlbkludG9BcnJheSIsInNvdXJjZUxlbiIsImRlcHRoIiwibWFwcGVyIiwidGhpc0FyZyIsImVsZW1lbnQiLCJzcHJlYWRhYmxlIiwidGFyZ2V0SW5kZXgiLCJzb3VyY2VJbmRleCIsIm1hcEZuIiwiaXNBcnJheUl0ZXIiLCJnZXRJdGVyRm4iLCJCUkVBSyIsIlJFVFVSTiIsIml0ZXJhdG9yIiwiaXRlckZuIiwiZG9uZSIsIjEyOSIsIjQ4IiwiNTMiLCJfX2ciLCJoYXNPd25Qcm9wZXJ0eSIsIjQzIiwiZG9jdW1lbnRFbGVtZW50IiwiNDQiLCJzZXRQcm90b3R5cGVPZiIsIjk5IiwidW4iLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkl0ZXJhdG9ycyIsIjU4IiwiNTAiLCJmbG9vciIsIjUyIiwiaXNSZWdFeHAiLCJyZXQiLCI1NCIsImRlc2NyaXB0b3IiLCJJdGVyYXRvclByb3RvdHlwZSIsIkxJQlJBUlkiLCIkaXRlckNyZWF0ZSIsImdldFByb3RvdHlwZU9mIiwiQlVHR1kiLCJrZXlzIiwicmV0dXJuVGhpcyIsIkRFRkFVTFQiLCJJU19TRVQiLCJGT1JDRUQiLCJnZXRNZXRob2QiLCJERUZfVkFMVUVTIiwiVkFMVUVTX0JVRyIsIiRuYXRpdmUiLCIkZGVmYXVsdCIsIiRlbnRyaWVzIiwiJGFueU5hdGl2ZSIsInZhbHVlcyIsIjYwIiwiNzkiLCJTQUZFX0NMT1NJTkciLCJyaXRlciIsInNraXBDbG9zaW5nIiwic2FmZSIsImFyciIsIjU5IiwiNjEiLCIkZXhwbTEiLCJleHBtMSIsIngiLCI2MiIsInNpZ24iLCJwb3ciLCJFUFNJTE9OIiwiRVBTSUxPTjMyIiwiTUFYMzIiLCJNSU4zMiIsImZyb3VuZCIsIiRhYnMiLCIkc2lnbiIsIkluZmluaXR5IiwiNjUiLCI2MyIsImxvZzFwIiwibG9nIiwiNjQiLCJzY2FsZSIsImluTG93IiwiaW5IaWdoIiwib3V0TG93Iiwib3V0SGlnaCIsIk1FVEEiLCJzZXREZXNjIiwiaXNFeHRlbnNpYmxlIiwiRlJFRVpFIiwicHJldmVudEV4dGVuc2lvbnMiLCJzZXRNZXRhIiwidyIsIm9uRnJlZXplIiwiMTI0IiwiNjciLCJNYXAiLCJzaGFyZWQiLCJnZXRPckNyZWF0ZU1ldGFkYXRhTWFwIiwidGFyZ2V0S2V5IiwidGFyZ2V0TWV0YWRhdGEiLCJrZXlNZXRhZGF0YSIsIm1hcCIsIk1ldGFkYXRhS2V5IiwibWV0YWRhdGFNYXAiLCJNZXRhZGF0YVZhbHVlIiwiXyIsIjEwMyIsIjE2MCIsIjI2NiIsIjY4IiwibWFjcm90YXNrIiwiT2JzZXJ2ZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwiV2ViS2l0TXV0YXRpb25PYnNlcnZlciIsInByb2Nlc3MiLCJQcm9taXNlIiwiaXNOb2RlIiwiaGVhZCIsImxhc3QiLCJub3RpZnkiLCJmbHVzaCIsInBhcmVudCIsImRvbWFpbiIsImV4aXQiLCJlbnRlciIsIm5leHRUaWNrIiwidG9nZ2xlIiwibm9kZSIsImNyZWF0ZVRleHROb2RlIiwib2JzZXJ2ZSIsImNoYXJhY3RlckRhdGEiLCJyZXNvbHZlIiwicHJvbWlzZSIsInRoZW4iLCJ0YXNrIiwiMTEzIiwiNjkiLCJyZWplY3QiLCIkJHJlc29sdmUiLCIkJHJlamVjdCIsIjcwIiwiJGFzc2lnbiIsImFzc2lnbiIsIkEiLCJTeW1ib2wiLCJLIiwiaiIsImRQcyIsImVudW1CdWdLZXlzIiwiSUVfUFJPVE8iLCJFbXB0eSIsImNyZWF0ZURpY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsInN0eWxlIiwiZGlzcGxheSIsImFwcGVuZENoaWxkIiwic3JjIiwiY29udGVudFdpbmRvdyIsIm9wZW4iLCJ3cml0ZSIsImx0IiwiY2xvc2UiLCJQcm9wZXJ0aWVzIiwiMTAyIiwiNzMiLCJJRThfRE9NX0RFRklORSIsIkF0dHJpYnV0ZXMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiNzQiLCJyYW5kb20iLCJfX2RlZmluZVNldHRlcl9fIiwiNzUiLCJnT1BEIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiNzYiLCJnT1BOIiwid2luZG93TmFtZXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ2V0V2luZG93TmFtZXMiLCI3NyIsIiRrZXlzIiwiaGlkZGVuS2V5cyIsIjgwIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiT2JqZWN0UHJvdG8iLCJhcnJheUluZGV4T2YiLCJuYW1lcyIsIjgzIiwiODQiLCJpc0VudHJpZXMiLCI4NSIsIlJlZmxlY3QiLCJvd25LZXlzIiwiODYiLCIkcGFyc2VGbG9hdCIsInBhcnNlRmxvYXQiLCIkdHJpbSIsInRyaW0iLCJzdHIiLCJjaGFyQXQiLCIxMTEiLCIxMTIiLCI4NyIsIiRwYXJzZUludCIsInBhcnNlSW50Iiwid3MiLCJoZXgiLCJyYWRpeCIsInRlc3QiLCI4OCIsInBhdGgiLCJwYXJncyIsImhvbGRlciIsIjg5IiwiOTAiLCI5MSIsIm5ld1Byb21pc2VDYXBhYmlsaXR5IiwicHJvbWlzZUNhcGFiaWxpdHkiLCJiaXRtYXAiLCJlbnVtZXJhYmxlIiwiU1JDIiwiJHRvU3RyaW5nIiwiVFBMIiwiaW5zcGVjdFNvdXJjZSIsImlzRnVuY3Rpb24iLCI5NSIsInJlZ0V4cCIsInJlcGxhY2UiLCJyZXBsYWNlciIsInBhcnQiLCI5NiIsIjk3IiwiQ09MTEVDVElPTiIsIm1hcHBpbmciLCJjYiIsIm5leHRJdGVtIiwiOTgiLCJvZiIsImNoZWNrIiwiYnVnZ3kiLCJfX3Byb3RvX18iLCJ0YWciLCJzdGF0IiwidWlkIiwiMTA0IiwiRCIsIjEwNSIsIm1ldGhvZCIsIjEwNiIsInRvSW50ZWdlciIsIlRPX1NUUklORyIsInBvcyIsImNoYXJDb2RlQXQiLCIxMTYiLCIxMDciLCJzZWFyY2hTdHJpbmciLCIxMDgiLCJxdW90IiwiY3JlYXRlSFRNTCIsImF0dHJpYnV0ZSIsInAxIiwidG9Mb3dlckNhc2UiLCIxMDkiLCJyZXBlYXQiLCJtYXhMZW5ndGgiLCJmaWxsU3RyaW5nIiwibGVmdCIsInN0cmluZ0xlbmd0aCIsImZpbGxTdHIiLCJpbnRNYXhMZW5ndGgiLCJmaWxsTGVuIiwic3RyaW5nRmlsbGVyIiwiY2VpbCIsIjExMCIsInNwYWNlcyIsInNwYWNlIiwibHRyaW0iLCJydHJpbSIsImV4cG9ydGVyIiwiQUxJQVMiLCJGT1JDRSIsImRlZmVyIiwiY2hhbm5lbCIsInBvcnQiLCJodG1sIiwiY2VsIiwic2V0VGFzayIsInNldEltbWVkaWF0ZSIsImNsZWFyVGFzayIsImNsZWFySW1tZWRpYXRlIiwiTWVzc2FnZUNoYW5uZWwiLCJEaXNwYXRjaCIsImNvdW50ZXIiLCJxdWV1ZSIsInJ1biIsImxpc3RlbmVyIiwiZXZlbnQiLCJub3ciLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwicG9zdE1lc3NhZ2UiLCJhZGRFdmVudExpc3RlbmVyIiwiaW1wb3J0U2NyaXB0cyIsInJlbW92ZUNoaWxkIiwic2V0VGltZW91dCIsIm1heCIsIjExNSIsIm51bWJlciIsImlzTmFOIiwidmFsdWVPZiIsIjEyMSIsIiR0eXBlZCIsIiRidWZmZXIiLCJwcm9wZXJ0eURlc2MiLCJ0b0luZGV4IiwiY3JlYXRlQXJyYXlJbmNsdWRlcyIsIkFycmF5SXRlcmF0b3JzIiwiYXJyYXlGaWxsIiwiYXJyYXlDb3B5V2l0aGluIiwiJERQIiwiJEdPUEQiLCJVaW50OEFycmF5IiwiJEFycmF5QnVmZmVyIiwiQXJyYXlCdWZmZXIiLCIkRGF0YVZpZXciLCJEYXRhVmlldyIsImFycmF5Rm9yRWFjaCIsImFycmF5RmlsdGVyIiwiYXJyYXlTb21lIiwiYXJyYXlFdmVyeSIsImFycmF5SW5jbHVkZXMiLCJhcnJheVZhbHVlcyIsImFycmF5S2V5cyIsImFycmF5RW50cmllcyIsImFycmF5TGFzdEluZGV4T2YiLCJsYXN0SW5kZXhPZiIsImFycmF5UmVkdWNlIiwicmVkdWNlIiwiYXJyYXlSZWR1Y2VSaWdodCIsInJlZHVjZVJpZ2h0IiwiYXJyYXlKb2luIiwiYXJyYXlTb3J0Iiwic29ydCIsImFycmF5VG9TdHJpbmciLCJhcnJheVRvTG9jYWxlU3RyaW5nIiwidG9Mb2NhbGVTdHJpbmciLCJUWVBFRF9DT05TVFJVQ1RPUiIsIkRFRl9DT05TVFJVQ1RPUiIsIkFMTF9DT05TVFJVQ1RPUlMiLCJDT05TVFIiLCJUWVBFRF9BUlJBWSIsIlRZUEVEIiwiVklFVyIsIiRtYXAiLCJhbGxvY2F0ZSIsIkxJVFRMRV9FTkRJQU4iLCJVaW50MTZBcnJheSIsImJ1ZmZlciIsIkZPUkNFRF9TRVQiLCJ0b09mZnNldCIsIkJZVEVTIiwib2Zmc2V0Iiwic3BlY2llc0Zyb21MaXN0IiwibGlzdCIsImZyb21MaXN0IiwiYWRkR2V0dGVyIiwiaW50ZXJuYWwiLCJfZCIsIiRmcm9tIiwibWFwZm4iLCIkb2YiLCJUT19MT0NBTEVfQlVHIiwiJHRvTG9jYWxlU3RyaW5nIiwiZXZlcnkiLCJmaWxsIiwiZmlsdGVyIiwiZmluZCIsInByZWRpY2F0ZSIsImZpbmRJbmRleCIsImluZGV4T2YiLCJzZWFyY2hFbGVtZW50IiwiaW5jbHVkZXMiLCJzZXBhcmF0b3IiLCJyZXZlcnNlIiwibWlkZGxlIiwic29tZSIsImNvbXBhcmVmbiIsInN1YmFycmF5IiwiYmVnaW4iLCIkYmVnaW4iLCJieXRlT2Zmc2V0IiwiQllURVNfUEVSX0VMRU1FTlQiLCIkc2xpY2UiLCIkc2V0IiwiYXJyYXlMaWtlIiwiJGl0ZXJhdG9ycyIsImlzVEFJbmRleCIsIiRnZXREZXNjIiwiJHNldERlc2MiLCJkZXNjIiwiJFR5cGVkQXJyYXlQcm90b3R5cGUkIiwiQ0xBTVBFRCIsIkdFVFRFUiIsIlNFVFRFUiIsIlR5cGVkQXJyYXkiLCJUQUMiLCJBQlYiLCJUeXBlZEFycmF5UHJvdG90eXBlIiwiYWRkRWxlbWVudCIsImdldHRlciIsInJvdW5kIiwic2V0dGVyIiwiJG9mZnNldCIsIiRsZW5ndGgiLCJieXRlTGVuZ3RoIiwia2xhc3MiLCIkbGVuIiwiJG5hdGl2ZUl0ZXJhdG9yIiwiQ09SUkVDVF9JVEVSX05BTUUiLCIkaXRlcmF0b3IiLCIxMjIiLCIxMjMiLCIxNDEiLCJQUk9UT1RZUEUiLCJXUk9OR19JTkRFWCIsIkJhc2VCdWZmZXIiLCJMTjIiLCIkQlVGRkVSIiwiJExFTkdUSCIsIiRPRkZTRVQiLCJwYWNrSUVFRTc1NCIsIm1MZW4iLCJuQnl0ZXMiLCJlTGVuIiwiZU1heCIsImVCaWFzIiwicnQiLCJ1bnBhY2tJRUVFNzU0IiwibkJpdHMiLCJ1bnBhY2tJMzIiLCJieXRlcyIsInBhY2tJOCIsInBhY2tJMTYiLCJwYWNrSTMyIiwicGFja0Y2NCIsInBhY2tGMzIiLCJ2aWV3IiwiaXNMaXR0bGVFbmRpYW4iLCJpbnRJbmRleCIsIl9iIiwicGFjayIsImNvbnZlcnNpb24iLCJBcnJheUJ1ZmZlclByb3RvIiwiJHNldEludDgiLCJzZXRJbnQ4IiwiZ2V0SW50OCIsInNldFVpbnQ4IiwiYnVmZmVyTGVuZ3RoIiwiZ2V0VWludDgiLCJnZXRJbnQxNiIsImdldFVpbnQxNiIsImdldEludDMyIiwiZ2V0VWludDMyIiwiZ2V0RmxvYXQzMiIsImdldEZsb2F0NjQiLCJzZXRJbnQxNiIsInNldFVpbnQxNiIsInNldEludDMyIiwic2V0VWludDMyIiwic2V0RmxvYXQzMiIsInNldEZsb2F0NjQiLCJUeXBlZCIsIlR5cGVkQXJyYXlDb25zdHJ1Y3RvcnMiLCJweCIsIjEyNiIsIndrc0V4dCIsIiRTeW1ib2wiLCIxMjciLCJVU0VfU1lNQk9MIiwiZ2V0SXRlcmF0b3JNZXRob2QiLCIkcmUiLCIxMzEiLCIxMzIiLCIkZXZlcnkiLCIxMzMiLCIxMzQiLCIkZmlsdGVyIiwiMTM1IiwiJGZpbmQiLCJmb3JjZWQiLCIxMzYiLCIxMzciLCIkZm9yRWFjaCIsIlNUUklDVCIsIjEzOCIsImNyZWF0ZVByb3BlcnR5IiwiMTM5IiwiJGluZGV4T2YiLCJORUdBVElWRV9aRVJPIiwiMTQwIiwiYWRkVG9VbnNjb3BhYmxlcyIsIkFyZ3VtZW50cyIsIjE0MiIsIjE0MyIsIjE0NCIsIjE0NSIsIjE0NiIsIiRyZWR1Y2UiLCIxNDciLCIxNDgiLCJ1cFRvIiwic2l6ZSIsImNsb25lZCIsIjE0OSIsIiRzb21lIiwiMTUwIiwiJHNvcnQiLCIxNTEiLCIxNTIiLCIxNTMiLCIxNTQiLCJ0b0pTT04iLCJwdiIsIjE1NSIsIlRPX1BSSU1JVElWRSIsIjE1NiIsIkRhdGVQcm90byIsIjE1NyIsIjE1OCIsIkhBU19JTlNUQU5DRSIsIkZ1bmN0aW9uUHJvdG8iLCIxNTkiLCJGUHJvdG8iLCJuYW1lUkUiLCJtYXRjaCIsInN0cm9uZyIsIjE2MSIsInNxcnQiLCIkYWNvc2giLCJhY29zaCIsIk51bWJlciIsIk1BWF9WQUxVRSIsIjE2MiIsIiRhc2luaCIsImFzaW5oIiwiMTYzIiwiJGF0YW5oIiwiYXRhbmgiLCIxNjQiLCJjYnJ0IiwiMTY1IiwiY2x6MzIiLCJMT0cyRSIsIjE2NiIsImNvc2giLCIxNjciLCIxNjgiLCIxNjkiLCJoeXBvdCIsInZhbHVlMSIsInZhbHVlMiIsImRpdiIsInN1bSIsImxhcmciLCIxNzAiLCIkaW11bCIsImltdWwiLCJ4biIsInluIiwieGwiLCJ5bCIsIjE3MSIsImxvZzEwIiwiTE9HMTBFIiwiMTcyIiwiMTczIiwibG9nMiIsIjE3NCIsIjE3NSIsInNpbmgiLCJFIiwiMTc2IiwidGFuaCIsIjE3NyIsInRydW5jIiwiMTc4IiwiJE51bWJlciIsIkJST0tFTl9DT0YiLCJUUklNIiwidG9OdW1iZXIiLCJhcmd1bWVudCIsInRoaXJkIiwibWF4Q29kZSIsImZpcnN0IiwiZGlnaXRzIiwiMTc5IiwiMTgwIiwiX2lzRmluaXRlIiwiMTgxIiwiaXNJbnRlZ2VyIiwiMTgyIiwiMTgzIiwiaXNTYWZlSW50ZWdlciIsIjE4NCIsIk1BWF9TQUZFX0lOVEVHRVIiLCIxODUiLCJNSU5fU0FGRV9JTlRFR0VSIiwiMTg2IiwiMTg3IiwiMTg4IiwiYU51bWJlclZhbHVlIiwiJHRvRml4ZWQiLCJ0b0ZpeGVkIiwiRVJST1IiLCJtdWx0aXBseSIsImMyIiwiZGl2aWRlIiwibnVtVG9TdHJpbmciLCJhY2MiLCJmcmFjdGlvbkRpZ2l0cyIsInoiLCJ4MiIsIjE4OSIsIiRmYWlscyIsIiR0b1ByZWNpc2lvbiIsInRvUHJlY2lzaW9uIiwicHJlY2lzaW9uIiwiMTkwIiwiMTkxIiwiMTkyIiwiMTkzIiwiMTk0IiwiJGZyZWV6ZSIsIjE5NSIsIiRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCIxOTYiLCIxOTciLCIkZ2V0UHJvdG90eXBlT2YiLCIxOTgiLCIkaXNFeHRlbnNpYmxlIiwiMTk5IiwiJGlzRnJvemVuIiwiMjAwIiwiJGlzU2VhbGVkIiwiMjAxIiwiMjAyIiwiMjAzIiwiJHByZXZlbnRFeHRlbnNpb25zIiwiMjA0IiwiJHNlYWwiLCIyMDUiLCIyMDYiLCIyMDciLCIyMDgiLCIyMDkiLCJJbnRlcm5hbCIsIm5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSIsIk93blByb21pc2VDYXBhYmlsaXR5IiwiV3JhcHBlciIsIm1pY3JvdGFzayIsIm5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlIiwicGVyZm9ybSIsInByb21pc2VSZXNvbHZlIiwiJFByb21pc2UiLCJlbXB0eSIsIlVTRV9OQVRJVkUiLCJGYWtlUHJvbWlzZSIsIlByb21pc2VSZWplY3Rpb25FdmVudCIsInNhbWVDb25zdHJ1Y3RvciIsImlzVGhlbmFibGUiLCJpc1JlamVjdCIsIl9uIiwiY2hhaW4iLCJfYyIsIl92Iiwib2siLCJfcyIsInJlYWN0aW9uIiwiaGFuZGxlciIsImZhaWwiLCJfaCIsIm9uSGFuZGxlVW5oYW5kbGVkIiwib25VbmhhbmRsZWQiLCJjb25zb2xlIiwidW5oYW5kbGVkIiwiaXNVbmhhbmRsZWQiLCJlbWl0Iiwib251bmhhbmRsZWRyZWplY3Rpb24iLCJyZWFzb24iLCJlcnJvciIsIl9hIiwib25yZWplY3Rpb25oYW5kbGVkIiwiJHJlamVjdCIsIl93IiwiJHJlc29sdmUiLCJleGVjdXRvciIsImVyciIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsImNhdGNoIiwiY2FwYWJpbGl0eSIsImFsbCIsInJlbWFpbmluZyIsIiRpbmRleCIsImFscmVhZHlDYWxsZWQiLCJyYWNlIiwiMjEwIiwickFwcGx5IiwiZkFwcGx5IiwidGhpc0FyZ3VtZW50IiwiYXJndW1lbnRzTGlzdCIsIkwiLCIyMTEiLCJyQ29uc3RydWN0IiwiTkVXX1RBUkdFVF9CVUciLCJBUkdTX0JVRyIsIlRhcmdldCIsIm5ld1RhcmdldCIsIiRhcmdzIiwiMjEyIiwicHJvcGVydHlLZXkiLCJhdHRyaWJ1dGVzIiwiMjEzIiwiZGVsZXRlUHJvcGVydHkiLCIyMTQiLCJFbnVtZXJhdGUiLCJlbnVtZXJhdGUiLCIyMTUiLCIyMTYiLCJnZXRQcm90byIsIjIxNyIsInJlY2VpdmVyIiwiMjE4IiwiMjE5IiwiMjIwIiwiMjIxIiwiMjIyIiwic2V0UHJvdG8iLCIyMjMiLCJWIiwiZXhpc3RpbmdEZXNjcmlwdG9yIiwib3duRGVzYyIsIjIyNCIsIiRmbGFncyIsIiRSZWdFeHAiLCJyZTEiLCJyZTIiLCJDT1JSRUNUX05FVyIsInRpUkUiLCJwaVJFIiwiZmlVIiwicHJveHkiLCIyMjUiLCJmbGFncyIsIjIyNiIsIiRtYXRjaCIsInJlZ2V4cCIsIjIyNyIsIlJFUExBQ0UiLCIkcmVwbGFjZSIsInNlYXJjaFZhbHVlIiwicmVwbGFjZVZhbHVlIiwiMjI4IiwiU0VBUkNIIiwiJHNlYXJjaCIsIjIyOSIsIlNQTElUIiwiJHNwbGl0IiwiX3NwbGl0IiwiJHB1c2giLCJOUENHIiwibGltaXQiLCJzZXBhcmF0b3IyIiwibGFzdEluZGV4IiwibGFzdExlbmd0aCIsIm91dHB1dCIsImxhc3RMYXN0SW5kZXgiLCJzcGxpdExpbWl0Iiwic2VwYXJhdG9yQ29weSIsIjIzMCIsIjIzMSIsImFkZCIsIjIzMiIsIjIzMyIsIjIzNCIsIjIzNSIsIjIzNiIsIiRhdCIsImNvZGVQb2ludEF0IiwiMjM3IiwiY29udGV4dCIsIiRlbmRzV2l0aCIsImVuZHNXaXRoIiwiZW5kUG9zaXRpb24iLCJzZWFyY2giLCIyMzgiLCIyMzkiLCJjb2xvciIsIjI0MCIsIjI0MSIsImZyb21DaGFyQ29kZSIsIiRmcm9tQ29kZVBvaW50IiwiZnJvbUNvZGVQb2ludCIsIjI0MiIsIjI0MyIsIjI0NCIsInBvaW50IiwiMjQ1IiwidXJsIiwiMjQ2IiwicmF3IiwiY2FsbFNpdGUiLCJ0cGwiLCIyNDciLCIyNDgiLCIyNDkiLCIkc3RhcnRzV2l0aCIsInN0YXJ0c1dpdGgiLCIyNTAiLCIyNTEiLCIyNTIiLCIyNTMiLCIyNTQiLCJ3a3NEZWZpbmUiLCJrZXlPZiIsImVudW1LZXlzIiwiX2NyZWF0ZSIsImdPUE5FeHQiLCIkSlNPTiIsIkpTT04iLCJfc3RyaW5naWZ5Iiwic3RyaW5naWZ5IiwiSElEREVOIiwiU3ltYm9sUmVnaXN0cnkiLCJBbGxTeW1ib2xzIiwiT1BTeW1ib2xzIiwiUU9iamVjdCIsImZpbmRDaGlsZCIsInNldFN5bWJvbERlc2MiLCJwcm90b0Rlc2MiLCJ3cmFwIiwic3ltIiwiaXNTeW1ib2wiLCIkZGVmaW5lUHJvcGVydGllcyIsIiRwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIiRnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiJGdldE93blByb3BlcnR5U3ltYm9scyIsIklTX09QIiwiZXM2U3ltYm9scyIsIndlbGxLbm93blN5bWJvbHMiLCJmb3IiLCJrZXlGb3IiLCJ1c2VTZXR0ZXIiLCJ1c2VTaW1wbGUiLCIkcmVwbGFjZXIiLCIyNTUiLCIkaXNWaWV3IiwiaXNWaWV3IiwiZmluYWwiLCJ2aWV3UyIsInZpZXdUIiwiMjU2IiwiMjU3IiwiaW5pdCIsIjI1OCIsIjI1OSIsIjI2MCIsIjI2MSIsIjI2MiIsIjI2MyIsIjI2NCIsIjI2NSIsIkludGVybmFsTWFwIiwiZWFjaCIsIndlYWsiLCJ0bXAiLCIkV2Vha01hcCIsImZyZWV6ZSIsIjI2NyIsIjI2OCIsImFycmF5U3BlY2llc0NyZWF0ZSIsImZsYXRNYXAiLCIyNjkiLCJmbGF0dGVuIiwiZGVwdGhBcmciLCIyNzAiLCIkaW5jbHVkZXMiLCIyNzEiLCJhc2FwIiwiMjcyIiwiaXNFcnJvciIsIjI3MyIsIjI3NCIsIjI3NSIsIjI3NiIsIjI3NyIsImNsYW1wIiwibG93ZXIiLCJ1cHBlciIsIjI3OCIsIkRFR19QRVJfUkFEIiwiUEkiLCIyNzkiLCJSQURfUEVSX0RFRyIsImRlZ3JlZXMiLCJyYWRpYW5zIiwiMjgwIiwiZnNjYWxlIiwiMjgxIiwiaWFkZGgiLCJ4MCIsIngxIiwieTAiLCJ5MSIsIiR4MCIsIiR5MCIsIjI4MiIsImltdWxoIiwiJHUiLCIkdiIsInUwIiwidjAiLCJ1MSIsInYxIiwiMjgzIiwiaXN1YmgiLCIyODQiLCIyODUiLCIyODYiLCIyODciLCJzaWduYml0IiwiMjg4IiwidW11bGgiLCIyODkiLCJfX2RlZmluZUdldHRlcl9fIiwiMjkwIiwiMjkxIiwiMjkyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImdldERlc2MiLCIyOTMiLCJfX2xvb2t1cEdldHRlcl9fIiwiMjk0IiwiX19sb29rdXBTZXR0ZXJfXyIsIjI5NSIsIiR2YWx1ZXMiLCIyOTYiLCJPQlNFUlZBQkxFIiwiY2xlYW51cFN1YnNjcmlwdGlvbiIsInN1YnNjcmlwdGlvbiIsImNsZWFudXAiLCJzdWJzY3JpcHRpb25DbG9zZWQiLCJfbyIsImNsb3NlU3Vic2NyaXB0aW9uIiwiU3Vic2NyaXB0aW9uIiwib2JzZXJ2ZXIiLCJzdWJzY3JpYmVyIiwiU3Vic2NyaXB0aW9uT2JzZXJ2ZXIiLCJ1bnN1YnNjcmliZSIsImNvbXBsZXRlIiwiJE9ic2VydmFibGUiLCJzdWJzY3JpYmUiLCJvYnNlcnZhYmxlIiwiaXRlbXMiLCJPYnNlcnZhYmxlIiwiMjk3IiwiZmluYWxseSIsIm9uRmluYWxseSIsIjI5OCIsInRyeSIsIjI5OSIsIm1ldGFkYXRhIiwidG9NZXRhS2V5Iiwib3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSIsImRlZmluZU1ldGFkYXRhIiwibWV0YWRhdGFLZXkiLCJtZXRhZGF0YVZhbHVlIiwiMzAwIiwiZGVsZXRlTWV0YWRhdGEiLCIzMDEiLCJTZXQiLCJvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyIsIm9yZGluYXJ5TWV0YWRhdGFLZXlzIiwib0tleXMiLCJwS2V5cyIsImdldE1ldGFkYXRhS2V5cyIsIjMwMiIsIm9yZGluYXJ5SGFzT3duTWV0YWRhdGEiLCJvcmRpbmFyeUdldE93bk1ldGFkYXRhIiwib3JkaW5hcnlHZXRNZXRhZGF0YSIsImdldE1ldGFkYXRhIiwiMzAzIiwiZ2V0T3duTWV0YWRhdGFLZXlzIiwiMzA0IiwiZ2V0T3duTWV0YWRhdGEiLCIzMDUiLCJvcmRpbmFyeUhhc01ldGFkYXRhIiwiaGFzTWV0YWRhdGEiLCIzMDYiLCJoYXNPd25NZXRhZGF0YSIsIjMwNyIsIiRtZXRhZGF0YSIsIjMwOCIsIjMwOSIsIjMxMCIsIjMxMSIsImF0IiwiMzEyIiwiZ2V0RmxhZ3MiLCJSZWdFeHBQcm90byIsIiRSZWdFeHBTdHJpbmdJdGVyYXRvciIsIl9yIiwibWF0Y2hBbGwiLCJyeCIsIjMxMyIsIiRwYWQiLCIzMTQiLCIzMTUiLCIzMTYiLCIzMTciLCIzMTgiLCIzMTkiLCIzMjAiLCIzMjEiLCIzMjIiLCIzMjMiLCIzMjQiLCJUT19TVFJJTkdfVEFHIiwiQXJyYXlWYWx1ZXMiLCJET01JdGVyYWJsZXMiLCJDU1NSdWxlTGlzdCIsIkNTU1N0eWxlRGVjbGFyYXRpb24iLCJDU1NWYWx1ZUxpc3QiLCJDbGllbnRSZWN0TGlzdCIsIkRPTVJlY3RMaXN0IiwiRE9NU3RyaW5nTGlzdCIsIkRPTVRva2VuTGlzdCIsIkRhdGFUcmFuc2Zlckl0ZW1MaXN0IiwiRmlsZUxpc3QiLCJIVE1MQWxsQ29sbGVjdGlvbiIsIkhUTUxDb2xsZWN0aW9uIiwiSFRNTEZvcm1FbGVtZW50IiwiSFRNTFNlbGVjdEVsZW1lbnQiLCJNZWRpYUxpc3QiLCJNaW1lVHlwZUFycmF5IiwiTmFtZWROb2RlTWFwIiwiTm9kZUxpc3QiLCJQYWludFJlcXVlc3RMaXN0IiwiUGx1Z2luIiwiUGx1Z2luQXJyYXkiLCJTVkdMZW5ndGhMaXN0IiwiU1ZHTnVtYmVyTGlzdCIsIlNWR1BhdGhTZWdMaXN0IiwiU1ZHUG9pbnRMaXN0IiwiU1ZHU3RyaW5nTGlzdCIsIlNWR1RyYW5zZm9ybUxpc3QiLCJTb3VyY2VCdWZmZXJMaXN0IiwiU3R5bGVTaGVldExpc3QiLCJUZXh0VHJhY2tDdWVMaXN0IiwiVGV4dFRyYWNrTGlzdCIsIlRvdWNoTGlzdCIsImNvbGxlY3Rpb25zIiwiZXhwbGljaXQiLCJDb2xsZWN0aW9uIiwiMzI1IiwiJHRhc2siLCIzMjYiLCJwYXJ0aWFsIiwibmF2aWdhdG9yIiwiTVNJRSIsInVzZXJBZ2VudCIsInRpbWUiLCJzZXRJbnRlcnZhbCIsIk9wIiwiaGFzT3duIiwiaXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwidG9TdHJpbmdUYWciLCJpbk1vZHVsZSIsInJ1bnRpbWUiLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0IiwiR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCIsIkdlblN0YXRlRXhlY3V0aW5nIiwiR2VuU3RhdGVDb21wbGV0ZWQiLCJDb250aW51ZVNlbnRpbmVsIiwiTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUiLCJHcCIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiR2VuZXJhdG9yIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwibWFyayIsImF3cmFwIiwiX19hd2FpdCIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsIkFzeW5jSXRlcmF0b3IiLCJhc3luYyIsImlubmVyRm4iLCJvdXRlckZuIiwidHJ5TG9jc0xpc3QiLCJwb3AiLCJDb250ZXh0IiwicmVzZXQiLCJza2lwVGVtcFJlc2V0Iiwic2VudCIsIl9zZW50IiwiZGVsZWdhdGUiLCJ0cnlFbnRyaWVzIiwicmVzZXRUcnlFbnRyeSIsInN0b3AiLCJyb290UmVjb3JkIiwiY29tcGxldGlvbiIsInJ2YWwiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImV4Y2VwdGlvbiIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsInJlY29yZCIsInRyeUxvYyIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFicnVwdCIsImZpbmFsbHlFbnRyeSIsImFmdGVyTG9jIiwiZmluaXNoIiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsInJlc3VsdE5hbWUiLCJuZXh0TG9jIiwicHJvdG9HZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJfaW52b2tlIiwic3RhdGUiLCJkb25lUmVzdWx0IiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwidHJ5Q2F0Y2giLCJtYWtlSW52b2tlTWV0aG9kIiwib2JqIiwidW53cmFwcGVkIiwicHJldmlvdXNQcm9taXNlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJyZXR1cm4iLCJpbmZvIiwicHVzaFRyeUVudHJ5IiwibG9jcyIsIml0ZXJhdG9yTWV0aG9kIiwiU2NyYW1ibGVyIiwic2NyYW1ibGVBcmdzIiwicHJldmVudCIsInJhbmRvbUNoYXIiLCJzdWJzdHIiLCJwYXNzZWRBc09iamVjdCIsInJhbmRvbVRpbWUiLCJ3YXJuIiwic2NyYW1ibGUiLCJxdWVyeVNlbGVjdG9yQWxsIiwid2hpY2giLCJ0cnV0aCIsInRleHRDb250ZW50IiwibmV3TGV0dGVycyIsInJldmVydCIsInRpY2tlciIsImxldHRlciIsImtpbGxDaGVjayIsImNsZWFySW50ZXJ2YWwiLCJzY3JhbWJsZUZpcmUiLCJ0cmFjZSJdLCJtYXBwaW5ncyI6IkNBQUEsU0FBVUEsRUFBRUMsRUFBRUMsRUFBRUMsR0FBRyxTQUFTQyxFQUFFQyxFQUFFQyxHQUFHLElBQUlKLEVBQUVHLEdBQUcsQ0FBQyxJQUFJSixFQUFFSSxHQUFHLENBQUMsSUFBSUUsRUFBa0IsbUJBQVRDLFNBQXFCQSxRQUFRLElBQUlG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USxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkMsRUFBT0wsUUFBVUksRUFBUSxNQUV0Qjh5QixJQUFNLElBQUlDLElBQU0sSUFBSUUsSUFBTSxJQUFJQyxJQUFNLElBQUlFLElBQU0sSUFBSUcsSUFBTSxJQUFJQyxJQUFNLElBQUlHLElBQU0sSUFBSUUsSUFBTSxJQUFJRyxJQUFNLElBQUk3RSxJQUFNLElBQUlnRixJQUFNLElBQUlDLElBQU0sSUFBSUMsSUFBTSxJQUFJQyxJQUFNLElBQUlDLElBQU0sSUFBSUUsSUFBTSxJQUFJQyxJQUFNLElBQUlJLElBQU0sSUFBSUUsSUFBTSxJQUFJRSxJQUFNLElBQUlDLElBQU0sSUFBSUMsSUFBTSxJQUFJQyxJQUFNLElBQUlHLElBQU0sSUFBSUUsSUFBTSxJQUFJRSxJQUFNLElBQUlDLElBQU0sSUFBSUcsSUFBTSxJQUFJMWEsSUFBTSxJQUFJK2EsSUFBTSxJQUFJTSxJQUFNLElBQUlHLElBQU0sSUFBSUcsSUFBTSxJQUFJRSxJQUFNLElBQUlHLElBQU0sSUFBSUUsSUFBTSxJQUFJQyxJQUFNLElBQUlDLElBQU0sSUFBSU8sSUFBTSxJQUFJTyxJQUFNLElBQUlHLElBQU0sSUFBSUMsSUFBTSxJQUFJRSxJQUFNLElBQUlDLElBQU0sSUFBSUcsSUFBTSxJQUFJRSxJQUFNLElBQUlFLElBQU0sSUFBSVUsSUFBTSxJQUFJQyxJQUFNLElBQUlFLElBQU0sSUFBSUUsSUFBTSxJQUFJQyxJQUFNLElBQUlFLElBQU0sSUFBSUUsSUFBTSxJQUFJRSxJQUFNLElBQUlDLElBQU0sSUFBSUMsSUFBTSxJQUFJYSxJQUFNLElBQUlLLElBQU0sSUFBSUMsSUFBTSxJQUFJQyxJQUFNLElBQUlDLElBQU0sSUFBSUMsSUFBTSxJQUFJRSxJQUFNLElBQUlFLElBQU0sSUFBSUMsSUFBTSxJQUFJRSxJQUFNLElBQUlFLElBQU0sSUFBSUUsSUFBTSxJQUFJRSxJQUFNLElBQUlDLElBQU0sSUFBSUMsSUFBTSxJQUFJRSxJQUFNLElBQUlFLElBQU0sSUFBSUMsSUFBTSxJQUFJQyxJQUFNLElBQUlDLElBQU0sSUFBSUMsSUFBTSxJQUFJb0QsSUFBTSxJQUFJTSxJQUFNLElBQUlPLElBQU0sSUFBSUcsSUFBTSxJQUFJRSxJQUFNLElBQUlHLElBQU0sSUFBSUMsSUFBTSxJQUFJRSxJQUFNLElBQUlFLElBQU0sSUFBSUMsSUFBTSxJQUFJQyxJQUFNLElBQUlDLElBQU0sSUFBSUMsSUFBTSxJQUFJRSxJQUFNLElBQUlJLElBQU0sSUFBSVUsSUFBTSxJQUFJRSxJQUFNLElBQUlHLElBQU0sSUFBSUssSUFBTSxJQUFJRyxJQUFNLElBQUk1aUMsR0FBSyxHQUFHMGpDLElBQU0sSUFBSUMsSUFBTSxJQUFJRSxJQUFNLElBQUlDLElBQU0sSUFBSUMsSUFBTSxJQUFJQyxJQUFNLElBQUlDLElBQU0sSUFBSUcsSUFBTSxJQUFJTSxJQUFNLElBQUlDLElBQU0sSUFBSUUsSUFBTSxJQUFJQyxJQUFNLElBQUlJLElBQU0sSUFBSUMsSUFBTSxJQUFJQyxJQUFNLElBQUlFLElBQU0sSUFBSUUsSUFBTSxJQUFJSSxJQUFNLElBQUlDLElBQU0sSUFBSUMsSUFBTSxJQUFJRyxJQUFNLElBQUlDLElBQU0sSUFBSUMsSUFBTSxJQUFJQyxJQUFNLElBQUlDLElBQU0sSUFBSWlDLElBQU0sSUFBSU0sSUFBTSxJQUFJQyxJQUFNLElBQUlFLElBQU0sSUFBSUMsSUFBTSxJQUFJQyxJQUFNLElBQUlDLElBQU0sSUFBSUMsSUFBTSxJQUFJQyxJQUFNLElBQUlDLElBQU0sSUFBSUMsSUFBTSxJQUFJN3ZCLElBQU0sSUFBSW93QixJQUFNLElBQUlDLElBQU0sSUFBSUcsSUFBTSxJQUFJRyxJQUFNLElBQUlFLElBQU0sSUFBSUUsSUFBTSxJQUFJRSxJQUFNLElBQUlDLElBQU0sSUFBSUMsSUFBTSxJQUFJQyxJQUFNLElBQUlDLElBQU0sSUFBSUksSUFBTSxJQUFJRyxJQUFNLElBQUlJLElBQU0sSUFBSUUsSUFBTSxJQUFJUSxJQUFNLElBQUlRLElBQU0sSUFBSUUsSUFBTSxJQUFJQyxJQUFNLElBQUlDLElBQU0sSUFBSUMsSUFBTSxJQUFJRSxJQUFNLElBQUlFLElBQU0sSUFBSUUsSUFBTSxJQUFJQyxJQUFNLElBQUlD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MTVDLGFBQWU2TixTQUFTcXNDLGlCQUFpQlIsSUFFeEgxZCxRQUFRTSxNQUFNMmQsR0FFZEEsRUFBU3g4QyxRQUFRLFNBQVUyVCxFQUFTK29DLEdBQ25DLElBQUlDLEVBQVFocEMsRUFBUWlwQyxZQUFZNzhDLE1BQU0sSUFDbEM4OEMsRUFBYWxwQyxFQUFRaXBDLFlBQVk3OEMsTUFBTSxJQUN2Qys4QyxLQUVKLE1BQU1DLEVBQVNuRyxZQUFhLFdBRTNCK0YsRUFBTTVpQyxJQUFLLENBQUNpakMsRUFBUTErQyxLQUVmLFlBQVlpdEIsUUFBUXl4QixJQUFXLElBRW5DSCxFQUFXditDLEdBQUs2OUMsSUFFaEJ2MUIsV0FBWSxXQUNYazJCLEVBQU94K0MsSUFBSyxHQUNWZytDLE1BRWdCLElBQWRRLEVBQU94K0MsS0FDVnUrQyxFQUFXditDLEdBQUtxK0MsRUFBTXIrQyxJQUd4QnFWLEVBQVFpcEMsWUFBY0MsRUFBVzMxQyxLQUFLLE9BSXRDLElBQUkrMUMsRUFBYUosRUFBV2grQyxRQUFVODlDLEVBQU05OUMsUUFBV2crQyxFQUFXNXhCLE1BQU0sU0FBU3B0QixFQUFHUyxHQUNuRixPQUFPVCxJQUFNOCtDLEVBQU1yK0MsS0FFZjIrQyxHQUNKQyxjQUFjSCxJQUVkLE9BekNMSSxDQUFhbEIsR0E2Q2IsTUFBTXArQyxHQUNQMGdDLFFBQVE2ZSxNQUFNLGNBQWdCdi9DLEVBQU8sbUJBQW1CLHlCQWpFdkMsSUFBU08iLCJmaWxlIjoic2NyYW1ibGUubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkoezE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChnbG9iYWwpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbl9kZXJlcV8oMzI3KTtcblxuX2RlcmVxXygzMjgpO1xuXG5fZGVyZXFfKDIpO1xuXG5pZiAoZ2xvYmFsLl9iYWJlbFBvbHlmaWxsKSB7XG4gIHRocm93IG5ldyBFcnJvcihcIm9ubHkgb25lIGluc3RhbmNlIG9mIGJhYmVsLXBvbHlmaWxsIGlzIGFsbG93ZWRcIik7XG59XG5nbG9iYWwuX2JhYmVsUG9seWZpbGwgPSB0cnVlO1xuXG52YXIgREVGSU5FX1BST1BFUlRZID0gXCJkZWZpbmVQcm9wZXJ0eVwiO1xuZnVuY3Rpb24gZGVmaW5lKE8sIGtleSwgdmFsdWUpIHtcbiAgT1trZXldIHx8IE9iamVjdFtERUZJTkVfUFJPUEVSVFldKE8sIGtleSwge1xuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfSk7XG59XG5cbmRlZmluZShTdHJpbmcucHJvdG90eXBlLCBcInBhZExlZnRcIiwgXCJcIi5wYWRTdGFydCk7XG5kZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgXCJwYWRSaWdodFwiLCBcIlwiLnBhZEVuZCk7XG5cblwicG9wLHJldmVyc2Usc2hpZnQsa2V5cyx2YWx1ZXMsZW50cmllcyxpbmRleE9mLGV2ZXJ5LHNvbWUsZm9yRWFjaCxtYXAsZmlsdGVyLGZpbmQsZmluZEluZGV4LGluY2x1ZGVzLGpvaW4sc2xpY2UsY29uY2F0LHB1c2gsc3BsaWNlLHVuc2hpZnQsc29ydCxsYXN0SW5kZXhPZixyZWR1Y2UscmVkdWNlUmlnaHQsY29weVdpdGhpbixmaWxsXCIuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBbXVtrZXldICYmIGRlZmluZShBcnJheSwga2V5LCBGdW5jdGlvbi5jYWxsLmJpbmQoW11ba2V5XSkpO1xufSk7XG59KS5jYWxsKHRoaXMsdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSlcbn0se1wiMlwiOjIsXCIzMjdcIjozMjcsXCIzMjhcIjozMjh9XSwyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbl9kZXJlcV8oMTMwKTtcbm1vZHVsZS5leHBvcnRzID0gX2RlcmVxXygyMykuUmVnRXhwLmVzY2FwZTtcblxufSx7XCIxMzBcIjoxMzAsXCIyM1wiOjIzfV0sMzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG5cbn0se31dLDQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyIGNvZiA9IF9kZXJlcV8oMTgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIG1zZykge1xuICBpZiAodHlwZW9mIGl0ICE9ICdudW1iZXInICYmIGNvZihpdCkgIT0gJ051bWJlcicpIHRocm93IFR5cGVFcnJvcihtc2cpO1xuICByZXR1cm4gK2l0O1xufTtcblxufSx7XCIxOFwiOjE4fV0sNTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMi4xLjMuMzEgQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG52YXIgVU5TQ09QQUJMRVMgPSBfZGVyZXFfKDEyOCkoJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcbmlmIChBcnJheVByb3RvW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpIF9kZXJlcV8oNDIpKEFycmF5UHJvdG8sIFVOU0NPUEFCTEVTLCB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgQXJyYXlQcm90b1tVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59O1xuXG59LHtcIjEyOFwiOjEyOCxcIjQyXCI6NDJ9XSw2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSwgZm9yYmlkZGVuRmllbGQpIHtcbiAgaWYgKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikgfHwgKGZvcmJpZGRlbkZpZWxkICE9PSB1bmRlZmluZWQgJiYgZm9yYmlkZGVuRmllbGQgaW4gaXQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKG5hbWUgKyAnOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuXG59LHt9XSw3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBpc09iamVjdCA9IF9kZXJlcV8oNTEpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcblxufSx7XCI1MVwiOjUxfV0sODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcbid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IF9kZXJlcV8oMTE5KTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSBfZGVyZXFfKDExNCk7XG52YXIgdG9MZW5ndGggPSBfZGVyZXFfKDExOCk7XG5cbm1vZHVsZS5leHBvcnRzID0gW10uY29weVdpdGhpbiB8fCBmdW5jdGlvbiBjb3B5V2l0aGluKHRhcmdldCAvKiA9IDAgKi8sIHN0YXJ0IC8qID0gMCwgZW5kID0gQGxlbmd0aCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICB2YXIgbGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgdG8gPSB0b0Fic29sdXRlSW5kZXgodGFyZ2V0LCBsZW4pO1xuICB2YXIgZnJvbSA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuKTtcbiAgdmFyIGVuZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICB2YXIgY291bnQgPSBNYXRoLm1pbigoZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW4pKSAtIGZyb20sIGxlbiAtIHRvKTtcbiAgdmFyIGluYyA9IDE7XG4gIGlmIChmcm9tIDwgdG8gJiYgdG8gPCBmcm9tICsgY291bnQpIHtcbiAgICBpbmMgPSAtMTtcbiAgICBmcm9tICs9IGNvdW50IC0gMTtcbiAgICB0byArPSBjb3VudCAtIDE7XG4gIH1cbiAgd2hpbGUgKGNvdW50LS0gPiAwKSB7XG4gICAgaWYgKGZyb20gaW4gTykgT1t0b10gPSBPW2Zyb21dO1xuICAgIGVsc2UgZGVsZXRlIE9bdG9dO1xuICAgIHRvICs9IGluYztcbiAgICBmcm9tICs9IGluYztcbiAgfSByZXR1cm4gTztcbn07XG5cbn0se1wiMTE0XCI6MTE0LFwiMTE4XCI6MTE4LFwiMTE5XCI6MTE5fV0sOTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMi4xLjMuNiBBcnJheS5wcm90b3R5cGUuZmlsbCh2YWx1ZSwgc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aClcbid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IF9kZXJlcV8oMTE5KTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSBfZGVyZXFfKDExNCk7XG52YXIgdG9MZW5ndGggPSBfZGVyZXFfKDExOCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZpbGwodmFsdWUgLyogLCBzdGFydCA9IDAsIGVuZCA9IEBsZW5ndGggKi8pIHtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIGxlbmd0aCk7XG4gIHZhciBlbmQgPSBhTGVuID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgdmFyIGVuZFBvcyA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKTtcbiAgd2hpbGUgKGVuZFBvcyA+IGluZGV4KSBPW2luZGV4KytdID0gdmFsdWU7XG4gIHJldHVybiBPO1xufTtcblxufSx7XCIxMTRcIjoxMTQsXCIxMThcIjoxMTgsXCIxMTlcIjoxMTl9XSwxMDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgZm9yT2YgPSBfZGVyZXFfKDM5KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlciwgSVRFUkFUT1IpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3JPZihpdGVyLCBmYWxzZSwgcmVzdWx0LnB1c2gsIHJlc3VsdCwgSVRFUkFUT1IpO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxufSx7XCIzOVwiOjM5fV0sMTE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcbnZhciB0b0lPYmplY3QgPSBfZGVyZXFfKDExNyk7XG52YXIgdG9MZW5ndGggPSBfZGVyZXFfKDExOCk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gX2RlcmVxXygxMTQpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pIHtcbiAgICAgIGlmIChPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG5cbn0se1wiMTE0XCI6MTE0LFwiMTE3XCI6MTE3LFwiMTE4XCI6MTE4fV0sMTI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMCAtPiBBcnJheSNmb3JFYWNoXG4vLyAxIC0+IEFycmF5I21hcFxuLy8gMiAtPiBBcnJheSNmaWx0ZXJcbi8vIDMgLT4gQXJyYXkjc29tZVxuLy8gNCAtPiBBcnJheSNldmVyeVxuLy8gNSAtPiBBcnJheSNmaW5kXG4vLyA2IC0+IEFycmF5I2ZpbmRJbmRleFxudmFyIGN0eCA9IF9kZXJlcV8oMjUpO1xudmFyIElPYmplY3QgPSBfZGVyZXFfKDQ3KTtcbnZhciB0b09iamVjdCA9IF9kZXJlcV8oMTE5KTtcbnZhciB0b0xlbmd0aCA9IF9kZXJlcV8oMTE4KTtcbnZhciBhc2MgPSBfZGVyZXFfKDE1KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRZUEUsICRjcmVhdGUpIHtcbiAgdmFyIElTX01BUCA9IFRZUEUgPT0gMTtcbiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT0gMjtcbiAgdmFyIElTX1NPTUUgPSBUWVBFID09IDM7XG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT0gNDtcbiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDY7XG4gIHZhciBOT19IT0xFUyA9IFRZUEUgPT0gNSB8fCBJU19GSU5EX0lOREVYO1xuICB2YXIgY3JlYXRlID0gJGNyZWF0ZSB8fCBhc2M7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IElPYmplY3QoTyk7XG4gICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgdGhhdCwgMyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKHNlbGYubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciByZXN1bHQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkO1xuICAgIHZhciB2YWwsIHJlcztcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpIHtcbiAgICAgIHZhbCA9IHNlbGZbaW5kZXhdO1xuICAgICAgcmVzID0gZih2YWwsIGluZGV4LCBPKTtcbiAgICAgIGlmIChUWVBFKSB7XG4gICAgICAgIGlmIChJU19NQVApIHJlc3VsdFtpbmRleF0gPSByZXM7ICAgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYgKHJlcykgc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbDsgICAgICAgICAgICAgIC8vIGZpbmRcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBpbmRleDsgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHJlc3VsdC5wdXNoKHZhbCk7ICAgICAgICAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIGlmIChJU19FVkVSWSkgcmV0dXJuIGZhbHNlOyAvLyBldmVyeVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogcmVzdWx0O1xuICB9O1xufTtcblxufSx7XCIxMThcIjoxMTgsXCIxMTlcIjoxMTksXCIxNVwiOjE1LFwiMjVcIjoyNSxcIjQ3XCI6NDd9XSwxMzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgYUZ1bmN0aW9uID0gX2RlcmVxXygzKTtcbnZhciB0b09iamVjdCA9IF9kZXJlcV8oMTE5KTtcbnZhciBJT2JqZWN0ID0gX2RlcmVxXyg0Nyk7XG52YXIgdG9MZW5ndGggPSBfZGVyZXFfKDExOCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIGNhbGxiYWNrZm4sIGFMZW4sIG1lbW8sIGlzUmlnaHQpIHtcbiAgYUZ1bmN0aW9uKGNhbGxiYWNrZm4pO1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoYXQpO1xuICB2YXIgc2VsZiA9IElPYmplY3QoTyk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciBpbmRleCA9IGlzUmlnaHQgPyBsZW5ndGggLSAxIDogMDtcbiAgdmFyIGkgPSBpc1JpZ2h0ID8gLTEgOiAxO1xuICBpZiAoYUxlbiA8IDIpIGZvciAoOzspIHtcbiAgICBpZiAoaW5kZXggaW4gc2VsZikge1xuICAgICAgbWVtbyA9IHNlbGZbaW5kZXhdO1xuICAgICAgaW5kZXggKz0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpbmRleCArPSBpO1xuICAgIGlmIChpc1JpZ2h0ID8gaW5kZXggPCAwIDogbGVuZ3RoIDw9IGluZGV4KSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ1JlZHVjZSBvZiBlbXB0eSBhcnJheSB3aXRoIG5vIGluaXRpYWwgdmFsdWUnKTtcbiAgICB9XG4gIH1cbiAgZm9yICg7aXNSaWdodCA/IGluZGV4ID49IDAgOiBsZW5ndGggPiBpbmRleDsgaW5kZXggKz0gaSkgaWYgKGluZGV4IGluIHNlbGYpIHtcbiAgICBtZW1vID0gY2FsbGJhY2tmbihtZW1vLCBzZWxmW2luZGV4XSwgaW5kZXgsIE8pO1xuICB9XG4gIHJldHVybiBtZW1vO1xufTtcblxufSx7XCIxMThcIjoxMTgsXCIxMTlcIjoxMTksXCIzXCI6MyxcIjQ3XCI6NDd9XSwxNDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgaXNPYmplY3QgPSBfZGVyZXFfKDUxKTtcbnZhciBpc0FycmF5ID0gX2RlcmVxXyg0OSk7XG52YXIgU1BFQ0lFUyA9IF9kZXJlcV8oMTI4KSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbCkge1xuICB2YXIgQztcbiAgaWYgKGlzQXJyYXkob3JpZ2luYWwpKSB7XG4gICAgQyA9IG9yaWdpbmFsLmNvbnN0cnVjdG9yO1xuICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgaWYgKHR5cGVvZiBDID09ICdmdW5jdGlvbicgJiYgKEMgPT09IEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSkgQyA9IHVuZGVmaW5lZDtcbiAgICBpZiAoaXNPYmplY3QoQykpIHtcbiAgICAgIEMgPSBDW1NQRUNJRVNdO1xuICAgICAgaWYgKEMgPT09IG51bGwpIEMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IHJldHVybiBDID09PSB1bmRlZmluZWQgPyBBcnJheSA6IEM7XG59O1xuXG59LHtcIjEyOFwiOjEyOCxcIjQ5XCI6NDksXCI1MVwiOjUxfV0sMTU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gOS40LjIuMyBBcnJheVNwZWNpZXNDcmVhdGUob3JpZ2luYWxBcnJheSwgbGVuZ3RoKVxudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IF9kZXJlcV8oMTQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbCwgbGVuZ3RoKSB7XG4gIHJldHVybiBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihvcmlnaW5hbCkpKGxlbmd0aCk7XG59O1xuXG59LHtcIjE0XCI6MTR9XSwxNjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgYUZ1bmN0aW9uID0gX2RlcmVxXygzKTtcbnZhciBpc09iamVjdCA9IF9kZXJlcV8oNTEpO1xudmFyIGludm9rZSA9IF9kZXJlcV8oNDYpO1xudmFyIGFycmF5U2xpY2UgPSBbXS5zbGljZTtcbnZhciBmYWN0b3JpZXMgPSB7fTtcblxudmFyIGNvbnN0cnVjdCA9IGZ1bmN0aW9uIChGLCBsZW4sIGFyZ3MpIHtcbiAgaWYgKCEobGVuIGluIGZhY3RvcmllcykpIHtcbiAgICBmb3IgKHZhciBuID0gW10sIGkgPSAwOyBpIDwgbGVuOyBpKyspIG5baV0gPSAnYVsnICsgaSArICddJztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICBmYWN0b3JpZXNbbGVuXSA9IEZ1bmN0aW9uKCdGLGEnLCAncmV0dXJuIG5ldyBGKCcgKyBuLmpvaW4oJywnKSArICcpJyk7XG4gIH0gcmV0dXJuIGZhY3Rvcmllc1tsZW5dKEYsIGFyZ3MpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBGdW5jdGlvbi5iaW5kIHx8IGZ1bmN0aW9uIGJpbmQodGhhdCAvKiAsIC4uLmFyZ3MgKi8pIHtcbiAgdmFyIGZuID0gYUZ1bmN0aW9uKHRoaXMpO1xuICB2YXIgcGFydEFyZ3MgPSBhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgdmFyIGJvdW5kID0gZnVuY3Rpb24gKC8qIGFyZ3MuLi4gKi8pIHtcbiAgICB2YXIgYXJncyA9IHBhcnRBcmdzLmNvbmNhdChhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBib3VuZCA/IGNvbnN0cnVjdChmbiwgYXJncy5sZW5ndGgsIGFyZ3MpIDogaW52b2tlKGZuLCBhcmdzLCB0aGF0KTtcbiAgfTtcbiAgaWYgKGlzT2JqZWN0KGZuLnByb3RvdHlwZSkpIGJvdW5kLnByb3RvdHlwZSA9IGZuLnByb3RvdHlwZTtcbiAgcmV0dXJuIGJvdW5kO1xufTtcblxufSx7XCIzXCI6MyxcIjQ2XCI6NDYsXCI1MVwiOjUxfV0sMTc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSBfZGVyZXFfKDE4KTtcbnZhciBUQUcgPSBfZGVyZXFfKDEyOCkoJ3RvU3RyaW5nVGFnJyk7XG4vLyBFUzMgd3JvbmcgaGVyZVxudmFyIEFSRyA9IGNvZihmdW5jdGlvbiAoKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ0FyZ3VtZW50cyc7XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXG52YXIgdHJ5R2V0ID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXRba2V5XTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgTywgVCwgQjtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKFQgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRBRykpID09ICdzdHJpbmcnID8gVFxuICAgIC8vIGJ1aWx0aW5UYWcgY2FzZVxuICAgIDogQVJHID8gY29mKE8pXG4gICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFja1xuICAgIDogKEIgPSBjb2YoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiBCO1xufTtcblxufSx7XCIxMjhcIjoxMjgsXCIxOFwiOjE4fV0sMTg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuXG59LHt9XSwxOTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgZFAgPSBfZGVyZXFfKDcyKS5mO1xudmFyIGNyZWF0ZSA9IF9kZXJlcV8oNzEpO1xudmFyIHJlZGVmaW5lQWxsID0gX2RlcmVxXyg5Myk7XG52YXIgY3R4ID0gX2RlcmVxXygyNSk7XG52YXIgYW5JbnN0YW5jZSA9IF9kZXJlcV8oNik7XG52YXIgZm9yT2YgPSBfZGVyZXFfKDM5KTtcbnZhciAkaXRlckRlZmluZSA9IF9kZXJlcV8oNTUpO1xudmFyIHN0ZXAgPSBfZGVyZXFfKDU3KTtcbnZhciBzZXRTcGVjaWVzID0gX2RlcmVxXygxMDApO1xudmFyIERFU0NSSVBUT1JTID0gX2RlcmVxXygyOSk7XG52YXIgZmFzdEtleSA9IF9kZXJlcV8oNjYpLmZhc3RLZXk7XG52YXIgdmFsaWRhdGUgPSBfZGVyZXFfKDEyNSk7XG52YXIgU0laRSA9IERFU0NSSVBUT1JTID8gJ19zJyA6ICdzaXplJztcblxudmFyIGdldEVudHJ5ID0gZnVuY3Rpb24gKHRoYXQsIGtleSkge1xuICAvLyBmYXN0IGNhc2VcbiAgdmFyIGluZGV4ID0gZmFzdEtleShrZXkpO1xuICB2YXIgZW50cnk7XG4gIGlmIChpbmRleCAhPT0gJ0YnKSByZXR1cm4gdGhhdC5faVtpbmRleF07XG4gIC8vIGZyb3plbiBvYmplY3QgY2FzZVxuICBmb3IgKGVudHJ5ID0gdGhhdC5fZjsgZW50cnk7IGVudHJ5ID0gZW50cnkubikge1xuICAgIGlmIChlbnRyeS5rID09IGtleSkgcmV0dXJuIGVudHJ5O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uICh3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKSB7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBpdGVyYWJsZSkge1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcbiAgICAgIHRoYXQuX3QgPSBOQU1FOyAgICAgICAgIC8vIGNvbGxlY3Rpb24gdHlwZVxuICAgICAgdGhhdC5faSA9IGNyZWF0ZShudWxsKTsgLy8gaW5kZXhcbiAgICAgIHRoYXQuX2YgPSB1bmRlZmluZWQ7ICAgIC8vIGZpcnN0IGVudHJ5XG4gICAgICB0aGF0Ll9sID0gdW5kZWZpbmVkOyAgICAvLyBsYXN0IGVudHJ5XG4gICAgICB0aGF0W1NJWkVdID0gMDsgICAgICAgICAvLyBzaXplXG4gICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgfSk7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIHtcbiAgICAgIC8vIDIzLjEuMy4xIE1hcC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgLy8gMjMuMi4zLjIgU2V0LnByb3RvdHlwZS5jbGVhcigpXG4gICAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICAgIGZvciAodmFyIHRoYXQgPSB2YWxpZGF0ZSh0aGlzLCBOQU1FKSwgZGF0YSA9IHRoYXQuX2ksIGVudHJ5ID0gdGhhdC5fZjsgZW50cnk7IGVudHJ5ID0gZW50cnkubikge1xuICAgICAgICAgIGVudHJ5LnIgPSB0cnVlO1xuICAgICAgICAgIGlmIChlbnRyeS5wKSBlbnRyeS5wID0gZW50cnkucC5uID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGRlbGV0ZSBkYXRhW2VudHJ5LmldO1xuICAgICAgICB9XG4gICAgICAgIHRoYXQuX2YgPSB0aGF0Ll9sID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGF0W1NJWkVdID0gMDtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4xLjMuMyBNYXAucHJvdG90eXBlLmRlbGV0ZShrZXkpXG4gICAgICAvLyAyMy4yLjMuNCBTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciB0aGF0ID0gdmFsaWRhdGUodGhpcywgTkFNRSk7XG4gICAgICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICAgIHZhciBuZXh0ID0gZW50cnkubjtcbiAgICAgICAgICB2YXIgcHJldiA9IGVudHJ5LnA7XG4gICAgICAgICAgZGVsZXRlIHRoYXQuX2lbZW50cnkuaV07XG4gICAgICAgICAgZW50cnkuciA9IHRydWU7XG4gICAgICAgICAgaWYgKHByZXYpIHByZXYubiA9IG5leHQ7XG4gICAgICAgICAgaWYgKG5leHQpIG5leHQucCA9IHByZXY7XG4gICAgICAgICAgaWYgKHRoYXQuX2YgPT0gZW50cnkpIHRoYXQuX2YgPSBuZXh0O1xuICAgICAgICAgIGlmICh0aGF0Ll9sID09IGVudHJ5KSB0aGF0Ll9sID0gcHJldjtcbiAgICAgICAgICB0aGF0W1NJWkVdLS07XG4gICAgICAgIH0gcmV0dXJuICEhZW50cnk7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMi4zLjYgU2V0LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICAvLyAyMy4xLjMuNSBNYXAucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICAgICAgdmFsaWRhdGUodGhpcywgTkFNRSk7XG4gICAgICAgIHZhciBmID0gY3R4KGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCAzKTtcbiAgICAgICAgdmFyIGVudHJ5O1xuICAgICAgICB3aGlsZSAoZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiB0aGlzLl9mKSB7XG4gICAgICAgICAgZihlbnRyeS52LCBlbnRyeS5rLCB0aGlzKTtcbiAgICAgICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgICAgICB3aGlsZSAoZW50cnkgJiYgZW50cnkucikgZW50cnkgPSBlbnRyeS5wO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjcgTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuMi4zLjcgU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgcmV0dXJuICEhZ2V0RW50cnkodmFsaWRhdGUodGhpcywgTkFNRSksIGtleSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKERFU0NSSVBUT1JTKSBkUChDLnByb3RvdHlwZSwgJ3NpemUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRlKHRoaXMsIE5BTUUpW1NJWkVdO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBkZWY6IGZ1bmN0aW9uICh0aGF0LCBrZXksIHZhbHVlKSB7XG4gICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcbiAgICB2YXIgcHJldiwgaW5kZXg7XG4gICAgLy8gY2hhbmdlIGV4aXN0aW5nIGVudHJ5XG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICBlbnRyeS52ID0gdmFsdWU7XG4gICAgLy8gY3JlYXRlIG5ldyBlbnRyeVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGF0Ll9sID0gZW50cnkgPSB7XG4gICAgICAgIGk6IGluZGV4ID0gZmFzdEtleShrZXksIHRydWUpLCAvLyA8LSBpbmRleFxuICAgICAgICBrOiBrZXksICAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0ga2V5XG4gICAgICAgIHY6IHZhbHVlLCAgICAgICAgICAgICAgICAgICAgICAvLyA8LSB2YWx1ZVxuICAgICAgICBwOiBwcmV2ID0gdGhhdC5fbCwgICAgICAgICAgICAgLy8gPC0gcHJldmlvdXMgZW50cnlcbiAgICAgICAgbjogdW5kZWZpbmVkLCAgICAgICAgICAgICAgICAgIC8vIDwtIG5leHQgZW50cnlcbiAgICAgICAgcjogZmFsc2UgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIHJlbW92ZWRcbiAgICAgIH07XG4gICAgICBpZiAoIXRoYXQuX2YpIHRoYXQuX2YgPSBlbnRyeTtcbiAgICAgIGlmIChwcmV2KSBwcmV2Lm4gPSBlbnRyeTtcbiAgICAgIHRoYXRbU0laRV0rKztcbiAgICAgIC8vIGFkZCB0byBpbmRleFxuICAgICAgaWYgKGluZGV4ICE9PSAnRicpIHRoYXQuX2lbaW5kZXhdID0gZW50cnk7XG4gICAgfSByZXR1cm4gdGhhdDtcbiAgfSxcbiAgZ2V0RW50cnk6IGdldEVudHJ5LFxuICBzZXRTdHJvbmc6IGZ1bmN0aW9uIChDLCBOQU1FLCBJU19NQVApIHtcbiAgICAvLyBhZGQgLmtleXMsIC52YWx1ZXMsIC5lbnRyaWVzLCBbQEBpdGVyYXRvcl1cbiAgICAvLyAyMy4xLjMuNCwgMjMuMS4zLjgsIDIzLjEuMy4xMSwgMjMuMS4zLjEyLCAyMy4yLjMuNSwgMjMuMi4zLjgsIDIzLjIuMy4xMCwgMjMuMi4zLjExXG4gICAgJGl0ZXJEZWZpbmUoQywgTkFNRSwgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gICAgICB0aGlzLl90ID0gdmFsaWRhdGUoaXRlcmF0ZWQsIE5BTUUpOyAvLyB0YXJnZXRcbiAgICAgIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAgICAgIC8vIGtpbmRcbiAgICAgIHRoaXMuX2wgPSB1bmRlZmluZWQ7ICAgICAgICAgICAgICAgIC8vIHByZXZpb3VzXG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgdmFyIGtpbmQgPSB0aGF0Ll9rO1xuICAgICAgdmFyIGVudHJ5ID0gdGhhdC5fbDtcbiAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnIpIGVudHJ5ID0gZW50cnkucDtcbiAgICAgIC8vIGdldCBuZXh0IGVudHJ5XG4gICAgICBpZiAoIXRoYXQuX3QgfHwgISh0aGF0Ll9sID0gZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiB0aGF0Ll90Ll9mKSkge1xuICAgICAgICAvLyBvciBmaW5pc2ggdGhlIGl0ZXJhdGlvblxuICAgICAgICB0aGF0Ll90ID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gc3RlcCgxKTtcbiAgICAgIH1cbiAgICAgIC8vIHJldHVybiBzdGVwIGJ5IGtpbmRcbiAgICAgIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHN0ZXAoMCwgZW50cnkuayk7XG4gICAgICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHN0ZXAoMCwgZW50cnkudik7XG4gICAgICByZXR1cm4gc3RlcCgwLCBbZW50cnkuaywgZW50cnkudl0pO1xuICAgIH0sIElTX01BUCA/ICdlbnRyaWVzJyA6ICd2YWx1ZXMnLCAhSVNfTUFQLCB0cnVlKTtcblxuICAgIC8vIGFkZCBbQEBzcGVjaWVzXSwgMjMuMS4yLjIsIDIzLjIuMi4yXG4gICAgc2V0U3BlY2llcyhOQU1FKTtcbiAgfVxufTtcblxufSx7XCIxMDBcIjoxMDAsXCIxMjVcIjoxMjUsXCIyNVwiOjI1LFwiMjlcIjoyOSxcIjM5XCI6MzksXCI1NVwiOjU1LFwiNTdcIjo1NyxcIjZcIjo2LFwiNjZcIjo2NixcIjcxXCI6NzEsXCI3MlwiOjcyLFwiOTNcIjo5M31dLDIwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXZpZEJydWFudC9NYXAtU2V0LnByb3RvdHlwZS50b0pTT05cbnZhciBjbGFzc29mID0gX2RlcmVxXygxNyk7XG52YXIgZnJvbSA9IF9kZXJlcV8oMTApO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSkge1xuICByZXR1cm4gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIGlmIChjbGFzc29mKHRoaXMpICE9IE5BTUUpIHRocm93IFR5cGVFcnJvcihOQU1FICsgXCIjdG9KU09OIGlzbid0IGdlbmVyaWNcIik7XG4gICAgcmV0dXJuIGZyb20odGhpcyk7XG4gIH07XG59O1xuXG59LHtcIjEwXCI6MTAsXCIxN1wiOjE3fV0sMjE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xudmFyIHJlZGVmaW5lQWxsID0gX2RlcmVxXyg5Myk7XG52YXIgZ2V0V2VhayA9IF9kZXJlcV8oNjYpLmdldFdlYWs7XG52YXIgYW5PYmplY3QgPSBfZGVyZXFfKDcpO1xudmFyIGlzT2JqZWN0ID0gX2RlcmVxXyg1MSk7XG52YXIgYW5JbnN0YW5jZSA9IF9kZXJlcV8oNik7XG52YXIgZm9yT2YgPSBfZGVyZXFfKDM5KTtcbnZhciBjcmVhdGVBcnJheU1ldGhvZCA9IF9kZXJlcV8oMTIpO1xudmFyICRoYXMgPSBfZGVyZXFfKDQxKTtcbnZhciB2YWxpZGF0ZSA9IF9kZXJlcV8oMTI1KTtcbnZhciBhcnJheUZpbmQgPSBjcmVhdGVBcnJheU1ldGhvZCg1KTtcbnZhciBhcnJheUZpbmRJbmRleCA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpO1xudmFyIGlkID0gMDtcblxuLy8gZmFsbGJhY2sgZm9yIHVuY2F1Z2h0IGZyb3plbiBrZXlzXG52YXIgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uICh0aGF0KSB7XG4gIHJldHVybiB0aGF0Ll9sIHx8ICh0aGF0Ll9sID0gbmV3IFVuY2F1Z2h0RnJvemVuU3RvcmUoKSk7XG59O1xudmFyIFVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuYSA9IFtdO1xufTtcbnZhciBmaW5kVW5jYXVnaHRGcm96ZW4gPSBmdW5jdGlvbiAoc3RvcmUsIGtleSkge1xuICByZXR1cm4gYXJyYXlGaW5kKHN0b3JlLmEsIGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICB9KTtcbn07XG5VbmNhdWdodEZyb3plblN0b3JlLnByb3RvdHlwZSA9IHtcbiAgZ2V0OiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYgKGVudHJ5KSByZXR1cm4gZW50cnlbMV07XG4gIH0sXG4gIGhhczogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAhIWZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYgKGVudHJ5KSBlbnRyeVsxXSA9IHZhbHVlO1xuICAgIGVsc2UgdGhpcy5hLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSxcbiAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgaW5kZXggPSBhcnJheUZpbmRJbmRleCh0aGlzLmEsIGZ1bmN0aW9uIChpdCkge1xuICAgICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gICAgfSk7XG4gICAgaWYgKH5pbmRleCkgdGhpcy5hLnNwbGljZShpbmRleCwgMSk7XG4gICAgcmV0dXJuICEhfmluZGV4O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uICh3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKSB7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBpdGVyYWJsZSkge1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcbiAgICAgIHRoYXQuX3QgPSBOQU1FOyAgICAgIC8vIGNvbGxlY3Rpb24gdHlwZVxuICAgICAgdGhhdC5faSA9IGlkKys7ICAgICAgLy8gY29sbGVjdGlvbiBpZFxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgLy8gbGVhayBzdG9yZSBmb3IgdW5jYXVnaHQgZnJvemVuIG9iamVjdHNcbiAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMy4zLjIgV2Vha01hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjQuMy4zIFdlYWtTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIE5BTUUpKVsnZGVsZXRlJ10oa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKSAmJiBkZWxldGUgZGF0YVt0aGlzLl9pXTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4zLjMuNCBXZWFrTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuNC4zLjQgV2Vha1NldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIE5BTUUpKS5oYXMoa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBkYXRhID0gZ2V0V2Vhayhhbk9iamVjdChrZXkpLCB0cnVlKTtcbiAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgdW5jYXVnaHRGcm96ZW5TdG9yZSh0aGF0KS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgZWxzZSBkYXRhW3RoYXQuX2ldID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIHVmc3RvcmU6IHVuY2F1Z2h0RnJvemVuU3RvcmVcbn07XG5cbn0se1wiMTJcIjoxMixcIjEyNVwiOjEyNSxcIjM5XCI6MzksXCI0MVwiOjQxLFwiNTFcIjo1MSxcIjZcIjo2LFwiNjZcIjo2NixcIjdcIjo3LFwiOTNcIjo5M31dLDIyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSBfZGVyZXFfKDQwKTtcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgcmVkZWZpbmUgPSBfZGVyZXFfKDk0KTtcbnZhciByZWRlZmluZUFsbCA9IF9kZXJlcV8oOTMpO1xudmFyIG1ldGEgPSBfZGVyZXFfKDY2KTtcbnZhciBmb3JPZiA9IF9kZXJlcV8oMzkpO1xudmFyIGFuSW5zdGFuY2UgPSBfZGVyZXFfKDYpO1xudmFyIGlzT2JqZWN0ID0gX2RlcmVxXyg1MSk7XG52YXIgZmFpbHMgPSBfZGVyZXFfKDM1KTtcbnZhciAkaXRlckRldGVjdCA9IF9kZXJlcV8oNTYpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gX2RlcmVxXygxMDEpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gX2RlcmVxXyg0NSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUsIHdyYXBwZXIsIG1ldGhvZHMsIGNvbW1vbiwgSVNfTUFQLCBJU19XRUFLKSB7XG4gIHZhciBCYXNlID0gZ2xvYmFsW05BTUVdO1xuICB2YXIgQyA9IEJhc2U7XG4gIHZhciBBRERFUiA9IElTX01BUCA/ICdzZXQnIDogJ2FkZCc7XG4gIHZhciBwcm90byA9IEMgJiYgQy5wcm90b3R5cGU7XG4gIHZhciBPID0ge307XG4gIHZhciBmaXhNZXRob2QgPSBmdW5jdGlvbiAoS0VZKSB7XG4gICAgdmFyIGZuID0gcHJvdG9bS0VZXTtcbiAgICByZWRlZmluZShwcm90bywgS0VZLFxuICAgICAgS0VZID09ICdkZWxldGUnID8gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdoYXMnID8gZnVuY3Rpb24gaGFzKGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdnZXQnID8gZnVuY3Rpb24gZ2V0KGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gdW5kZWZpbmVkIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnYWRkJyA/IGZ1bmN0aW9uIGFkZChhKSB7IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTsgcmV0dXJuIHRoaXM7IH1cbiAgICAgICAgOiBmdW5jdGlvbiBzZXQoYSwgYikgeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSwgYik7IHJldHVybiB0aGlzOyB9XG4gICAgKTtcbiAgfTtcbiAgaWYgKHR5cGVvZiBDICE9ICdmdW5jdGlvbicgfHwgIShJU19XRUFLIHx8IHByb3RvLmZvckVhY2ggJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgQygpLmVudHJpZXMoKS5uZXh0KCk7XG4gIH0pKSkge1xuICAgIC8vIGNyZWF0ZSBjb2xsZWN0aW9uIGNvbnN0cnVjdG9yXG4gICAgQyA9IGNvbW1vbi5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwgbWV0aG9kcyk7XG4gICAgbWV0YS5ORUVEID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBuZXcgQygpO1xuICAgIC8vIGVhcmx5IGltcGxlbWVudGF0aW9ucyBub3Qgc3VwcG9ydHMgY2hhaW5pbmdcbiAgICB2YXIgSEFTTlRfQ0hBSU5JTkcgPSBpbnN0YW5jZVtBRERFUl0oSVNfV0VBSyA/IHt9IDogLTAsIDEpICE9IGluc3RhbmNlO1xuICAgIC8vIFY4IH4gIENocm9taXVtIDQwLSB3ZWFrLWNvbGxlY3Rpb25zIHRocm93cyBvbiBwcmltaXRpdmVzLCBidXQgc2hvdWxkIHJldHVybiBmYWxzZVxuICAgIHZhciBUSFJPV1NfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgaW5zdGFuY2UuaGFzKDEpOyB9KTtcbiAgICAvLyBtb3N0IGVhcmx5IGltcGxlbWVudGF0aW9ucyBkb2Vzbid0IHN1cHBvcnRzIGl0ZXJhYmxlcywgbW9zdCBtb2Rlcm4gLSBub3QgY2xvc2UgaXQgY29ycmVjdGx5XG4gICAgdmFyIEFDQ0VQVF9JVEVSQUJMRVMgPSAkaXRlckRldGVjdChmdW5jdGlvbiAoaXRlcikgeyBuZXcgQyhpdGVyKTsgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgLy8gZm9yIGVhcmx5IGltcGxlbWVudGF0aW9ucyAtMCBhbmQgKzAgbm90IHRoZSBzYW1lXG4gICAgdmFyIEJVR0dZX1pFUk8gPSAhSVNfV0VBSyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBWOCB+IENocm9taXVtIDQyLSBmYWlscyBvbmx5IHdpdGggNSsgZWxlbWVudHNcbiAgICAgIHZhciAkaW5zdGFuY2UgPSBuZXcgQygpO1xuICAgICAgdmFyIGluZGV4ID0gNTtcbiAgICAgIHdoaWxlIChpbmRleC0tKSAkaW5zdGFuY2VbQURERVJdKGluZGV4LCBpbmRleCk7XG4gICAgICByZXR1cm4gISRpbnN0YW5jZS5oYXMoLTApO1xuICAgIH0pO1xuICAgIGlmICghQUNDRVBUX0lURVJBQkxFUykge1xuICAgICAgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRhcmdldCwgaXRlcmFibGUpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0YXJnZXQsIEMsIE5BTUUpO1xuICAgICAgICB2YXIgdGhhdCA9IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlKCksIHRhcmdldCwgQyk7XG4gICAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICAgICAgcmV0dXJuIHRoYXQ7XG4gICAgICB9KTtcbiAgICAgIEMucHJvdG90eXBlID0gcHJvdG87XG4gICAgICBwcm90by5jb25zdHJ1Y3RvciA9IEM7XG4gICAgfVxuICAgIGlmIChUSFJPV1NfT05fUFJJTUlUSVZFUyB8fCBCVUdHWV9aRVJPKSB7XG4gICAgICBmaXhNZXRob2QoJ2RlbGV0ZScpO1xuICAgICAgZml4TWV0aG9kKCdoYXMnKTtcbiAgICAgIElTX01BUCAmJiBmaXhNZXRob2QoJ2dldCcpO1xuICAgIH1cbiAgICBpZiAoQlVHR1lfWkVSTyB8fCBIQVNOVF9DSEFJTklORykgZml4TWV0aG9kKEFEREVSKTtcbiAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIHNob3VsZCBub3QgY29udGFpbnMgLmNsZWFyIG1ldGhvZFxuICAgIGlmIChJU19XRUFLICYmIHByb3RvLmNsZWFyKSBkZWxldGUgcHJvdG8uY2xlYXI7XG4gIH1cblxuICBzZXRUb1N0cmluZ1RhZyhDLCBOQU1FKTtcblxuICBPW05BTUVdID0gQztcbiAgJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoQyAhPSBCYXNlKSwgTyk7XG5cbiAgaWYgKCFJU19XRUFLKSBjb21tb24uc2V0U3Ryb25nKEMsIE5BTUUsIElTX01BUCk7XG5cbiAgcmV0dXJuIEM7XG59O1xuXG59LHtcIjEwMVwiOjEwMSxcIjMzXCI6MzMsXCIzNVwiOjM1LFwiMzlcIjozOSxcIjQwXCI6NDAsXCI0NVwiOjQ1LFwiNTFcIjo1MSxcIjU2XCI6NTYsXCI2XCI6NixcIjY2XCI6NjYsXCI5M1wiOjkzLFwiOTRcIjo5NH1dLDIzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7IHZlcnNpb246ICcyLjUuMCcgfTtcbmlmICh0eXBlb2YgX19lID09ICdudW1iZXInKSBfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG5cbn0se31dLDI0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcbnZhciAkZGVmaW5lUHJvcGVydHkgPSBfZGVyZXFfKDcyKTtcbnZhciBjcmVhdGVEZXNjID0gX2RlcmVxXyg5Mik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgaW5kZXgsIHZhbHVlKSB7XG4gIGlmIChpbmRleCBpbiBvYmplY3QpICRkZWZpbmVQcm9wZXJ0eS5mKG9iamVjdCwgaW5kZXgsIGNyZWF0ZURlc2MoMCwgdmFsdWUpKTtcbiAgZWxzZSBvYmplY3RbaW5kZXhdID0gdmFsdWU7XG59O1xuXG59LHtcIjcyXCI6NzIsXCI5MlwiOjkyfV0sMjU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG52YXIgYUZ1bmN0aW9uID0gX2RlcmVxXygzKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcblxufSx7XCIzXCI6M31dLDI2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0Jztcbi8vIDIwLjMuNC4zNiAvIDE1LjkuNS40MyBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZygpXG52YXIgZmFpbHMgPSBfZGVyZXFfKDM1KTtcbnZhciBnZXRUaW1lID0gRGF0ZS5wcm90b3R5cGUuZ2V0VGltZTtcbnZhciAkdG9JU09TdHJpbmcgPSBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZztcblxudmFyIGx6ID0gZnVuY3Rpb24gKG51bSkge1xuICByZXR1cm4gbnVtID4gOSA/IG51bSA6ICcwJyArIG51bTtcbn07XG5cbi8vIFBoYW50b21KUyAvIG9sZCBXZWJLaXQgaGFzIGEgYnJva2VuIGltcGxlbWVudGF0aW9uc1xubW9kdWxlLmV4cG9ydHMgPSAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJHRvSVNPU3RyaW5nLmNhbGwobmV3IERhdGUoLTVlMTMgLSAxKSkgIT0gJzAzODUtMDctMjVUMDc6MDY6MzkuOTk5Wic7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAkdG9JU09TdHJpbmcuY2FsbChuZXcgRGF0ZShOYU4pKTtcbn0pKSA/IGZ1bmN0aW9uIHRvSVNPU3RyaW5nKCkge1xuICBpZiAoIWlzRmluaXRlKGdldFRpbWUuY2FsbCh0aGlzKSkpIHRocm93IFJhbmdlRXJyb3IoJ0ludmFsaWQgdGltZSB2YWx1ZScpO1xuICB2YXIgZCA9IHRoaXM7XG4gIHZhciB5ID0gZC5nZXRVVENGdWxsWWVhcigpO1xuICB2YXIgbSA9IGQuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7XG4gIHZhciBzID0geSA8IDAgPyAnLScgOiB5ID4gOTk5OSA/ICcrJyA6ICcnO1xuICByZXR1cm4gcyArICgnMDAwMDAnICsgTWF0aC5hYnMoeSkpLnNsaWNlKHMgPyAtNiA6IC00KSArXG4gICAgJy0nICsgbHooZC5nZXRVVENNb250aCgpICsgMSkgKyAnLScgKyBseihkLmdldFVUQ0RhdGUoKSkgK1xuICAgICdUJyArIGx6KGQuZ2V0VVRDSG91cnMoKSkgKyAnOicgKyBseihkLmdldFVUQ01pbnV0ZXMoKSkgK1xuICAgICc6JyArIGx6KGQuZ2V0VVRDU2Vjb25kcygpKSArICcuJyArIChtID4gOTkgPyBtIDogJzAnICsgbHoobSkpICsgJ1onO1xufSA6ICR0b0lTT1N0cmluZztcblxufSx7XCIzNVwiOjM1fV0sMjc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xudmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTtcbnZhciB0b1ByaW1pdGl2ZSA9IF9kZXJlcV8oMTIwKTtcbnZhciBOVU1CRVIgPSAnbnVtYmVyJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaGludCkge1xuICBpZiAoaGludCAhPT0gJ3N0cmluZycgJiYgaGludCAhPT0gTlVNQkVSICYmIGhpbnQgIT09ICdkZWZhdWx0JykgdGhyb3cgVHlwZUVycm9yKCdJbmNvcnJlY3QgaGludCcpO1xuICByZXR1cm4gdG9QcmltaXRpdmUoYW5PYmplY3QodGhpcyksIGhpbnQgIT0gTlVNQkVSKTtcbn07XG5cbn0se1wiMTIwXCI6MTIwLFwiN1wiOjd9XSwyODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuXG59LHt9XSwyOTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFfZGVyZXFfKDM1KShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG5cbn0se1wiMzVcIjozNX1dLDMwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBpc09iamVjdCA9IF9kZXJlcV8oNTEpO1xudmFyIGRvY3VtZW50ID0gX2RlcmVxXyg0MCkuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuXG59LHtcIjQwXCI6NDAsXCI1MVwiOjUxfV0sMzE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7XG5cbn0se31dLDMyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGFsbCBlbnVtZXJhYmxlIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBzeW1ib2xzXG52YXIgZ2V0S2V5cyA9IF9kZXJlcV8oODEpO1xudmFyIGdPUFMgPSBfZGVyZXFfKDc4KTtcbnZhciBwSUUgPSBfZGVyZXFfKDgyKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciByZXN1bHQgPSBnZXRLZXlzKGl0KTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIGlmIChnZXRTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBnZXRTeW1ib2xzKGl0KTtcbiAgICB2YXIgaXNFbnVtID0gcElFLmY7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKHN5bWJvbHMubGVuZ3RoID4gaSkgaWYgKGlzRW51bS5jYWxsKGl0LCBrZXkgPSBzeW1ib2xzW2krK10pKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuXG59LHtcIjc4XCI6NzgsXCI4MVwiOjgxLFwiODJcIjo4Mn1dLDMzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBnbG9iYWwgPSBfZGVyZXFfKDQwKTtcbnZhciBjb3JlID0gX2RlcmVxXygyMyk7XG52YXIgaGlkZSA9IF9kZXJlcV8oNDIpO1xudmFyIHJlZGVmaW5lID0gX2RlcmVxXyg5NCk7XG52YXIgY3R4ID0gX2RlcmVxXygyNSk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24gKHR5cGUsIG5hbWUsIHNvdXJjZSkge1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRjtcbiAgdmFyIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0Lkc7XG4gIHZhciBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TO1xuICB2YXIgSVNfUFJPVE8gPSB0eXBlICYgJGV4cG9ydC5QO1xuICB2YXIgSVNfQklORCA9IHR5cGUgJiAkZXhwb3J0LkI7XG4gIHZhciB0YXJnZXQgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gfHwgKGdsb2JhbFtuYW1lXSA9IHt9KSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG4gIHZhciBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXSB8fCAoZXhwb3J0c1tQUk9UT1RZUEVdID0ge30pO1xuICB2YXIga2V5LCBvd24sIG91dCwgZXhwO1xuICBpZiAoSVNfR0xPQkFMKSBzb3VyY2UgPSBuYW1lO1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gKG93biA/IHRhcmdldCA6IHNvdXJjZSlba2V5XTtcbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIGV4cCA9IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4dGVuZCBnbG9iYWxcbiAgICBpZiAodGFyZ2V0KSByZWRlZmluZSh0YXJnZXQsIGtleSwgb3V0LCB0eXBlICYgJGV4cG9ydC5VKTtcbiAgICAvLyBleHBvcnRcbiAgICBpZiAoZXhwb3J0c1trZXldICE9IG91dCkgaGlkZShleHBvcnRzLCBrZXksIGV4cCk7XG4gICAgaWYgKElTX1BST1RPICYmIGV4cFByb3RvW2tleV0gIT0gb3V0KSBleHBQcm90b1trZXldID0gb3V0O1xuICB9XG59O1xuZ2xvYmFsLmNvcmUgPSBjb3JlO1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAgLy8gZm9yY2VkXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAgLy8gcHJvdG9cbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG4kZXhwb3J0LlUgPSA2NDsgIC8vIHNhZmVcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YFxubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuXG59LHtcIjIzXCI6MjMsXCIyNVwiOjI1LFwiNDBcIjo0MCxcIjQyXCI6NDIsXCI5NFwiOjk0fV0sMzQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyIE1BVENIID0gX2RlcmVxXygxMjgpKCdtYXRjaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZKSB7XG4gIHZhciByZSA9IC8uLztcbiAgdHJ5IHtcbiAgICAnLy4vJ1tLRVldKHJlKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRyeSB7XG4gICAgICByZVtNQVRDSF0gPSBmYWxzZTtcbiAgICAgIHJldHVybiAhJy8uLydbS0VZXShyZSk7XG4gICAgfSBjYXRjaCAoZikgeyAvKiBlbXB0eSAqLyB9XG4gIH0gcmV0dXJuIHRydWU7XG59O1xuXG59LHtcIjEyOFwiOjEyOH1dLDM1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcblxufSx7fV0sMzY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xudmFyIGhpZGUgPSBfZGVyZXFfKDQyKTtcbnZhciByZWRlZmluZSA9IF9kZXJlcV8oOTQpO1xudmFyIGZhaWxzID0gX2RlcmVxXygzNSk7XG52YXIgZGVmaW5lZCA9IF9kZXJlcV8oMjgpO1xudmFyIHdrcyA9IF9kZXJlcV8oMTI4KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBsZW5ndGgsIGV4ZWMpIHtcbiAgdmFyIFNZTUJPTCA9IHdrcyhLRVkpO1xuICB2YXIgZm5zID0gZXhlYyhkZWZpbmVkLCBTWU1CT0wsICcnW0tFWV0pO1xuICB2YXIgc3RyZm4gPSBmbnNbMF07XG4gIHZhciByeGZuID0gZm5zWzFdO1xuICBpZiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciBPID0ge307XG4gICAgT1tTWU1CT0xdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfTtcbiAgICByZXR1cm4gJydbS0VZXShPKSAhPSA3O1xuICB9KSkge1xuICAgIHJlZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIEtFWSwgc3RyZm4pO1xuICAgIGhpZGUoUmVnRXhwLnByb3RvdHlwZSwgU1lNQk9MLCBsZW5ndGggPT0gMlxuICAgICAgLy8gMjEuMi41LjggUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdKHN0cmluZywgcmVwbGFjZVZhbHVlKVxuICAgICAgLy8gMjEuMi41LjExIFJlZ0V4cC5wcm90b3R5cGVbQEBzcGxpdF0oc3RyaW5nLCBsaW1pdClcbiAgICAgID8gZnVuY3Rpb24gKHN0cmluZywgYXJnKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzLCBhcmcpOyB9XG4gICAgICAvLyAyMS4yLjUuNiBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdKHN0cmluZylcbiAgICAgIC8vIDIxLjIuNS45IFJlZ0V4cC5wcm90b3R5cGVbQEBzZWFyY2hdKHN0cmluZylcbiAgICAgIDogZnVuY3Rpb24gKHN0cmluZykgeyByZXR1cm4gcnhmbi5jYWxsKHN0cmluZywgdGhpcyk7IH1cbiAgICApO1xuICB9XG59O1xuXG59LHtcIjEyOFwiOjEyOCxcIjI4XCI6MjgsXCIzNVwiOjM1LFwiNDJcIjo0MixcIjk0XCI6OTR9XSwzNzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG4vLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFnc1xudmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IGFuT2JqZWN0KHRoaXMpO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGlmICh0aGF0Lmdsb2JhbCkgcmVzdWx0ICs9ICdnJztcbiAgaWYgKHRoYXQuaWdub3JlQ2FzZSkgcmVzdWx0ICs9ICdpJztcbiAgaWYgKHRoYXQubXVsdGlsaW5lKSByZXN1bHQgKz0gJ20nO1xuICBpZiAodGhhdC51bmljb2RlKSByZXN1bHQgKz0gJ3UnO1xuICBpZiAodGhhdC5zdGlja3kpIHJlc3VsdCArPSAneSc7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG59LHtcIjdcIjo3fV0sMzg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtRmxhdHRlbkludG9BcnJheVxudmFyIGlzQXJyYXkgPSBfZGVyZXFfKDQ5KTtcbnZhciBpc09iamVjdCA9IF9kZXJlcV8oNTEpO1xudmFyIHRvTGVuZ3RoID0gX2RlcmVxXygxMTgpO1xudmFyIGN0eCA9IF9kZXJlcV8oMjUpO1xudmFyIElTX0NPTkNBVF9TUFJFQURBQkxFID0gX2RlcmVxXygxMjgpKCdpc0NvbmNhdFNwcmVhZGFibGUnKTtcblxuZnVuY3Rpb24gZmxhdHRlbkludG9BcnJheSh0YXJnZXQsIG9yaWdpbmFsLCBzb3VyY2UsIHNvdXJjZUxlbiwgc3RhcnQsIGRlcHRoLCBtYXBwZXIsIHRoaXNBcmcpIHtcbiAgdmFyIHRhcmdldEluZGV4ID0gc3RhcnQ7XG4gIHZhciBzb3VyY2VJbmRleCA9IDA7XG4gIHZhciBtYXBGbiA9IG1hcHBlciA/IGN0eChtYXBwZXIsIHRoaXNBcmcsIDMpIDogZmFsc2U7XG4gIHZhciBlbGVtZW50LCBzcHJlYWRhYmxlO1xuXG4gIHdoaWxlIChzb3VyY2VJbmRleCA8IHNvdXJjZUxlbikge1xuICAgIGlmIChzb3VyY2VJbmRleCBpbiBzb3VyY2UpIHtcbiAgICAgIGVsZW1lbnQgPSBtYXBGbiA/IG1hcEZuKHNvdXJjZVtzb3VyY2VJbmRleF0sIHNvdXJjZUluZGV4LCBvcmlnaW5hbCkgOiBzb3VyY2Vbc291cmNlSW5kZXhdO1xuXG4gICAgICBzcHJlYWRhYmxlID0gZmFsc2U7XG4gICAgICBpZiAoaXNPYmplY3QoZWxlbWVudCkpIHtcbiAgICAgICAgc3ByZWFkYWJsZSA9IGVsZW1lbnRbSVNfQ09OQ0FUX1NQUkVBREFCTEVdO1xuICAgICAgICBzcHJlYWRhYmxlID0gc3ByZWFkYWJsZSAhPT0gdW5kZWZpbmVkID8gISFzcHJlYWRhYmxlIDogaXNBcnJheShlbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNwcmVhZGFibGUgJiYgZGVwdGggPiAwKSB7XG4gICAgICAgIHRhcmdldEluZGV4ID0gZmxhdHRlbkludG9BcnJheSh0YXJnZXQsIG9yaWdpbmFsLCBlbGVtZW50LCB0b0xlbmd0aChlbGVtZW50Lmxlbmd0aCksIHRhcmdldEluZGV4LCBkZXB0aCAtIDEpIC0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0YXJnZXRJbmRleCA+PSAweDFmZmZmZmZmZmZmZmZmKSB0aHJvdyBUeXBlRXJyb3IoKTtcbiAgICAgICAgdGFyZ2V0W3RhcmdldEluZGV4XSA9IGVsZW1lbnQ7XG4gICAgICB9XG5cbiAgICAgIHRhcmdldEluZGV4Kys7XG4gICAgfVxuICAgIHNvdXJjZUluZGV4Kys7XG4gIH1cbiAgcmV0dXJuIHRhcmdldEluZGV4O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZsYXR0ZW5JbnRvQXJyYXk7XG5cbn0se1wiMTE4XCI6MTE4LFwiMTI4XCI6MTI4LFwiMjVcIjoyNSxcIjQ5XCI6NDksXCI1MVwiOjUxfV0sMzk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyIGN0eCA9IF9kZXJlcV8oMjUpO1xudmFyIGNhbGwgPSBfZGVyZXFfKDUzKTtcbnZhciBpc0FycmF5SXRlciA9IF9kZXJlcV8oNDgpO1xudmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTtcbnZhciB0b0xlbmd0aCA9IF9kZXJlcV8oMTE4KTtcbnZhciBnZXRJdGVyRm4gPSBfZGVyZXFfKDEyOSk7XG52YXIgQlJFQUsgPSB7fTtcbnZhciBSRVRVUk4gPSB7fTtcbnZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmFibGUsIGVudHJpZXMsIGZuLCB0aGF0LCBJVEVSQVRPUikge1xuICB2YXIgaXRlckZuID0gSVRFUkFUT1IgPyBmdW5jdGlvbiAoKSB7IHJldHVybiBpdGVyYWJsZTsgfSA6IGdldEl0ZXJGbihpdGVyYWJsZSk7XG4gIHZhciBmID0gY3R4KGZuLCB0aGF0LCBlbnRyaWVzID8gMiA6IDEpO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoLCBzdGVwLCBpdGVyYXRvciwgcmVzdWx0O1xuICBpZiAodHlwZW9mIGl0ZXJGbiAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXRlcmFibGUgKyAnIGlzIG5vdCBpdGVyYWJsZSEnKTtcbiAgLy8gZmFzdCBjYXNlIGZvciBhcnJheXMgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yXG4gIGlmIChpc0FycmF5SXRlcihpdGVyRm4pKSBmb3IgKGxlbmd0aCA9IHRvTGVuZ3RoKGl0ZXJhYmxlLmxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgcmVzdWx0ID0gZW50cmllcyA/IGYoYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pIDogZihpdGVyYWJsZVtpbmRleF0pO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9IGVsc2UgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKGl0ZXJhYmxlKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOykge1xuICAgIHJlc3VsdCA9IGNhbGwoaXRlcmF0b3IsIGYsIHN0ZXAudmFsdWUsIGVudHJpZXMpO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9XG59O1xuZXhwb3J0cy5CUkVBSyA9IEJSRUFLO1xuZXhwb3J0cy5SRVRVUk4gPSBSRVRVUk47XG5cbn0se1wiMTE4XCI6MTE4LFwiMTI5XCI6MTI5LFwiMjVcIjoyNSxcIjQ4XCI6NDgsXCI1M1wiOjUzLFwiN1wiOjd9XSw0MDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG5cbn0se31dLDQxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG5cbn0se31dLDQyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBkUCA9IF9kZXJlcV8oNzIpO1xudmFyIGNyZWF0ZURlc2MgPSBfZGVyZXFfKDkyKTtcbm1vZHVsZS5leHBvcnRzID0gX2RlcmVxXygyOSkgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkUC5mKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcblxufSx7XCIyOVwiOjI5LFwiNzJcIjo3MixcIjkyXCI6OTJ9XSw0MzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgZG9jdW1lbnQgPSBfZGVyZXFfKDQwKS5kb2N1bWVudDtcbm1vZHVsZS5leHBvcnRzID0gZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG59LHtcIjQwXCI6NDB9XSw0NDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9ICFfZGVyZXFfKDI5KSAmJiAhX2RlcmVxXygzNSkoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KF9kZXJlcV8oMzApKCdkaXYnKSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcblxufSx7XCIyOVwiOjI5LFwiMzBcIjozMCxcIjM1XCI6MzV9XSw0NTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgaXNPYmplY3QgPSBfZGVyZXFfKDUxKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IF9kZXJlcV8oOTkpLnNldDtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIHRhcmdldCwgQykge1xuICB2YXIgUyA9IHRhcmdldC5jb25zdHJ1Y3RvcjtcbiAgdmFyIFA7XG4gIGlmIChTICE9PSBDICYmIHR5cGVvZiBTID09ICdmdW5jdGlvbicgJiYgKFAgPSBTLnByb3RvdHlwZSkgIT09IEMucHJvdG90eXBlICYmIGlzT2JqZWN0KFApICYmIHNldFByb3RvdHlwZU9mKSB7XG4gICAgc2V0UHJvdG90eXBlT2YodGhhdCwgUCk7XG4gIH0gcmV0dXJuIHRoYXQ7XG59O1xuXG59LHtcIjUxXCI6NTEsXCI5OVwiOjk5fV0sNDY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gZmFzdCBhcHBseSwgaHR0cDovL2pzcGVyZi5sbmtpdC5jb20vZmFzdC1hcHBseS81XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgYXJncywgdGhhdCkge1xuICB2YXIgdW4gPSB0aGF0ID09PSB1bmRlZmluZWQ7XG4gIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IHJldHVybiB1biA/IGZuKClcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCk7XG4gICAgY2FzZSAxOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgIGNhc2UgMzogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgY2FzZSA0OiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgfSByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJncyk7XG59O1xuXG59LHt9XSw0NzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xudmFyIGNvZiA9IF9kZXJlcV8oMTgpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKSA/IE9iamVjdCA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7XG59O1xuXG59LHtcIjE4XCI6MTh9XSw0ODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG52YXIgSXRlcmF0b3JzID0gX2RlcmVxXyg1OCk7XG52YXIgSVRFUkFUT1IgPSBfZGVyZXFfKDEyOCkoJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b1tJVEVSQVRPUl0gPT09IGl0KTtcbn07XG5cbn0se1wiMTI4XCI6MTI4LFwiNThcIjo1OH1dLDQ5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDcuMi4yIElzQXJyYXkoYXJndW1lbnQpXG52YXIgY29mID0gX2RlcmVxXygxOCk7XG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgcmV0dXJuIGNvZihhcmcpID09ICdBcnJheSc7XG59O1xuXG59LHtcIjE4XCI6MTh9XSw1MDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMC4xLjIuMyBOdW1iZXIuaXNJbnRlZ2VyKG51bWJlcilcbnZhciBpc09iamVjdCA9IF9kZXJlcV8oNTEpO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNJbnRlZ2VyKGl0KSB7XG4gIHJldHVybiAhaXNPYmplY3QoaXQpICYmIGlzRmluaXRlKGl0KSAmJiBmbG9vcihpdCkgPT09IGl0O1xufTtcblxufSx7XCI1MVwiOjUxfV0sNTE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG5cbn0se31dLDUyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDcuMi44IElzUmVnRXhwKGFyZ3VtZW50KVxudmFyIGlzT2JqZWN0ID0gX2RlcmVxXyg1MSk7XG52YXIgY29mID0gX2RlcmVxXygxOCk7XG52YXIgTUFUQ0ggPSBfZGVyZXFfKDEyOCkoJ21hdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgaXNSZWdFeHA7XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgKChpc1JlZ0V4cCA9IGl0W01BVENIXSkgIT09IHVuZGVmaW5lZCA/ICEhaXNSZWdFeHAgOiBjb2YoaXQpID09ICdSZWdFeHAnKTtcbn07XG5cbn0se1wiMTI4XCI6MTI4LFwiMThcIjoxOCxcIjUxXCI6NTF9XSw1MzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXG52YXIgYW5PYmplY3QgPSBfZGVyZXFfKDcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIGZuLCB2YWx1ZSwgZW50cmllcykge1xuICB0cnkge1xuICAgIHJldHVybiBlbnRyaWVzID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB2YXIgcmV0ID0gaXRlcmF0b3JbJ3JldHVybiddO1xuICAgIGlmIChyZXQgIT09IHVuZGVmaW5lZCkgYW5PYmplY3QocmV0LmNhbGwoaXRlcmF0b3IpKTtcbiAgICB0aHJvdyBlO1xuICB9XG59O1xuXG59LHtcIjdcIjo3fV0sNTQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xudmFyIGNyZWF0ZSA9IF9kZXJlcV8oNzEpO1xudmFyIGRlc2NyaXB0b3IgPSBfZGVyZXFfKDkyKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IF9kZXJlcV8oMTAxKTtcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxuX2RlcmVxXyg0MikoSXRlcmF0b3JQcm90b3R5cGUsIF9kZXJlcV8oMTI4KSgnaXRlcmF0b3InKSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KSB7XG4gIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBkZXNjcmlwdG9yKDEsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTtcbn07XG5cbn0se1wiMTAxXCI6MTAxLFwiMTI4XCI6MTI4LFwiNDJcIjo0MixcIjcxXCI6NzEsXCI5MlwiOjkyfV0sNTU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSBfZGVyZXFfKDYwKTtcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgcmVkZWZpbmUgPSBfZGVyZXFfKDk0KTtcbnZhciBoaWRlID0gX2RlcmVxXyg0Mik7XG52YXIgaGFzID0gX2RlcmVxXyg0MSk7XG52YXIgSXRlcmF0b3JzID0gX2RlcmVxXyg1OCk7XG52YXIgJGl0ZXJDcmVhdGUgPSBfZGVyZXFfKDU0KTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IF9kZXJlcV8oMTAxKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IF9kZXJlcV8oNzkpO1xudmFyIElURVJBVE9SID0gX2RlcmVxXygxMjgpKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpOyAvLyBTYWZhcmkgaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG52YXIgRkZfSVRFUkFUT1IgPSAnQEBpdGVyYXRvcic7XG52YXIgS0VZUyA9ICdrZXlzJztcbnZhciBWQUxVRVMgPSAndmFsdWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgJGl0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gKGtpbmQpIHtcbiAgICBpZiAoIUJVR0dZICYmIGtpbmQgaW4gcHJvdG8pIHJldHVybiBwcm90b1traW5kXTtcbiAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICB9O1xuICB2YXIgVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTO1xuICB2YXIgVkFMVUVTX0JVRyA9IGZhbHNlO1xuICB2YXIgcHJvdG8gPSBCYXNlLnByb3RvdHlwZTtcbiAgdmFyICRuYXRpdmUgPSBwcm90b1tJVEVSQVRPUl0gfHwgcHJvdG9bRkZfSVRFUkFUT1JdIHx8IERFRkFVTFQgJiYgcHJvdG9bREVGQVVMVF07XG4gIHZhciAkZGVmYXVsdCA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpO1xuICB2YXIgJGVudHJpZXMgPSBERUZBVUxUID8gIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpIDogdW5kZWZpbmVkO1xuICB2YXIgJGFueU5hdGl2ZSA9IE5BTUUgPT0gJ0FycmF5JyA/IHByb3RvLmVudHJpZXMgfHwgJG5hdGl2ZSA6ICRuYXRpdmU7XG4gIHZhciBtZXRob2RzLCBrZXksIEl0ZXJhdG9yUHJvdG90eXBlO1xuICAvLyBGaXggbmF0aXZlXG4gIGlmICgkYW55TmF0aXZlKSB7XG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UoKSkpO1xuICAgIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcbiAgICAgIC8vIGZpeCBmb3Igc29tZSBvbGQgZW5naW5lc1xuICAgICAgaWYgKCFMSUJSQVJZICYmICFoYXMoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SKSkgaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgIH1cbiAgfVxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChERUZfVkFMVUVTICYmICRuYXRpdmUgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBWQUxVRVNfQlVHID0gdHJ1ZTtcbiAgICAkZGVmYXVsdCA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuICRuYXRpdmUuY2FsbCh0aGlzKTsgfTtcbiAgfVxuICAvLyBEZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKSB7XG4gICAgaGlkZShwcm90bywgSVRFUkFUT1IsICRkZWZhdWx0KTtcbiAgfVxuICAvLyBQbHVnIGZvciBsaWJyYXJ5XG4gIEl0ZXJhdG9yc1tOQU1FXSA9ICRkZWZhdWx0O1xuICBJdGVyYXRvcnNbVEFHXSA9IHJldHVyblRoaXM7XG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6ICRlbnRyaWVzXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKGtleSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoIShrZXkgaW4gcHJvdG8pKSByZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pO1xuICAgIH0gZWxzZSAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChCVUdHWSB8fCBWQUxVRVNfQlVHKSwgTkFNRSwgbWV0aG9kcyk7XG4gIH1cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuXG59LHtcIjEwMVwiOjEwMSxcIjEyOFwiOjEyOCxcIjMzXCI6MzMsXCI0MVwiOjQxLFwiNDJcIjo0MixcIjU0XCI6NTQsXCI1OFwiOjU4LFwiNjBcIjo2MCxcIjc5XCI6NzksXCI5NFwiOjk0fV0sNTY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyIElURVJBVE9SID0gX2RlcmVxXygxMjgpKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgcml0ZXIgPSBbN11bSVRFUkFUT1JdKCk7XG4gIHJpdGVyWydyZXR1cm4nXSA9IGZ1bmN0aW9uICgpIHsgU0FGRV9DTE9TSU5HID0gdHJ1ZTsgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgQXJyYXkuZnJvbShyaXRlciwgZnVuY3Rpb24gKCkgeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBza2lwQ2xvc2luZykge1xuICBpZiAoIXNraXBDbG9zaW5nICYmICFTQUZFX0NMT1NJTkcpIHJldHVybiBmYWxzZTtcbiAgdmFyIHNhZmUgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gWzddO1xuICAgIHZhciBpdGVyID0gYXJyW0lURVJBVE9SXSgpO1xuICAgIGl0ZXIubmV4dCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHsgZG9uZTogc2FmZSA9IHRydWUgfTsgfTtcbiAgICBhcnJbSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcjsgfTtcbiAgICBleGVjKGFycik7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gc2FmZTtcbn07XG5cbn0se1wiMTI4XCI6MTI4fV0sNTc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZG9uZSwgdmFsdWUpIHtcbiAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlLCBkb25lOiAhIWRvbmUgfTtcbn07XG5cbn0se31dLDU4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbm1vZHVsZS5leHBvcnRzID0ge307XG5cbn0se31dLDU5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBnZXRLZXlzID0gX2RlcmVxXyg4MSk7XG52YXIgdG9JT2JqZWN0ID0gX2RlcmVxXygxMTcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBlbCkge1xuICB2YXIgTyA9IHRvSU9iamVjdChvYmplY3QpO1xuICB2YXIga2V5cyA9IGdldEtleXMoTyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSBpZiAoT1trZXkgPSBrZXlzW2luZGV4KytdXSA9PT0gZWwpIHJldHVybiBrZXk7XG59O1xuXG59LHtcIjExN1wiOjExNyxcIjgxXCI6ODF9XSw2MDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuXG59LHt9XSw2MTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMC4yLjIuMTQgTWF0aC5leHBtMSh4KVxudmFyICRleHBtMSA9IE1hdGguZXhwbTE7XG5tb2R1bGUuZXhwb3J0cyA9ICghJGV4cG0xXG4gIC8vIE9sZCBGRiBidWdcbiAgfHwgJGV4cG0xKDEwKSA+IDIyMDI1LjQ2NTc5NDgwNjcxOSB8fCAkZXhwbTEoMTApIDwgMjIwMjUuNDY1Nzk0ODA2NzE2NTE2OFxuICAvLyBUb3IgQnJvd3NlciBidWdcbiAgfHwgJGV4cG0xKC0yZS0xNykgIT0gLTJlLTE3XG4pID8gZnVuY3Rpb24gZXhwbTEoeCkge1xuICByZXR1cm4gKHggPSAreCkgPT0gMCA/IHggOiB4ID4gLTFlLTYgJiYgeCA8IDFlLTYgPyB4ICsgeCAqIHggLyAyIDogTWF0aC5leHAoeCkgLSAxO1xufSA6ICRleHBtMTtcblxufSx7fV0sNjI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjAuMi4yLjE2IE1hdGguZnJvdW5kKHgpXG52YXIgc2lnbiA9IF9kZXJlcV8oNjUpO1xudmFyIHBvdyA9IE1hdGgucG93O1xudmFyIEVQU0lMT04gPSBwb3coMiwgLTUyKTtcbnZhciBFUFNJTE9OMzIgPSBwb3coMiwgLTIzKTtcbnZhciBNQVgzMiA9IHBvdygyLCAxMjcpICogKDIgLSBFUFNJTE9OMzIpO1xudmFyIE1JTjMyID0gcG93KDIsIC0xMjYpO1xuXG52YXIgcm91bmRUaWVzVG9FdmVuID0gZnVuY3Rpb24gKG4pIHtcbiAgcmV0dXJuIG4gKyAxIC8gRVBTSUxPTiAtIDEgLyBFUFNJTE9OO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLmZyb3VuZCB8fCBmdW5jdGlvbiBmcm91bmQoeCkge1xuICB2YXIgJGFicyA9IE1hdGguYWJzKHgpO1xuICB2YXIgJHNpZ24gPSBzaWduKHgpO1xuICB2YXIgYSwgcmVzdWx0O1xuICBpZiAoJGFicyA8IE1JTjMyKSByZXR1cm4gJHNpZ24gKiByb3VuZFRpZXNUb0V2ZW4oJGFicyAvIE1JTjMyIC8gRVBTSUxPTjMyKSAqIE1JTjMyICogRVBTSUxPTjMyO1xuICBhID0gKDEgKyBFUFNJTE9OMzIgLyBFUFNJTE9OKSAqICRhYnM7XG4gIHJlc3VsdCA9IGEgLSAoYSAtICRhYnMpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIGlmIChyZXN1bHQgPiBNQVgzMiB8fCByZXN1bHQgIT0gcmVzdWx0KSByZXR1cm4gJHNpZ24gKiBJbmZpbml0eTtcbiAgcmV0dXJuICRzaWduICogcmVzdWx0O1xufTtcblxufSx7XCI2NVwiOjY1fV0sNjM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjAuMi4yLjIwIE1hdGgubG9nMXAoeClcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5sb2cxcCB8fCBmdW5jdGlvbiBsb2cxcCh4KSB7XG4gIHJldHVybiAoeCA9ICt4KSA+IC0xZS04ICYmIHggPCAxZS04ID8geCAtIHggKiB4IC8gMiA6IE1hdGgubG9nKDEgKyB4KTtcbn07XG5cbn0se31dLDY0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbm1vZHVsZS5leHBvcnRzID0gTWF0aC5zY2FsZSB8fCBmdW5jdGlvbiBzY2FsZSh4LCBpbkxvdywgaW5IaWdoLCBvdXRMb3csIG91dEhpZ2gpIHtcbiAgaWYgKFxuICAgIGFyZ3VtZW50cy5sZW5ndGggPT09IDBcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IHggIT0geFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgfHwgaW5Mb3cgIT0gaW5Mb3dcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IGluSGlnaCAhPSBpbkhpZ2hcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IG91dExvdyAhPSBvdXRMb3dcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IG91dEhpZ2ggIT0gb3V0SGlnaFxuICApIHJldHVybiBOYU47XG4gIGlmICh4ID09PSBJbmZpbml0eSB8fCB4ID09PSAtSW5maW5pdHkpIHJldHVybiB4O1xuICByZXR1cm4gKHggLSBpbkxvdykgKiAob3V0SGlnaCAtIG91dExvdykgLyAoaW5IaWdoIC0gaW5Mb3cpICsgb3V0TG93O1xufTtcblxufSx7fV0sNjU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLnNpZ24gfHwgZnVuY3Rpb24gc2lnbih4KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgcmV0dXJuICh4ID0gK3gpID09IDAgfHwgeCAhPSB4ID8geCA6IHggPCAwID8gLTEgOiAxO1xufTtcblxufSx7fV0sNjY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyIE1FVEEgPSBfZGVyZXFfKDEyNCkoJ21ldGEnKTtcbnZhciBpc09iamVjdCA9IF9kZXJlcV8oNTEpO1xudmFyIGhhcyA9IF9kZXJlcV8oNDEpO1xudmFyIHNldERlc2MgPSBfZGVyZXFfKDcyKS5mO1xudmFyIGlkID0gMDtcbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlIHx8IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRydWU7XG59O1xudmFyIEZSRUVaRSA9ICFfZGVyZXFfKDM1KShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBpc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSk7XG59KTtcbnZhciBzZXRNZXRhID0gZnVuY3Rpb24gKGl0KSB7XG4gIHNldERlc2MoaXQsIE1FVEEsIHsgdmFsdWU6IHtcbiAgICBpOiAnTycgKyArK2lkLCAvLyBvYmplY3QgSURcbiAgICB3OiB7fSAgICAgICAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IH0pO1xufTtcbnZhciBmYXN0S2V5ID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgLy8gcmV0dXJuIHByaW1pdGl2ZSB3aXRoIHByZWZpeFxuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiAnRic7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuICdFJztcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gb2JqZWN0IElEXG4gIH0gcmV0dXJuIGl0W01FVEFdLmk7XG59O1xudmFyIGdldFdlYWsgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICBpZiAoIWhhcyhpdCwgTUVUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuIHRydWU7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBoYXNoIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gcmV0dXJuIGl0W01FVEFdLnc7XG59O1xuLy8gYWRkIG1ldGFkYXRhIG9uIGZyZWV6ZS1mYW1pbHkgbWV0aG9kcyBjYWxsaW5nXG52YXIgb25GcmVlemUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKEZSRUVaRSAmJiBtZXRhLk5FRUQgJiYgaXNFeHRlbnNpYmxlKGl0KSAmJiAhaGFzKGl0LCBNRVRBKSkgc2V0TWV0YShpdCk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgbWV0YSA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBLRVk6IE1FVEEsXG4gIE5FRUQ6IGZhbHNlLFxuICBmYXN0S2V5OiBmYXN0S2V5LFxuICBnZXRXZWFrOiBnZXRXZWFrLFxuICBvbkZyZWV6ZTogb25GcmVlemVcbn07XG5cbn0se1wiMTI0XCI6MTI0LFwiMzVcIjozNSxcIjQxXCI6NDEsXCI1MVwiOjUxLFwiNzJcIjo3Mn1dLDY3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBNYXAgPSBfZGVyZXFfKDE2MCk7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIHNoYXJlZCA9IF9kZXJlcV8oMTAzKSgnbWV0YWRhdGEnKTtcbnZhciBzdG9yZSA9IHNoYXJlZC5zdG9yZSB8fCAoc2hhcmVkLnN0b3JlID0gbmV3IChfZGVyZXFfKDI2NikpKCkpO1xuXG52YXIgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCA9IGZ1bmN0aW9uICh0YXJnZXQsIHRhcmdldEtleSwgY3JlYXRlKSB7XG4gIHZhciB0YXJnZXRNZXRhZGF0YSA9IHN0b3JlLmdldCh0YXJnZXQpO1xuICBpZiAoIXRhcmdldE1ldGFkYXRhKSB7XG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgc3RvcmUuc2V0KHRhcmdldCwgdGFyZ2V0TWV0YWRhdGEgPSBuZXcgTWFwKCkpO1xuICB9XG4gIHZhciBrZXlNZXRhZGF0YSA9IHRhcmdldE1ldGFkYXRhLmdldCh0YXJnZXRLZXkpO1xuICBpZiAoIWtleU1ldGFkYXRhKSB7XG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgdGFyZ2V0TWV0YWRhdGEuc2V0KHRhcmdldEtleSwga2V5TWV0YWRhdGEgPSBuZXcgTWFwKCkpO1xuICB9IHJldHVybiBrZXlNZXRhZGF0YTtcbn07XG52YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTywgUCkge1xuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIGZhbHNlKTtcbiAgcmV0dXJuIG1ldGFkYXRhTWFwID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IG1ldGFkYXRhTWFwLmhhcyhNZXRhZGF0YUtleSk7XG59O1xudmFyIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE8sIFApIHtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCBmYWxzZSk7XG4gIHJldHVybiBtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogbWV0YWRhdGFNYXAuZ2V0KE1ldGFkYXRhS2V5KTtcbn07XG52YXIgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTWV0YWRhdGFWYWx1ZSwgTywgUCkge1xuICBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIHRydWUpLnNldChNZXRhZGF0YUtleSwgTWV0YWRhdGFWYWx1ZSk7XG59O1xudmFyIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gZnVuY3Rpb24gKHRhcmdldCwgdGFyZ2V0S2V5KSB7XG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAodGFyZ2V0LCB0YXJnZXRLZXksIGZhbHNlKTtcbiAgdmFyIGtleXMgPSBbXTtcbiAgaWYgKG1ldGFkYXRhTWFwKSBtZXRhZGF0YU1hcC5mb3JFYWNoKGZ1bmN0aW9uIChfLCBrZXkpIHsga2V5cy5wdXNoKGtleSk7IH0pO1xuICByZXR1cm4ga2V5cztcbn07XG52YXIgdG9NZXRhS2V5ID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogU3RyaW5nKGl0KTtcbn07XG52YXIgZXhwID0gZnVuY3Rpb24gKE8pIHtcbiAgJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgTyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc3RvcmU6IHN0b3JlLFxuICBtYXA6IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAsXG4gIGhhczogb3JkaW5hcnlIYXNPd25NZXRhZGF0YSxcbiAgZ2V0OiBvcmRpbmFyeUdldE93bk1ldGFkYXRhLFxuICBzZXQ6IG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEsXG4gIGtleXM6IG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzLFxuICBrZXk6IHRvTWV0YUtleSxcbiAgZXhwOiBleHBcbn07XG5cbn0se1wiMTAzXCI6MTAzLFwiMTYwXCI6MTYwLFwiMjY2XCI6MjY2LFwiMzNcIjozM31dLDY4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBnbG9iYWwgPSBfZGVyZXFfKDQwKTtcbnZhciBtYWNyb3Rhc2sgPSBfZGVyZXFfKDExMykuc2V0O1xudmFyIE9ic2VydmVyID0gZ2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgZ2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIFByb21pc2UgPSBnbG9iYWwuUHJvbWlzZTtcbnZhciBpc05vZGUgPSBfZGVyZXFfKDE4KShwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaGVhZCwgbGFzdCwgbm90aWZ5O1xuXG4gIHZhciBmbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGFyZW50LCBmbjtcbiAgICBpZiAoaXNOb2RlICYmIChwYXJlbnQgPSBwcm9jZXNzLmRvbWFpbikpIHBhcmVudC5leGl0KCk7XG4gICAgd2hpbGUgKGhlYWQpIHtcbiAgICAgIGZuID0gaGVhZC5mbjtcbiAgICAgIGhlYWQgPSBoZWFkLm5leHQ7XG4gICAgICB0cnkge1xuICAgICAgICBmbigpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoaGVhZCkgbm90aWZ5KCk7XG4gICAgICAgIGVsc2UgbGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9IGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LmVudGVyKCk7XG4gIH07XG5cbiAgLy8gTm9kZS5qc1xuICBpZiAoaXNOb2RlKSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7XG4gICAgfTtcbiAgLy8gYnJvd3NlcnMgd2l0aCBNdXRhdGlvbk9ic2VydmVyXG4gIH0gZWxzZSBpZiAoT2JzZXJ2ZXIpIHtcbiAgICB2YXIgdG9nZ2xlID0gdHJ1ZTtcbiAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICBuZXcgT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG5vZGUuZGF0YSA9IHRvZ2dsZSA9ICF0b2dnbGU7XG4gICAgfTtcbiAgLy8gZW52aXJvbm1lbnRzIHdpdGggbWF5YmUgbm9uLWNvbXBsZXRlbHkgY29ycmVjdCwgYnV0IGV4aXN0ZW50IFByb21pc2VcbiAgfSBlbHNlIGlmIChQcm9taXNlICYmIFByb21pc2UucmVzb2x2ZSkge1xuICAgIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvbWlzZS50aGVuKGZsdXNoKTtcbiAgICB9O1xuICAvLyBmb3Igb3RoZXIgZW52aXJvbm1lbnRzIC0gbWFjcm90YXNrIGJhc2VkIG9uOlxuICAvLyAtIHNldEltbWVkaWF0ZVxuICAvLyAtIE1lc3NhZ2VDaGFubmVsXG4gIC8vIC0gd2luZG93LnBvc3RNZXNzYWdcbiAgLy8gLSBvbnJlYWR5c3RhdGVjaGFuZ2VcbiAgLy8gLSBzZXRUaW1lb3V0XG4gIH0gZWxzZSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gc3RyYW5nZSBJRSArIHdlYnBhY2sgZGV2IHNlcnZlciBidWcgLSB1c2UgLmNhbGwoZ2xvYmFsKVxuICAgICAgbWFjcm90YXNrLmNhbGwoZ2xvYmFsLCBmbHVzaCk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoZm4pIHtcbiAgICB2YXIgdGFzayA9IHsgZm46IGZuLCBuZXh0OiB1bmRlZmluZWQgfTtcbiAgICBpZiAobGFzdCkgbGFzdC5uZXh0ID0gdGFzaztcbiAgICBpZiAoIWhlYWQpIHtcbiAgICAgIGhlYWQgPSB0YXNrO1xuICAgICAgbm90aWZ5KCk7XG4gICAgfSBsYXN0ID0gdGFzaztcbiAgfTtcbn07XG5cbn0se1wiMTEzXCI6MTEzLFwiMThcIjoxOCxcIjQwXCI6NDB9XSw2OTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG4vLyAyNS40LjEuNSBOZXdQcm9taXNlQ2FwYWJpbGl0eShDKVxudmFyIGFGdW5jdGlvbiA9IF9kZXJlcV8oMyk7XG5cbmZ1bmN0aW9uIFByb21pc2VDYXBhYmlsaXR5KEMpIHtcbiAgdmFyIHJlc29sdmUsIHJlamVjdDtcbiAgdGhpcy5wcm9taXNlID0gbmV3IEMoZnVuY3Rpb24gKCQkcmVzb2x2ZSwgJCRyZWplY3QpIHtcbiAgICBpZiAocmVzb2x2ZSAhPT0gdW5kZWZpbmVkIHx8IHJlamVjdCAhPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoJ0JhZCBQcm9taXNlIGNvbnN0cnVjdG9yJyk7XG4gICAgcmVzb2x2ZSA9ICQkcmVzb2x2ZTtcbiAgICByZWplY3QgPSAkJHJlamVjdDtcbiAgfSk7XG4gIHRoaXMucmVzb2x2ZSA9IGFGdW5jdGlvbihyZXNvbHZlKTtcbiAgdGhpcy5yZWplY3QgPSBhRnVuY3Rpb24ocmVqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIChDKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG59O1xuXG59LHtcIjNcIjozfV0sNzA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuLy8gMTkuMS4yLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSwgLi4uKVxudmFyIGdldEtleXMgPSBfZGVyZXFfKDgxKTtcbnZhciBnT1BTID0gX2RlcmVxXyg3OCk7XG52YXIgcElFID0gX2RlcmVxXyg4Mik7XG52YXIgdG9PYmplY3QgPSBfZGVyZXFfKDExOSk7XG52YXIgSU9iamVjdCA9IF9kZXJlcV8oNDcpO1xudmFyICRhc3NpZ24gPSBPYmplY3QuYXNzaWduO1xuXG4vLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1Zylcbm1vZHVsZS5leHBvcnRzID0gISRhc3NpZ24gfHwgX2RlcmVxXygzNSkoZnVuY3Rpb24gKCkge1xuICB2YXIgQSA9IHt9O1xuICB2YXIgQiA9IHt9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIFMgPSBTeW1ib2woKTtcbiAgdmFyIEsgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnO1xuICBBW1NdID0gNztcbiAgSy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAoaykgeyBCW2tdID0gazsgfSk7XG4gIHJldHVybiAkYXNzaWduKHt9LCBBKVtTXSAhPSA3IHx8IE9iamVjdC5rZXlzKCRhc3NpZ24oe30sIEIpKS5qb2luKCcnKSAhPSBLO1xufSkgPyBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICB2YXIgVCA9IHRvT2JqZWN0KHRhcmdldCk7XG4gIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIHZhciBpc0VudW0gPSBwSUUuZjtcbiAgd2hpbGUgKGFMZW4gPiBpbmRleCkge1xuICAgIHZhciBTID0gSU9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHZhciBrZXlzID0gZ2V0U3ltYm9scyA/IGdldEtleXMoUykuY29uY2F0KGdldFN5bWJvbHMoUykpIDogZ2V0S2V5cyhTKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGogPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGopIGlmIChpc0VudW0uY2FsbChTLCBrZXkgPSBrZXlzW2orK10pKSBUW2tleV0gPSBTW2tleV07XG4gIH0gcmV0dXJuIFQ7XG59IDogJGFzc2lnbjtcblxufSx7XCIxMTlcIjoxMTksXCIzNVwiOjM1LFwiNDdcIjo0NyxcIjc4XCI6NzgsXCI4MVwiOjgxLFwiODJcIjo4Mn1dLDcxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxudmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTtcbnZhciBkUHMgPSBfZGVyZXFfKDczKTtcbnZhciBlbnVtQnVnS2V5cyA9IF9kZXJlcV8oMzEpO1xudmFyIElFX1BST1RPID0gX2RlcmVxXygxMDIpKCdJRV9QUk9UTycpO1xudmFyIEVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgY3JlYXRlRGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IF9kZXJlcV8oMzApKCdpZnJhbWUnKTtcbiAgdmFyIGkgPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHZhciBsdCA9ICc8JztcbiAgdmFyIGd0ID0gJz4nO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICBfZGVyZXFfKDQzKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZSAoaS0tKSBkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHkoKTtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkUHMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG5cbn0se1wiMTAyXCI6MTAyLFwiMzBcIjozMCxcIjMxXCI6MzEsXCI0M1wiOjQzLFwiN1wiOjcsXCI3M1wiOjczfV0sNzI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTtcbnZhciBJRThfRE9NX0RFRklORSA9IF9kZXJlcV8oNDQpO1xudmFyIHRvUHJpbWl0aXZlID0gX2RlcmVxXygxMjApO1xudmFyIGRQID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5leHBvcnRzLmYgPSBfZGVyZXFfKDI5KSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZFAoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIScpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuXG59LHtcIjEyMFwiOjEyMCxcIjI5XCI6MjksXCI0NFwiOjQ0LFwiN1wiOjd9XSw3MzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgZFAgPSBfZGVyZXFfKDcyKTtcbnZhciBhbk9iamVjdCA9IF9kZXJlcV8oNyk7XG52YXIgZ2V0S2V5cyA9IF9kZXJlcV8oODEpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9kZXJlcV8oMjkpID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzID0gZ2V0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciBQO1xuICB3aGlsZSAobGVuZ3RoID4gaSkgZFAuZihPLCBQID0ga2V5c1tpKytdLCBQcm9wZXJ0aWVzW1BdKTtcbiAgcmV0dXJuIE87XG59O1xuXG59LHtcIjI5XCI6MjksXCI3XCI6NyxcIjcyXCI6NzIsXCI4MVwiOjgxfV0sNzQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuLy8gRm9yY2VkIHJlcGxhY2VtZW50IHByb3RvdHlwZSBhY2Nlc3NvcnMgbWV0aG9kc1xubW9kdWxlLmV4cG9ydHMgPSBfZGVyZXFfKDYwKSB8fCAhX2RlcmVxXygzNSkoZnVuY3Rpb24gKCkge1xuICB2YXIgSyA9IE1hdGgucmFuZG9tKCk7XG4gIC8vIEluIEZGIHRocm93cyBvbmx5IGRlZmluZSBtZXRob2RzXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZiwgbm8tdXNlbGVzcy1jYWxsXG4gIF9fZGVmaW5lU2V0dGVyX18uY2FsbChudWxsLCBLLCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xuICBkZWxldGUgX2RlcmVxXyg0MClbS107XG59KTtcblxufSx7XCIzNVwiOjM1LFwiNDBcIjo0MCxcIjYwXCI6NjB9XSw3NTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgcElFID0gX2RlcmVxXyg4Mik7XG52YXIgY3JlYXRlRGVzYyA9IF9kZXJlcV8oOTIpO1xudmFyIHRvSU9iamVjdCA9IF9kZXJlcV8oMTE3KTtcbnZhciB0b1ByaW1pdGl2ZSA9IF9kZXJlcV8oMTIwKTtcbnZhciBoYXMgPSBfZGVyZXFfKDQxKTtcbnZhciBJRThfRE9NX0RFRklORSA9IF9kZXJlcV8oNDQpO1xudmFyIGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG5leHBvcnRzLmYgPSBfZGVyZXFfKDI5KSA/IGdPUEQgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZ09QRChPLCBQKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG5cbn0se1wiMTE3XCI6MTE3LFwiMTIwXCI6MTIwLFwiMjlcIjoyOSxcIjQxXCI6NDEsXCI0NFwiOjQ0LFwiODJcIjo4MixcIjkyXCI6OTJ9XSw3NjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG52YXIgdG9JT2JqZWN0ID0gX2RlcmVxXygxMTcpO1xudmFyIGdPUE4gPSBfZGVyZXFfKDc3KS5mO1xudmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZ09QTihpdCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gd2luZG93TmFtZXMuc2xpY2UoKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgcmV0dXJuIHdpbmRvd05hbWVzICYmIHRvU3RyaW5nLmNhbGwoaXQpID09ICdbb2JqZWN0IFdpbmRvd10nID8gZ2V0V2luZG93TmFtZXMoaXQpIDogZ09QTih0b0lPYmplY3QoaXQpKTtcbn07XG5cbn0se1wiMTE3XCI6MTE3LFwiNzdcIjo3N31dLDc3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDE5LjEuMi43IC8gMTUuMi4zLjQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnZhciAka2V5cyA9IF9kZXJlcV8oODApO1xudmFyIGhpZGRlbktleXMgPSBfZGVyZXFfKDMxKS5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG5cbn0se1wiMzFcIjozMSxcIjgwXCI6ODB9XSw3ODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG59LHt9XSw3OTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAxOS4xLjIuOSAvIDE1LjIuMy4yIE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIGhhcyA9IF9kZXJlcV8oNDEpO1xudmFyIHRvT2JqZWN0ID0gX2RlcmVxXygxMTkpO1xudmFyIElFX1BST1RPID0gX2RlcmVxXygxMDIpKCdJRV9QUk9UTycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKE8pIHtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZiAoaGFzKE8sIElFX1BST1RPKSkgcmV0dXJuIE9bSUVfUFJPVE9dO1xuICBpZiAodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDtcbn07XG5cbn0se1wiMTAyXCI6MTAyLFwiMTE5XCI6MTE5LFwiNDFcIjo0MX1dLDgwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBoYXMgPSBfZGVyZXFfKDQxKTtcbnZhciB0b0lPYmplY3QgPSBfZGVyZXFfKDExNyk7XG52YXIgYXJyYXlJbmRleE9mID0gX2RlcmVxXygxMSkoZmFsc2UpO1xudmFyIElFX1BST1RPID0gX2RlcmVxXygxMDIpKCdJRV9QUk9UTycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSBpZiAoa2V5ICE9IElFX1BST1RPKSBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcblxufSx7XCIxMDJcIjoxMDIsXCIxMVwiOjExLFwiMTE3XCI6MTE3LFwiNDFcIjo0MX1dLDgxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDE5LjEuMi4xNCAvIDE1LjIuMy4xNCBPYmplY3Qua2V5cyhPKVxudmFyICRrZXlzID0gX2RlcmVxXyg4MCk7XG52YXIgZW51bUJ1Z0tleXMgPSBfZGVyZXFfKDMxKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG5cbn0se1wiMzFcIjozMSxcIjgwXCI6ODB9XSw4MjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5leHBvcnRzLmYgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxufSx7fV0sODM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gbW9zdCBPYmplY3QgbWV0aG9kcyBieSBFUzYgc2hvdWxkIGFjY2VwdCBwcmltaXRpdmVzXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIGNvcmUgPSBfZGVyZXFfKDIzKTtcbnZhciBmYWlscyA9IF9kZXJlcV8oMzUpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBleGVjKSB7XG4gIHZhciBmbiA9IChjb3JlLk9iamVjdCB8fCB7fSlbS0VZXSB8fCBPYmplY3RbS0VZXTtcbiAgdmFyIGV4cCA9IHt9O1xuICBleHBbS0VZXSA9IGV4ZWMoZm4pO1xuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHsgZm4oMSk7IH0pLCAnT2JqZWN0JywgZXhwKTtcbn07XG5cbn0se1wiMjNcIjoyMyxcIjMzXCI6MzMsXCIzNVwiOjM1fV0sODQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyIGdldEtleXMgPSBfZGVyZXFfKDgxKTtcbnZhciB0b0lPYmplY3QgPSBfZGVyZXFfKDExNyk7XG52YXIgaXNFbnVtID0gX2RlcmVxXyg4MikuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlzRW50cmllcykge1xuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QoaXQpO1xuICAgIHZhciBrZXlzID0gZ2V0S2V5cyhPKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBpKSBpZiAoaXNFbnVtLmNhbGwoTywga2V5ID0ga2V5c1tpKytdKSkge1xuICAgICAgcmVzdWx0LnB1c2goaXNFbnRyaWVzID8gW2tleSwgT1trZXldXSA6IE9ba2V5XSk7XG4gICAgfSByZXR1cm4gcmVzdWx0O1xuICB9O1xufTtcblxufSx7XCIxMTdcIjoxMTcsXCI4MVwiOjgxLFwiODJcIjo4Mn1dLDg1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGFsbCBvYmplY3Qga2V5cywgaW5jbHVkZXMgbm9uLWVudW1lcmFibGUgYW5kIHN5bWJvbHNcbnZhciBnT1BOID0gX2RlcmVxXyg3Nyk7XG52YXIgZ09QUyA9IF9kZXJlcV8oNzgpO1xudmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTtcbnZhciBSZWZsZWN0ID0gX2RlcmVxXyg0MCkuUmVmbGVjdDtcbm1vZHVsZS5leHBvcnRzID0gUmVmbGVjdCAmJiBSZWZsZWN0Lm93bktleXMgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCkge1xuICB2YXIga2V5cyA9IGdPUE4uZihhbk9iamVjdChpdCkpO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgcmV0dXJuIGdldFN5bWJvbHMgPyBrZXlzLmNvbmNhdChnZXRTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcblxufSx7XCI0MFwiOjQwLFwiN1wiOjcsXCI3N1wiOjc3LFwiNzhcIjo3OH1dLDg2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciAkcGFyc2VGbG9hdCA9IF9kZXJlcV8oNDApLnBhcnNlRmxvYXQ7XG52YXIgJHRyaW0gPSBfZGVyZXFfKDExMSkudHJpbTtcblxubW9kdWxlLmV4cG9ydHMgPSAxIC8gJHBhcnNlRmxvYXQoX2RlcmVxXygxMTIpICsgJy0wJykgIT09IC1JbmZpbml0eSA/IGZ1bmN0aW9uIHBhcnNlRmxvYXQoc3RyKSB7XG4gIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMyk7XG4gIHZhciByZXN1bHQgPSAkcGFyc2VGbG9hdChzdHJpbmcpO1xuICByZXR1cm4gcmVzdWx0ID09PSAwICYmIHN0cmluZy5jaGFyQXQoMCkgPT0gJy0nID8gLTAgOiByZXN1bHQ7XG59IDogJHBhcnNlRmxvYXQ7XG5cbn0se1wiMTExXCI6MTExLFwiMTEyXCI6MTEyLFwiNDBcIjo0MH1dLDg3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciAkcGFyc2VJbnQgPSBfZGVyZXFfKDQwKS5wYXJzZUludDtcbnZhciAkdHJpbSA9IF9kZXJlcV8oMTExKS50cmltO1xudmFyIHdzID0gX2RlcmVxXygxMTIpO1xudmFyIGhleCA9IC9eWy0rXT8wW3hYXS87XG5cbm1vZHVsZS5leHBvcnRzID0gJHBhcnNlSW50KHdzICsgJzA4JykgIT09IDggfHwgJHBhcnNlSW50KHdzICsgJzB4MTYnKSAhPT0gMjIgPyBmdW5jdGlvbiBwYXJzZUludChzdHIsIHJhZGl4KSB7XG4gIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMyk7XG4gIHJldHVybiAkcGFyc2VJbnQoc3RyaW5nLCAocmFkaXggPj4+IDApIHx8IChoZXgudGVzdChzdHJpbmcpID8gMTYgOiAxMCkpO1xufSA6ICRwYXJzZUludDtcblxufSx7XCIxMTFcIjoxMTEsXCIxMTJcIjoxMTIsXCI0MFwiOjQwfV0sODg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xudmFyIHBhdGggPSBfZGVyZXFfKDg5KTtcbnZhciBpbnZva2UgPSBfZGVyZXFfKDQ2KTtcbnZhciBhRnVuY3Rpb24gPSBfZGVyZXFfKDMpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoLyogLi4ucGFyZ3MgKi8pIHtcbiAgdmFyIGZuID0gYUZ1bmN0aW9uKHRoaXMpO1xuICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIHBhcmdzID0gQXJyYXkobGVuZ3RoKTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgXyA9IHBhdGguXztcbiAgdmFyIGhvbGRlciA9IGZhbHNlO1xuICB3aGlsZSAobGVuZ3RoID4gaSkgaWYgKChwYXJnc1tpXSA9IGFyZ3VtZW50c1tpKytdKSA9PT0gXykgaG9sZGVyID0gdHJ1ZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgaiA9IDA7XG4gICAgdmFyIGsgPSAwO1xuICAgIHZhciBhcmdzO1xuICAgIGlmICghaG9sZGVyICYmICFhTGVuKSByZXR1cm4gaW52b2tlKGZuLCBwYXJncywgdGhhdCk7XG4gICAgYXJncyA9IHBhcmdzLnNsaWNlKCk7XG4gICAgaWYgKGhvbGRlcikgZm9yICg7bGVuZ3RoID4gajsgaisrKSBpZiAoYXJnc1tqXSA9PT0gXykgYXJnc1tqXSA9IGFyZ3VtZW50c1trKytdO1xuICAgIHdoaWxlIChhTGVuID4gaykgYXJncy5wdXNoKGFyZ3VtZW50c1trKytdKTtcbiAgICByZXR1cm4gaW52b2tlKGZuLCBhcmdzLCB0aGF0KTtcbiAgfTtcbn07XG5cbn0se1wiM1wiOjMsXCI0NlwiOjQ2LFwiODlcIjo4OX1dLDg5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbm1vZHVsZS5leHBvcnRzID0gX2RlcmVxXyg0MCk7XG5cbn0se1wiNDBcIjo0MH1dLDkwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4geyBlOiBmYWxzZSwgdjogZXhlYygpIH07XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4geyBlOiB0cnVlLCB2OiBlIH07XG4gIH1cbn07XG5cbn0se31dLDkxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IF9kZXJlcV8oNjkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDLCB4KSB7XG4gIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5LmYoQyk7XG4gIHZhciByZXNvbHZlID0gcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgcmVzb2x2ZSh4KTtcbiAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XG59O1xuXG59LHtcIjY5XCI6Njl9XSw5MjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuXG59LHt9XSw5MzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgcmVkZWZpbmUgPSBfZGVyZXFfKDk0KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc3JjLCBzYWZlKSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBzcmNba2V5XSwgc2FmZSk7XG4gIHJldHVybiB0YXJnZXQ7XG59O1xuXG59LHtcIjk0XCI6OTR9XSw5NDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgZ2xvYmFsID0gX2RlcmVxXyg0MCk7XG52YXIgaGlkZSA9IF9kZXJlcV8oNDIpO1xudmFyIGhhcyA9IF9kZXJlcV8oNDEpO1xudmFyIFNSQyA9IF9kZXJlcV8oMTI0KSgnc3JjJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciAkdG9TdHJpbmcgPSBGdW5jdGlvbltUT19TVFJJTkddO1xudmFyIFRQTCA9ICgnJyArICR0b1N0cmluZykuc3BsaXQoVE9fU1RSSU5HKTtcblxuX2RlcmVxXygyMykuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gJHRvU3RyaW5nLmNhbGwoaXQpO1xufTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsLCBzYWZlKSB7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIHZhbCA9PSAnZnVuY3Rpb24nO1xuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgJ25hbWUnKSB8fCBoaWRlKHZhbCwgJ25hbWUnLCBrZXkpO1xuICBpZiAoT1trZXldID09PSB2YWwpIHJldHVybjtcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsIFNSQykgfHwgaGlkZSh2YWwsIFNSQywgT1trZXldID8gJycgKyBPW2tleV0gOiBUUEwuam9pbihTdHJpbmcoa2V5KSkpO1xuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2UgaWYgKCFzYWZlKSB7XG4gICAgZGVsZXRlIE9ba2V5XTtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfSBlbHNlIGlmIChPW2tleV0pIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSB7XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH1cbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiB0aGlzW1NSQ10gfHwgJHRvU3RyaW5nLmNhbGwodGhpcyk7XG59KTtcblxufSx7XCIxMjRcIjoxMjQsXCIyM1wiOjIzLFwiNDBcIjo0MCxcIjQxXCI6NDEsXCI0MlwiOjQyfV0sOTU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocmVnRXhwLCByZXBsYWNlKSB7XG4gIHZhciByZXBsYWNlciA9IHJlcGxhY2UgPT09IE9iamVjdChyZXBsYWNlKSA/IGZ1bmN0aW9uIChwYXJ0KSB7XG4gICAgcmV0dXJuIHJlcGxhY2VbcGFydF07XG4gIH0gOiByZXBsYWNlO1xuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIFN0cmluZyhpdCkucmVwbGFjZShyZWdFeHAsIHJlcGxhY2VyKTtcbiAgfTtcbn07XG5cbn0se31dLDk2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDcuMi45IFNhbWVWYWx1ZSh4LCB5KVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuaXMgfHwgZnVuY3Rpb24gaXMoeCwgeSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiB4ID09PSB5ID8geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHkgOiB4ICE9IHggJiYgeSAhPSB5O1xufTtcblxufSx7fV0sOTc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tL1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciBhRnVuY3Rpb24gPSBfZGVyZXFfKDMpO1xudmFyIGN0eCA9IF9kZXJlcV8oMjUpO1xudmFyIGZvck9mID0gX2RlcmVxXygzOSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENPTExFQ1RJT04pIHtcbiAgJGV4cG9ydCgkZXhwb3J0LlMsIENPTExFQ1RJT04sIHsgZnJvbTogZnVuY3Rpb24gZnJvbShzb3VyY2UgLyogLCBtYXBGbiwgdGhpc0FyZyAqLykge1xuICAgIHZhciBtYXBGbiA9IGFyZ3VtZW50c1sxXTtcbiAgICB2YXIgbWFwcGluZywgQSwgbiwgY2I7XG4gICAgYUZ1bmN0aW9uKHRoaXMpO1xuICAgIG1hcHBpbmcgPSBtYXBGbiAhPT0gdW5kZWZpbmVkO1xuICAgIGlmIChtYXBwaW5nKSBhRnVuY3Rpb24obWFwRm4pO1xuICAgIGlmIChzb3VyY2UgPT0gdW5kZWZpbmVkKSByZXR1cm4gbmV3IHRoaXMoKTtcbiAgICBBID0gW107XG4gICAgaWYgKG1hcHBpbmcpIHtcbiAgICAgIG4gPSAwO1xuICAgICAgY2IgPSBjdHgobWFwRm4sIGFyZ3VtZW50c1syXSwgMik7XG4gICAgICBmb3JPZihzb3VyY2UsIGZhbHNlLCBmdW5jdGlvbiAobmV4dEl0ZW0pIHtcbiAgICAgICAgQS5wdXNoKGNiKG5leHRJdGVtLCBuKyspKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3JPZihzb3VyY2UsIGZhbHNlLCBBLnB1c2gsIEEpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IHRoaXMoQSk7XG4gIH0gfSk7XG59O1xuXG59LHtcIjI1XCI6MjUsXCIzXCI6MyxcIjMzXCI6MzMsXCIzOVwiOjM5fV0sOTg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tL1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09MTEVDVElPTikge1xuICAkZXhwb3J0KCRleHBvcnQuUywgQ09MTEVDVElPTiwgeyBvZjogZnVuY3Rpb24gb2YoKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIEEgPSBBcnJheShsZW5ndGgpO1xuICAgIHdoaWxlIChsZW5ndGgtLSkgQVtsZW5ndGhdID0gYXJndW1lbnRzW2xlbmd0aF07XG4gICAgcmV0dXJuIG5ldyB0aGlzKEEpO1xuICB9IH0pO1xufTtcblxufSx7XCIzM1wiOjMzfV0sOTk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xudmFyIGlzT2JqZWN0ID0gX2RlcmVxXyg1MSk7XG52YXIgYW5PYmplY3QgPSBfZGVyZXFfKDcpO1xudmFyIGNoZWNrID0gZnVuY3Rpb24gKE8sIHByb3RvKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBpZiAoIWlzT2JqZWN0KHByb3RvKSAmJiBwcm90byAhPT0gbnVsbCkgdGhyb3cgVHlwZUVycm9yKHByb3RvICsgXCI6IGNhbid0IHNldCBhcyBwcm90b3R5cGUhXCIpO1xufTtcbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgZnVuY3Rpb24gKHRlc3QsIGJ1Z2d5LCBzZXQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNldCA9IF9kZXJlcV8oMjUpKEZ1bmN0aW9uLmNhbGwsIF9kZXJlcV8oNzUpLmYoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldCwgMik7XG4gICAgICAgIHNldCh0ZXN0LCBbXSk7XG4gICAgICAgIGJ1Z2d5ID0gISh0ZXN0IGluc3RhbmNlb2YgQXJyYXkpO1xuICAgICAgfSBjYXRjaCAoZSkgeyBidWdneSA9IHRydWU7IH1cbiAgICAgIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90bykge1xuICAgICAgICBjaGVjayhPLCBwcm90byk7XG4gICAgICAgIGlmIChidWdneSkgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICAgICAgZWxzZSBzZXQoTywgcHJvdG8pO1xuICAgICAgICByZXR1cm4gTztcbiAgICAgIH07XG4gICAgfSh7fSwgZmFsc2UpIDogdW5kZWZpbmVkKSxcbiAgY2hlY2s6IGNoZWNrXG59O1xuXG59LHtcIjI1XCI6MjUsXCI1MVwiOjUxLFwiN1wiOjcsXCI3NVwiOjc1fV0sMTAwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSBfZGVyZXFfKDQwKTtcbnZhciBkUCA9IF9kZXJlcV8oNzIpO1xudmFyIERFU0NSSVBUT1JTID0gX2RlcmVxXygyOSk7XG52YXIgU1BFQ0lFUyA9IF9kZXJlcV8oMTI4KSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgdmFyIEMgPSBnbG9iYWxbS0VZXTtcbiAgaWYgKERFU0NSSVBUT1JTICYmIEMgJiYgIUNbU1BFQ0lFU10pIGRQLmYoQywgU1BFQ0lFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgfSk7XG59O1xuXG59LHtcIjEyOFwiOjEyOCxcIjI5XCI6MjksXCI0MFwiOjQwLFwiNzJcIjo3Mn1dLDEwMTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgZGVmID0gX2RlcmVxXyg3MikuZjtcbnZhciBoYXMgPSBfZGVyZXFfKDQxKTtcbnZhciBUQUcgPSBfZGVyZXFfKDEyOCkoJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCB0YWcsIHN0YXQpIHtcbiAgaWYgKGl0ICYmICFoYXMoaXQgPSBzdGF0ID8gaXQgOiBpdC5wcm90b3R5cGUsIFRBRykpIGRlZihpdCwgVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHRhZyB9KTtcbn07XG5cbn0se1wiMTI4XCI6MTI4LFwiNDFcIjo0MSxcIjcyXCI6NzJ9XSwxMDI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyIHNoYXJlZCA9IF9kZXJlcV8oMTAzKSgna2V5cycpO1xudmFyIHVpZCA9IF9kZXJlcV8oMTI0KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gc2hhcmVkW2tleV0gfHwgKHNoYXJlZFtrZXldID0gdWlkKGtleSkpO1xufTtcblxufSx7XCIxMDNcIjoxMDMsXCIxMjRcIjoxMjR9XSwxMDM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyIGdsb2JhbCA9IF9kZXJlcV8oNDApO1xudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgKGdsb2JhbFtTSEFSRURdID0ge30pO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0ge30pO1xufTtcblxufSx7XCI0MFwiOjQwfV0sMTA0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDcuMy4yMCBTcGVjaWVzQ29uc3RydWN0b3IoTywgZGVmYXVsdENvbnN0cnVjdG9yKVxudmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTtcbnZhciBhRnVuY3Rpb24gPSBfZGVyZXFfKDMpO1xudmFyIFNQRUNJRVMgPSBfZGVyZXFfKDEyOCkoJ3NwZWNpZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIEQpIHtcbiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvcjtcbiAgdmFyIFM7XG4gIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gRCA6IGFGdW5jdGlvbihTKTtcbn07XG5cbn0se1wiMTI4XCI6MTI4LFwiM1wiOjMsXCI3XCI6N31dLDEwNTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSBfZGVyZXFfKDM1KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWV0aG9kLCBhcmcpIHtcbiAgcmV0dXJuICEhbWV0aG9kICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1jYWxsXG4gICAgYXJnID8gbWV0aG9kLmNhbGwobnVsbCwgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCAxKSA6IG1ldGhvZC5jYWxsKG51bGwpO1xuICB9KTtcbn07XG5cbn0se1wiMzVcIjozNX1dLDEwNjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgdG9JbnRlZ2VyID0gX2RlcmVxXygxMTYpO1xudmFyIGRlZmluZWQgPSBfZGVyZXFfKDI4KTtcbi8vIHRydWUgIC0+IFN0cmluZyNhdFxuLy8gZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUT19TVFJJTkcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0aGF0LCBwb3MpIHtcbiAgICB2YXIgcyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgICB2YXIgaSA9IHRvSW50ZWdlcihwb3MpO1xuICAgIHZhciBsID0gcy5sZW5ndGg7XG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKGkgPCAwIHx8IGkgPj0gbCkgcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGEgPSBzLmNoYXJDb2RlQXQoaSk7XG4gICAgcmV0dXJuIGEgPCAweGQ4MDAgfHwgYSA+IDB4ZGJmZiB8fCBpICsgMSA9PT0gbCB8fCAoYiA9IHMuY2hhckNvZGVBdChpICsgMSkpIDwgMHhkYzAwIHx8IGIgPiAweGRmZmZcbiAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhXG4gICAgICA6IFRPX1NUUklORyA/IHMuc2xpY2UoaSwgaSArIDIpIDogKGEgLSAweGQ4MDAgPDwgMTApICsgKGIgLSAweGRjMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG5cbn0se1wiMTE2XCI6MTE2LFwiMjhcIjoyOH1dLDEwNzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyBoZWxwZXIgZm9yIFN0cmluZyN7c3RhcnRzV2l0aCwgZW5kc1dpdGgsIGluY2x1ZGVzfVxudmFyIGlzUmVnRXhwID0gX2RlcmVxXyg1Mik7XG52YXIgZGVmaW5lZCA9IF9kZXJlcV8oMjgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBzZWFyY2hTdHJpbmcsIE5BTUUpIHtcbiAgaWYgKGlzUmVnRXhwKHNlYXJjaFN0cmluZykpIHRocm93IFR5cGVFcnJvcignU3RyaW5nIycgKyBOQU1FICsgXCIgZG9lc24ndCBhY2NlcHQgcmVnZXghXCIpO1xuICByZXR1cm4gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xufTtcblxufSx7XCIyOFwiOjI4LFwiNTJcIjo1Mn1dLDEwODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIGZhaWxzID0gX2RlcmVxXygzNSk7XG52YXIgZGVmaW5lZCA9IF9kZXJlcV8oMjgpO1xudmFyIHF1b3QgPSAvXCIvZztcbi8vIEIuMi4zLjIuMSBDcmVhdGVIVE1MKHN0cmluZywgdGFnLCBhdHRyaWJ1dGUsIHZhbHVlKVxudmFyIGNyZWF0ZUhUTUwgPSBmdW5jdGlvbiAoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgdmFyIFMgPSBTdHJpbmcoZGVmaW5lZChzdHJpbmcpKTtcbiAgdmFyIHAxID0gJzwnICsgdGFnO1xuICBpZiAoYXR0cmlidXRlICE9PSAnJykgcDEgKz0gJyAnICsgYXR0cmlidXRlICsgJz1cIicgKyBTdHJpbmcodmFsdWUpLnJlcGxhY2UocXVvdCwgJyZxdW90OycpICsgJ1wiJztcbiAgcmV0dXJuIHAxICsgJz4nICsgUyArICc8LycgKyB0YWcgKyAnPic7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSwgZXhlYykge1xuICB2YXIgTyA9IHt9O1xuICBPW05BTUVdID0gZXhlYyhjcmVhdGVIVE1MKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRlc3QgPSAnJ1tOQU1FXSgnXCInKTtcbiAgICByZXR1cm4gdGVzdCAhPT0gdGVzdC50b0xvd2VyQ2FzZSgpIHx8IHRlc3Quc3BsaXQoJ1wiJykubGVuZ3RoID4gMztcbiAgfSksICdTdHJpbmcnLCBPKTtcbn07XG5cbn0se1wiMjhcIjoyOCxcIjMzXCI6MzMsXCIzNVwiOjM1fV0sMTA5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgdG9MZW5ndGggPSBfZGVyZXFfKDExOCk7XG52YXIgcmVwZWF0ID0gX2RlcmVxXygxMTApO1xudmFyIGRlZmluZWQgPSBfZGVyZXFfKDI4KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgbWF4TGVuZ3RoLCBmaWxsU3RyaW5nLCBsZWZ0KSB7XG4gIHZhciBTID0gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xuICB2YXIgc3RyaW5nTGVuZ3RoID0gUy5sZW5ndGg7XG4gIHZhciBmaWxsU3RyID0gZmlsbFN0cmluZyA9PT0gdW5kZWZpbmVkID8gJyAnIDogU3RyaW5nKGZpbGxTdHJpbmcpO1xuICB2YXIgaW50TWF4TGVuZ3RoID0gdG9MZW5ndGgobWF4TGVuZ3RoKTtcbiAgaWYgKGludE1heExlbmd0aCA8PSBzdHJpbmdMZW5ndGggfHwgZmlsbFN0ciA9PSAnJykgcmV0dXJuIFM7XG4gIHZhciBmaWxsTGVuID0gaW50TWF4TGVuZ3RoIC0gc3RyaW5nTGVuZ3RoO1xuICB2YXIgc3RyaW5nRmlsbGVyID0gcmVwZWF0LmNhbGwoZmlsbFN0ciwgTWF0aC5jZWlsKGZpbGxMZW4gLyBmaWxsU3RyLmxlbmd0aCkpO1xuICBpZiAoc3RyaW5nRmlsbGVyLmxlbmd0aCA+IGZpbGxMZW4pIHN0cmluZ0ZpbGxlciA9IHN0cmluZ0ZpbGxlci5zbGljZSgwLCBmaWxsTGVuKTtcbiAgcmV0dXJuIGxlZnQgPyBzdHJpbmdGaWxsZXIgKyBTIDogUyArIHN0cmluZ0ZpbGxlcjtcbn07XG5cbn0se1wiMTEwXCI6MTEwLFwiMTE4XCI6MTE4LFwiMjhcIjoyOH1dLDExMDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgdG9JbnRlZ2VyID0gX2RlcmVxXygxMTYpO1xudmFyIGRlZmluZWQgPSBfZGVyZXFfKDI4KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZXBlYXQoY291bnQpIHtcbiAgdmFyIHN0ciA9IFN0cmluZyhkZWZpbmVkKHRoaXMpKTtcbiAgdmFyIHJlcyA9ICcnO1xuICB2YXIgbiA9IHRvSW50ZWdlcihjb3VudCk7XG4gIGlmIChuIDwgMCB8fCBuID09IEluZmluaXR5KSB0aHJvdyBSYW5nZUVycm9yKFwiQ291bnQgY2FuJ3QgYmUgbmVnYXRpdmVcIik7XG4gIGZvciAoO24gPiAwOyAobiA+Pj49IDEpICYmIChzdHIgKz0gc3RyKSkgaWYgKG4gJiAxKSByZXMgKz0gc3RyO1xuICByZXR1cm4gcmVzO1xufTtcblxufSx7XCIxMTZcIjoxMTYsXCIyOFwiOjI4fV0sMTExOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgZGVmaW5lZCA9IF9kZXJlcV8oMjgpO1xudmFyIGZhaWxzID0gX2RlcmVxXygzNSk7XG52YXIgc3BhY2VzID0gX2RlcmVxXygxMTIpO1xudmFyIHNwYWNlID0gJ1snICsgc3BhY2VzICsgJ10nO1xudmFyIG5vbiA9ICdcXHUyMDBiXFx1MDA4NSc7XG52YXIgbHRyaW0gPSBSZWdFeHAoJ14nICsgc3BhY2UgKyBzcGFjZSArICcqJyk7XG52YXIgcnRyaW0gPSBSZWdFeHAoc3BhY2UgKyBzcGFjZSArICcqJCcpO1xuXG52YXIgZXhwb3J0ZXIgPSBmdW5jdGlvbiAoS0VZLCBleGVjLCBBTElBUykge1xuICB2YXIgZXhwID0ge307XG4gIHZhciBGT1JDRSA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gISFzcGFjZXNbS0VZXSgpIHx8IG5vbltLRVldKCkgIT0gbm9uO1xuICB9KTtcbiAgdmFyIGZuID0gZXhwW0tFWV0gPSBGT1JDRSA/IGV4ZWModHJpbSkgOiBzcGFjZXNbS0VZXTtcbiAgaWYgKEFMSUFTKSBleHBbQUxJQVNdID0gZm47XG4gICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0UsICdTdHJpbmcnLCBleHApO1xufTtcblxuLy8gMSAtPiBTdHJpbmcjdHJpbUxlZnRcbi8vIDIgLT4gU3RyaW5nI3RyaW1SaWdodFxuLy8gMyAtPiBTdHJpbmcjdHJpbVxudmFyIHRyaW0gPSBleHBvcnRlci50cmltID0gZnVuY3Rpb24gKHN0cmluZywgVFlQRSkge1xuICBzdHJpbmcgPSBTdHJpbmcoZGVmaW5lZChzdHJpbmcpKTtcbiAgaWYgKFRZUEUgJiAxKSBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShsdHJpbSwgJycpO1xuICBpZiAoVFlQRSAmIDIpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKHJ0cmltLCAnJyk7XG4gIHJldHVybiBzdHJpbmc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydGVyO1xuXG59LHtcIjExMlwiOjExMixcIjI4XCI6MjgsXCIzM1wiOjMzLFwiMzVcIjozNX1dLDExMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9ICdcXHgwOVxceDBBXFx4MEJcXHgwQ1xceDBEXFx4MjBcXHhBMFxcdTE2ODBcXHUxODBFXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwMycgK1xuICAnXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMFxcdTIwMjhcXHUyMDI5XFx1RkVGRic7XG5cbn0se31dLDExMzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgY3R4ID0gX2RlcmVxXygyNSk7XG52YXIgaW52b2tlID0gX2RlcmVxXyg0Nik7XG52YXIgaHRtbCA9IF9kZXJlcV8oNDMpO1xudmFyIGNlbCA9IF9kZXJlcV8oMzApO1xudmFyIGdsb2JhbCA9IF9kZXJlcV8oNDApO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBzZXRUYXNrID0gZ2xvYmFsLnNldEltbWVkaWF0ZTtcbnZhciBjbGVhclRhc2sgPSBnbG9iYWwuY2xlYXJJbW1lZGlhdGU7XG52YXIgTWVzc2FnZUNoYW5uZWwgPSBnbG9iYWwuTWVzc2FnZUNoYW5uZWw7XG52YXIgRGlzcGF0Y2ggPSBnbG9iYWwuRGlzcGF0Y2g7XG52YXIgY291bnRlciA9IDA7XG52YXIgcXVldWUgPSB7fTtcbnZhciBPTlJFQURZU1RBVEVDSEFOR0UgPSAnb25yZWFkeXN0YXRlY2hhbmdlJztcbnZhciBkZWZlciwgY2hhbm5lbCwgcG9ydDtcbnZhciBydW4gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBpZCA9ICt0aGlzO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gIGlmIChxdWV1ZS5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICB2YXIgZm4gPSBxdWV1ZVtpZF07XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgICBmbigpO1xuICB9XG59O1xudmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIHJ1bi5jYWxsKGV2ZW50LmRhdGEpO1xufTtcbi8vIE5vZGUuanMgMC45KyAmIElFMTArIGhhcyBzZXRJbW1lZGlhdGUsIG90aGVyd2lzZTpcbmlmICghc2V0VGFzayB8fCAhY2xlYXJUYXNrKSB7XG4gIHNldFRhc2sgPSBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoZm4pIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIHZhciBpID0gMTtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgcXVldWVbKytjb3VudGVyXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgICAgaW52b2tlKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbiksIGFyZ3MpO1xuICAgIH07XG4gICAgZGVmZXIoY291bnRlcik7XG4gICAgcmV0dXJuIGNvdW50ZXI7XG4gIH07XG4gIGNsZWFyVGFzayA9IGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGlkKSB7XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgfTtcbiAgLy8gTm9kZS5qcyAwLjgtXG4gIGlmIChfZGVyZXFfKDE4KShwcm9jZXNzKSA9PSAncHJvY2VzcycpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhjdHgocnVuLCBpZCwgMSkpO1xuICAgIH07XG4gIC8vIFNwaGVyZSAoSlMgZ2FtZSBlbmdpbmUpIERpc3BhdGNoIEFQSVxuICB9IGVsc2UgaWYgKERpc3BhdGNoICYmIERpc3BhdGNoLm5vdykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBEaXNwYXRjaC5ub3coY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBCcm93c2VycyB3aXRoIE1lc3NhZ2VDaGFubmVsLCBpbmNsdWRlcyBXZWJXb3JrZXJzXG4gIH0gZWxzZSBpZiAoTWVzc2FnZUNoYW5uZWwpIHtcbiAgICBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgcG9ydCA9IGNoYW5uZWwucG9ydDI7XG4gICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBsaXN0ZW5lcjtcbiAgICBkZWZlciA9IGN0eChwb3J0LnBvc3RNZXNzYWdlLCBwb3J0LCAxKTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBwb3N0TWVzc2FnZSwgc2tpcCBXZWJXb3JrZXJzXG4gIC8vIElFOCBoYXMgcG9zdE1lc3NhZ2UsIGJ1dCBpdCdzIHN5bmMgJiB0eXBlb2YgaXRzIHBvc3RNZXNzYWdlIGlzICdvYmplY3QnXG4gIH0gZWxzZSBpZiAoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIgJiYgdHlwZW9mIHBvc3RNZXNzYWdlID09ICdmdW5jdGlvbicgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShpZCArICcnLCAnKicpO1xuICAgIH07XG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAvLyBJRTgtXG4gIH0gZWxzZSBpZiAoT05SRUFEWVNUQVRFQ0hBTkdFIGluIGNlbCgnc2NyaXB0JykpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgaHRtbC5hcHBlbmRDaGlsZChjZWwoJ3NjcmlwdCcpKVtPTlJFQURZU1RBVEVDSEFOR0VdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgICBydW4uY2FsbChpZCk7XG4gICAgICB9O1xuICAgIH07XG4gIC8vIFJlc3Qgb2xkIGJyb3dzZXJzXG4gIH0gZWxzZSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHNldFRpbWVvdXQoY3R4KHJ1biwgaWQsIDEpLCAwKTtcbiAgICB9O1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXRUYXNrLFxuICBjbGVhcjogY2xlYXJUYXNrXG59O1xuXG59LHtcIjE4XCI6MTgsXCIyNVwiOjI1LFwiMzBcIjozMCxcIjQwXCI6NDAsXCI0M1wiOjQzLFwiNDZcIjo0Nn1dLDExNDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgdG9JbnRlZ2VyID0gX2RlcmVxXygxMTYpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcblxufSx7XCIxMTZcIjoxMTZ9XSwxMTU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9pbmRleFxudmFyIHRvSW50ZWdlciA9IF9kZXJlcV8oMTE2KTtcbnZhciB0b0xlbmd0aCA9IF9kZXJlcV8oMTE4KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gMDtcbiAgdmFyIG51bWJlciA9IHRvSW50ZWdlcihpdCk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChudW1iZXIpO1xuICBpZiAobnVtYmVyICE9PSBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIGxlbmd0aCEnKTtcbiAgcmV0dXJuIGxlbmd0aDtcbn07XG5cbn0se1wiMTE2XCI6MTE2LFwiMTE4XCI6MTE4fV0sMTE2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDcuMS40IFRvSW50ZWdlclxudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59O1xuXG59LHt9XSwxMTc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSU9iamVjdCA9IF9kZXJlcV8oNDcpO1xudmFyIGRlZmluZWQgPSBfZGVyZXFfKDI4KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG5cbn0se1wiMjhcIjoyOCxcIjQ3XCI6NDd9XSwxMTg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gNy4xLjE1IFRvTGVuZ3RoXG52YXIgdG9JbnRlZ2VyID0gX2RlcmVxXygxMTYpO1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID4gMCA/IG1pbih0b0ludGVnZXIoaXQpLCAweDFmZmZmZmZmZmZmZmZmKSA6IDA7IC8vIHBvdygyLCA1MykgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG5cbn0se1wiMTE2XCI6MTE2fV0sMTE5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcbnZhciBkZWZpbmVkID0gX2RlcmVxXygyOCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG5cbn0se1wiMjhcIjoyOH1dLDEyMDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IF9kZXJlcV8oNTEpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUykge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG5cbn0se1wiNTFcIjo1MX1dLDEyMTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5pZiAoX2RlcmVxXygyOSkpIHtcbiAgdmFyIExJQlJBUlkgPSBfZGVyZXFfKDYwKTtcbiAgdmFyIGdsb2JhbCA9IF9kZXJlcV8oNDApO1xuICB2YXIgZmFpbHMgPSBfZGVyZXFfKDM1KTtcbiAgdmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbiAgdmFyICR0eXBlZCA9IF9kZXJlcV8oMTIzKTtcbiAgdmFyICRidWZmZXIgPSBfZGVyZXFfKDEyMik7XG4gIHZhciBjdHggPSBfZGVyZXFfKDI1KTtcbiAgdmFyIGFuSW5zdGFuY2UgPSBfZGVyZXFfKDYpO1xuICB2YXIgcHJvcGVydHlEZXNjID0gX2RlcmVxXyg5Mik7XG4gIHZhciBoaWRlID0gX2RlcmVxXyg0Mik7XG4gIHZhciByZWRlZmluZUFsbCA9IF9kZXJlcV8oOTMpO1xuICB2YXIgdG9JbnRlZ2VyID0gX2RlcmVxXygxMTYpO1xuICB2YXIgdG9MZW5ndGggPSBfZGVyZXFfKDExOCk7XG4gIHZhciB0b0luZGV4ID0gX2RlcmVxXygxMTUpO1xuICB2YXIgdG9BYnNvbHV0ZUluZGV4ID0gX2RlcmVxXygxMTQpO1xuICB2YXIgdG9QcmltaXRpdmUgPSBfZGVyZXFfKDEyMCk7XG4gIHZhciBoYXMgPSBfZGVyZXFfKDQxKTtcbiAgdmFyIGNsYXNzb2YgPSBfZGVyZXFfKDE3KTtcbiAgdmFyIGlzT2JqZWN0ID0gX2RlcmVxXyg1MSk7XG4gIHZhciB0b09iamVjdCA9IF9kZXJlcV8oMTE5KTtcbiAgdmFyIGlzQXJyYXlJdGVyID0gX2RlcmVxXyg0OCk7XG4gIHZhciBjcmVhdGUgPSBfZGVyZXFfKDcxKTtcbiAgdmFyIGdldFByb3RvdHlwZU9mID0gX2RlcmVxXyg3OSk7XG4gIHZhciBnT1BOID0gX2RlcmVxXyg3NykuZjtcbiAgdmFyIGdldEl0ZXJGbiA9IF9kZXJlcV8oMTI5KTtcbiAgdmFyIHVpZCA9IF9kZXJlcV8oMTI0KTtcbiAgdmFyIHdrcyA9IF9kZXJlcV8oMTI4KTtcbiAgdmFyIGNyZWF0ZUFycmF5TWV0aG9kID0gX2RlcmVxXygxMik7XG4gIHZhciBjcmVhdGVBcnJheUluY2x1ZGVzID0gX2RlcmVxXygxMSk7XG4gIHZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSBfZGVyZXFfKDEwNCk7XG4gIHZhciBBcnJheUl0ZXJhdG9ycyA9IF9kZXJlcV8oMTQxKTtcbiAgdmFyIEl0ZXJhdG9ycyA9IF9kZXJlcV8oNTgpO1xuICB2YXIgJGl0ZXJEZXRlY3QgPSBfZGVyZXFfKDU2KTtcbiAgdmFyIHNldFNwZWNpZXMgPSBfZGVyZXFfKDEwMCk7XG4gIHZhciBhcnJheUZpbGwgPSBfZGVyZXFfKDkpO1xuICB2YXIgYXJyYXlDb3B5V2l0aGluID0gX2RlcmVxXyg4KTtcbiAgdmFyICREUCA9IF9kZXJlcV8oNzIpO1xuICB2YXIgJEdPUEQgPSBfZGVyZXFfKDc1KTtcbiAgdmFyIGRQID0gJERQLmY7XG4gIHZhciBnT1BEID0gJEdPUEQuZjtcbiAgdmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbiAgdmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG4gIHZhciBVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXk7XG4gIHZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xuICB2YXIgU0hBUkVEX0JVRkZFUiA9ICdTaGFyZWQnICsgQVJSQVlfQlVGRkVSO1xuICB2YXIgQllURVNfUEVSX0VMRU1FTlQgPSAnQllURVNfUEVSX0VMRU1FTlQnO1xuICB2YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG4gIHZhciBBcnJheVByb3RvID0gQXJyYXlbUFJPVE9UWVBFXTtcbiAgdmFyICRBcnJheUJ1ZmZlciA9ICRidWZmZXIuQXJyYXlCdWZmZXI7XG4gIHZhciAkRGF0YVZpZXcgPSAkYnVmZmVyLkRhdGFWaWV3O1xuICB2YXIgYXJyYXlGb3JFYWNoID0gY3JlYXRlQXJyYXlNZXRob2QoMCk7XG4gIHZhciBhcnJheUZpbHRlciA9IGNyZWF0ZUFycmF5TWV0aG9kKDIpO1xuICB2YXIgYXJyYXlTb21lID0gY3JlYXRlQXJyYXlNZXRob2QoMyk7XG4gIHZhciBhcnJheUV2ZXJ5ID0gY3JlYXRlQXJyYXlNZXRob2QoNCk7XG4gIHZhciBhcnJheUZpbmQgPSBjcmVhdGVBcnJheU1ldGhvZCg1KTtcbiAgdmFyIGFycmF5RmluZEluZGV4ID0gY3JlYXRlQXJyYXlNZXRob2QoNik7XG4gIHZhciBhcnJheUluY2x1ZGVzID0gY3JlYXRlQXJyYXlJbmNsdWRlcyh0cnVlKTtcbiAgdmFyIGFycmF5SW5kZXhPZiA9IGNyZWF0ZUFycmF5SW5jbHVkZXMoZmFsc2UpO1xuICB2YXIgYXJyYXlWYWx1ZXMgPSBBcnJheUl0ZXJhdG9ycy52YWx1ZXM7XG4gIHZhciBhcnJheUtleXMgPSBBcnJheUl0ZXJhdG9ycy5rZXlzO1xuICB2YXIgYXJyYXlFbnRyaWVzID0gQXJyYXlJdGVyYXRvcnMuZW50cmllcztcbiAgdmFyIGFycmF5TGFzdEluZGV4T2YgPSBBcnJheVByb3RvLmxhc3RJbmRleE9mO1xuICB2YXIgYXJyYXlSZWR1Y2UgPSBBcnJheVByb3RvLnJlZHVjZTtcbiAgdmFyIGFycmF5UmVkdWNlUmlnaHQgPSBBcnJheVByb3RvLnJlZHVjZVJpZ2h0O1xuICB2YXIgYXJyYXlKb2luID0gQXJyYXlQcm90by5qb2luO1xuICB2YXIgYXJyYXlTb3J0ID0gQXJyYXlQcm90by5zb3J0O1xuICB2YXIgYXJyYXlTbGljZSA9IEFycmF5UHJvdG8uc2xpY2U7XG4gIHZhciBhcnJheVRvU3RyaW5nID0gQXJyYXlQcm90by50b1N0cmluZztcbiAgdmFyIGFycmF5VG9Mb2NhbGVTdHJpbmcgPSBBcnJheVByb3RvLnRvTG9jYWxlU3RyaW5nO1xuICB2YXIgSVRFUkFUT1IgPSB3a3MoJ2l0ZXJhdG9yJyk7XG4gIHZhciBUQUcgPSB3a3MoJ3RvU3RyaW5nVGFnJyk7XG4gIHZhciBUWVBFRF9DT05TVFJVQ1RPUiA9IHVpZCgndHlwZWRfY29uc3RydWN0b3InKTtcbiAgdmFyIERFRl9DT05TVFJVQ1RPUiA9IHVpZCgnZGVmX2NvbnN0cnVjdG9yJyk7XG4gIHZhciBBTExfQ09OU1RSVUNUT1JTID0gJHR5cGVkLkNPTlNUUjtcbiAgdmFyIFRZUEVEX0FSUkFZID0gJHR5cGVkLlRZUEVEO1xuICB2YXIgVklFVyA9ICR0eXBlZC5WSUVXO1xuICB2YXIgV1JPTkdfTEVOR1RIID0gJ1dyb25nIGxlbmd0aCEnO1xuXG4gIHZhciAkbWFwID0gY3JlYXRlQXJyYXlNZXRob2QoMSwgZnVuY3Rpb24gKE8sIGxlbmd0aCkge1xuICAgIHJldHVybiBhbGxvY2F0ZShzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSwgbGVuZ3RoKTtcbiAgfSk7XG5cbiAgdmFyIExJVFRMRV9FTkRJQU4gPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KG5ldyBVaW50MTZBcnJheShbMV0pLmJ1ZmZlcilbMF0gPT09IDE7XG4gIH0pO1xuXG4gIHZhciBGT1JDRURfU0VUID0gISFVaW50OEFycmF5ICYmICEhVWludDhBcnJheVtQUk9UT1RZUEVdLnNldCAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3IFVpbnQ4QXJyYXkoMSkuc2V0KHt9KTtcbiAgfSk7XG5cbiAgdmFyIHRvT2Zmc2V0ID0gZnVuY3Rpb24gKGl0LCBCWVRFUykge1xuICAgIHZhciBvZmZzZXQgPSB0b0ludGVnZXIoaXQpO1xuICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XG4gICAgcmV0dXJuIG9mZnNldDtcbiAgfTtcblxuICB2YXIgdmFsaWRhdGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICBpZiAoaXNPYmplY3QoaXQpICYmIFRZUEVEX0FSUkFZIGluIGl0KSByZXR1cm4gaXQ7XG4gICAgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSB0eXBlZCBhcnJheSEnKTtcbiAgfTtcblxuICB2YXIgYWxsb2NhdGUgPSBmdW5jdGlvbiAoQywgbGVuZ3RoKSB7XG4gICAgaWYgKCEoaXNPYmplY3QoQykgJiYgVFlQRURfQ09OU1RSVUNUT1IgaW4gQykpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignSXQgaXMgbm90IGEgdHlwZWQgYXJyYXkgY29uc3RydWN0b3IhJyk7XG4gICAgfSByZXR1cm4gbmV3IEMobGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgc3BlY2llc0Zyb21MaXN0ID0gZnVuY3Rpb24gKE8sIGxpc3QpIHtcbiAgICByZXR1cm4gZnJvbUxpc3Qoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxpc3QpO1xuICB9O1xuXG4gIHZhciBmcm9tTGlzdCA9IGZ1bmN0aW9uIChDLCBsaXN0KSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgbGVuZ3RoID0gbGlzdC5sZW5ndGg7XG4gICAgdmFyIHJlc3VsdCA9IGFsbG9jYXRlKEMsIGxlbmd0aCk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSByZXN1bHRbaW5kZXhdID0gbGlzdFtpbmRleCsrXTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHZhciBhZGRHZXR0ZXIgPSBmdW5jdGlvbiAoaXQsIGtleSwgaW50ZXJuYWwpIHtcbiAgICBkUChpdCwga2V5LCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZFtpbnRlcm5hbF07IH0gfSk7XG4gIH07XG5cbiAgdmFyICRmcm9tID0gZnVuY3Rpb24gZnJvbShzb3VyY2UgLyogLCBtYXBmbiwgdGhpc0FyZyAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3Qoc291cmNlKTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIG1hcGZuID0gYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciBpdGVyRm4gPSBnZXRJdGVyRm4oTyk7XG4gICAgdmFyIGksIGxlbmd0aCwgdmFsdWVzLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICAgIGlmIChpdGVyRm4gIT0gdW5kZWZpbmVkICYmICFpc0FycmF5SXRlcihpdGVyRm4pKSB7XG4gICAgICBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoTyksIHZhbHVlcyA9IFtdLCBpID0gMDsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpKyspIHtcbiAgICAgICAgdmFsdWVzLnB1c2goc3RlcC52YWx1ZSk7XG4gICAgICB9IE8gPSB2YWx1ZXM7XG4gICAgfVxuICAgIGlmIChtYXBwaW5nICYmIGFMZW4gPiAyKSBtYXBmbiA9IGN0eChtYXBmbiwgYXJndW1lbnRzWzJdLCAyKTtcbiAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCksIHJlc3VsdCA9IGFsbG9jYXRlKHRoaXMsIGxlbmd0aCk7IGxlbmd0aCA+IGk7IGkrKykge1xuICAgICAgcmVzdWx0W2ldID0gbWFwcGluZyA/IG1hcGZuKE9baV0sIGkpIDogT1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgJG9mID0gZnVuY3Rpb24gb2YoLyogLi4uaXRlbXMgKi8pIHtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpO1xuICAgIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleCsrXTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIGlPUyBTYWZhcmkgNi54IGZhaWxzIGhlcmVcbiAgdmFyIFRPX0xPQ0FMRV9CVUcgPSAhIVVpbnQ4QXJyYXkgJiYgZmFpbHMoZnVuY3Rpb24gKCkgeyBhcnJheVRvTG9jYWxlU3RyaW5nLmNhbGwobmV3IFVpbnQ4QXJyYXkoMSkpOyB9KTtcblxuICB2YXIgJHRvTG9jYWxlU3RyaW5nID0gZnVuY3Rpb24gdG9Mb2NhbGVTdHJpbmcoKSB7XG4gICAgcmV0dXJuIGFycmF5VG9Mb2NhbGVTdHJpbmcuYXBwbHkoVE9fTE9DQUxFX0JVRyA/IGFycmF5U2xpY2UuY2FsbCh2YWxpZGF0ZSh0aGlzKSkgOiB2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgfTtcblxuICB2YXIgcHJvdG8gPSB7XG4gICAgY29weVdpdGhpbjogZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0IC8qICwgZW5kICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlDb3B5V2l0aGluLmNhbGwodmFsaWRhdGUodGhpcyksIHRhcmdldCwgc3RhcnQsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RXZlcnkodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZpbGw6IGZ1bmN0aW9uIGZpbGwodmFsdWUgLyogLCBzdGFydCwgZW5kICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUZpbGwuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIHNwZWNpZXNGcm9tTGlzdCh0aGlzLCBhcnJheUZpbHRlcih2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbixcbiAgICAgICAgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpKTtcbiAgICB9LFxuICAgIGZpbmQ6IGZ1bmN0aW9uIGZpbmQocHJlZGljYXRlIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RmluZCh2YWxpZGF0ZSh0aGlzKSwgcHJlZGljYXRlLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChwcmVkaWNhdGUgLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlGaW5kSW5kZXgodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgYXJyYXlGb3JFYWNoKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUluZGV4T2YodmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlJbmNsdWRlcyh2YWxpZGF0ZSh0aGlzKSwgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5Sm9pbi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIGxhc3RJbmRleE9mOiBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUxhc3RJbmRleE9mLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgbWFwOiBmdW5jdGlvbiBtYXAobWFwZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gJG1hcCh2YWxpZGF0ZSh0aGlzKSwgbWFwZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHJlZHVjZTogZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlUmlnaHQuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICByZXZlcnNlOiBmdW5jdGlvbiByZXZlcnNlKCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgdmFyIGxlbmd0aCA9IHZhbGlkYXRlKHRoYXQpLmxlbmd0aDtcbiAgICAgIHZhciBtaWRkbGUgPSBNYXRoLmZsb29yKGxlbmd0aCAvIDIpO1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIHZhciB2YWx1ZTtcbiAgICAgIHdoaWxlIChpbmRleCA8IG1pZGRsZSkge1xuICAgICAgICB2YWx1ZSA9IHRoYXRbaW5kZXhdO1xuICAgICAgICB0aGF0W2luZGV4KytdID0gdGhhdFstLWxlbmd0aF07XG4gICAgICAgIHRoYXRbbGVuZ3RoXSA9IHZhbHVlO1xuICAgICAgfSByZXR1cm4gdGhhdDtcbiAgICB9LFxuICAgIHNvbWU6IGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheVNvbWUodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKSB7XG4gICAgICByZXR1cm4gYXJyYXlTb3J0LmNhbGwodmFsaWRhdGUodGhpcyksIGNvbXBhcmVmbik7XG4gICAgfSxcbiAgICBzdWJhcnJheTogZnVuY3Rpb24gc3ViYXJyYXkoYmVnaW4sIGVuZCkge1xuICAgICAgdmFyIE8gPSB2YWxpZGF0ZSh0aGlzKTtcbiAgICAgIHZhciBsZW5ndGggPSBPLmxlbmd0aDtcbiAgICAgIHZhciAkYmVnaW4gPSB0b0Fic29sdXRlSW5kZXgoYmVnaW4sIGxlbmd0aCk7XG4gICAgICByZXR1cm4gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSkoXG4gICAgICAgIE8uYnVmZmVyLFxuICAgICAgICBPLmJ5dGVPZmZzZXQgKyAkYmVnaW4gKiBPLkJZVEVTX1BFUl9FTEVNRU5ULFxuICAgICAgICB0b0xlbmd0aCgoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW5ndGgpKSAtICRiZWdpbilcbiAgICAgICk7XG4gICAgfVxuICB9O1xuXG4gIHZhciAkc2xpY2UgPSBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIHNwZWNpZXNGcm9tTGlzdCh0aGlzLCBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcyksIHN0YXJ0LCBlbmQpKTtcbiAgfTtcblxuICB2YXIgJHNldCA9IGZ1bmN0aW9uIHNldChhcnJheUxpa2UgLyogLCBvZmZzZXQgKi8pIHtcbiAgICB2YWxpZGF0ZSh0aGlzKTtcbiAgICB2YXIgb2Zmc2V0ID0gdG9PZmZzZXQoYXJndW1lbnRzWzFdLCAxKTtcbiAgICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgdmFyIHNyYyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHNyYy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgaWYgKGxlbiArIG9mZnNldCA+IGxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgIHdoaWxlIChpbmRleCA8IGxlbikgdGhpc1tvZmZzZXQgKyBpbmRleF0gPSBzcmNbaW5kZXgrK107XG4gIH07XG5cbiAgdmFyICRpdGVyYXRvcnMgPSB7XG4gICAgZW50cmllczogZnVuY3Rpb24gZW50cmllcygpIHtcbiAgICAgIHJldHVybiBhcnJheUVudHJpZXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfSxcbiAgICBrZXlzOiBmdW5jdGlvbiBrZXlzKCkge1xuICAgICAgcmV0dXJuIGFycmF5S2V5cy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9LFxuICAgIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKCkge1xuICAgICAgcmV0dXJuIGFycmF5VmFsdWVzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaXNUQUluZGV4ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHRhcmdldClcbiAgICAgICYmIHRhcmdldFtUWVBFRF9BUlJBWV1cbiAgICAgICYmIHR5cGVvZiBrZXkgIT0gJ3N5bWJvbCdcbiAgICAgICYmIGtleSBpbiB0YXJnZXRcbiAgICAgICYmIFN0cmluZygra2V5KSA9PSBTdHJpbmcoa2V5KTtcbiAgfTtcbiAgdmFyICRnZXREZXNjID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSB7XG4gICAgcmV0dXJuIGlzVEFJbmRleCh0YXJnZXQsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpXG4gICAgICA/IHByb3BlcnR5RGVzYygyLCB0YXJnZXRba2V5XSlcbiAgICAgIDogZ09QRCh0YXJnZXQsIGtleSk7XG4gIH07XG4gIHZhciAkc2V0RGVzYyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgaWYgKGlzVEFJbmRleCh0YXJnZXQsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpXG4gICAgICAmJiBpc09iamVjdChkZXNjKVxuICAgICAgJiYgaGFzKGRlc2MsICd2YWx1ZScpXG4gICAgICAmJiAhaGFzKGRlc2MsICdnZXQnKVxuICAgICAgJiYgIWhhcyhkZXNjLCAnc2V0JylcbiAgICAgIC8vIFRPRE86IGFkZCB2YWxpZGF0aW9uIGRlc2NyaXB0b3Igdy9vIGNhbGxpbmcgYWNjZXNzb3JzXG4gICAgICAmJiAhZGVzYy5jb25maWd1cmFibGVcbiAgICAgICYmICghaGFzKGRlc2MsICd3cml0YWJsZScpIHx8IGRlc2Mud3JpdGFibGUpXG4gICAgICAmJiAoIWhhcyhkZXNjLCAnZW51bWVyYWJsZScpIHx8IGRlc2MuZW51bWVyYWJsZSlcbiAgICApIHtcbiAgICAgIHRhcmdldFtrZXldID0gZGVzYy52YWx1ZTtcbiAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfSByZXR1cm4gZFAodGFyZ2V0LCBrZXksIGRlc2MpO1xuICB9O1xuXG4gIGlmICghQUxMX0NPTlNUUlVDVE9SUykge1xuICAgICRHT1BELmYgPSAkZ2V0RGVzYztcbiAgICAkRFAuZiA9ICRzZXREZXNjO1xuICB9XG5cbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhQUxMX0NPTlNUUlVDVE9SUywgJ09iamVjdCcsIHtcbiAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXREZXNjLFxuICAgIGRlZmluZVByb3BlcnR5OiAkc2V0RGVzY1xuICB9KTtcblxuICBpZiAoZmFpbHMoZnVuY3Rpb24gKCkgeyBhcnJheVRvU3RyaW5nLmNhbGwoe30pOyB9KSkge1xuICAgIGFycmF5VG9TdHJpbmcgPSBhcnJheVRvTG9jYWxlU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICByZXR1cm4gYXJyYXlKb2luLmNhbGwodGhpcyk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciAkVHlwZWRBcnJheVByb3RvdHlwZSQgPSByZWRlZmluZUFsbCh7fSwgcHJvdG8pO1xuICByZWRlZmluZUFsbCgkVHlwZWRBcnJheVByb3RvdHlwZSQsICRpdGVyYXRvcnMpO1xuICBoaWRlKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgSVRFUkFUT1IsICRpdGVyYXRvcnMudmFsdWVzKTtcbiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCB7XG4gICAgc2xpY2U6ICRzbGljZSxcbiAgICBzZXQ6ICRzZXQsXG4gICAgY29uc3RydWN0b3I6IGZ1bmN0aW9uICgpIHsgLyogbm9vcCAqLyB9LFxuICAgIHRvU3RyaW5nOiBhcnJheVRvU3RyaW5nLFxuICAgIHRvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmdcbiAgfSk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdidWZmZXInLCAnYicpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnl0ZU9mZnNldCcsICdvJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdieXRlTGVuZ3RoJywgJ2wnKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2xlbmd0aCcsICdlJyk7XG4gIGRQKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgVEFHLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzW1RZUEVEX0FSUkFZXTsgfVxuICB9KTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXN0YXRlbWVudHNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBCWVRFUywgd3JhcHBlciwgQ0xBTVBFRCkge1xuICAgIENMQU1QRUQgPSAhIUNMQU1QRUQ7XG4gICAgdmFyIE5BTUUgPSBLRVkgKyAoQ0xBTVBFRCA/ICdDbGFtcGVkJyA6ICcnKSArICdBcnJheSc7XG4gICAgdmFyIEdFVFRFUiA9ICdnZXQnICsgS0VZO1xuICAgIHZhciBTRVRURVIgPSAnc2V0JyArIEtFWTtcbiAgICB2YXIgVHlwZWRBcnJheSA9IGdsb2JhbFtOQU1FXTtcbiAgICB2YXIgQmFzZSA9IFR5cGVkQXJyYXkgfHwge307XG4gICAgdmFyIFRBQyA9IFR5cGVkQXJyYXkgJiYgZ2V0UHJvdG90eXBlT2YoVHlwZWRBcnJheSk7XG4gICAgdmFyIEZPUkNFRCA9ICFUeXBlZEFycmF5IHx8ICEkdHlwZWQuQUJWO1xuICAgIHZhciBPID0ge307XG4gICAgdmFyIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBUeXBlZEFycmF5ICYmIFR5cGVkQXJyYXlbUFJPVE9UWVBFXTtcbiAgICB2YXIgZ2V0dGVyID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoYXQuX2Q7XG4gICAgICByZXR1cm4gZGF0YS52W0dFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEubywgTElUVExFX0VORElBTik7XG4gICAgfTtcbiAgICB2YXIgc2V0dGVyID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kO1xuICAgICAgaWYgKENMQU1QRUQpIHZhbHVlID0gKHZhbHVlID0gTWF0aC5yb3VuZCh2YWx1ZSkpIDwgMCA/IDAgOiB2YWx1ZSA+IDB4ZmYgPyAweGZmIDogdmFsdWUgJiAweGZmO1xuICAgICAgZGF0YS52W1NFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEubywgdmFsdWUsIExJVFRMRV9FTkRJQU4pO1xuICAgIH07XG4gICAgdmFyIGFkZEVsZW1lbnQgPSBmdW5jdGlvbiAodGhhdCwgaW5kZXgpIHtcbiAgICAgIGRQKHRoYXQsIGluZGV4LCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBnZXR0ZXIodGhpcywgaW5kZXgpO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBzZXR0ZXIodGhpcywgaW5kZXgsIHZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSB7XG4gICAgICBUeXBlZEFycmF5ID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgZGF0YSwgJG9mZnNldCwgJGxlbmd0aCkge1xuICAgICAgICBhbkluc3RhbmNlKHRoYXQsIFR5cGVkQXJyYXksIE5BTUUsICdfZCcpO1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICB2YXIgb2Zmc2V0ID0gMDtcbiAgICAgICAgdmFyIGJ1ZmZlciwgYnl0ZUxlbmd0aCwgbGVuZ3RoLCBrbGFzcztcbiAgICAgICAgaWYgKCFpc09iamVjdChkYXRhKSkge1xuICAgICAgICAgIGxlbmd0aCA9IHRvSW5kZXgoZGF0YSk7XG4gICAgICAgICAgYnl0ZUxlbmd0aCA9IGxlbmd0aCAqIEJZVEVTO1xuICAgICAgICAgIGJ1ZmZlciA9IG5ldyAkQXJyYXlCdWZmZXIoYnl0ZUxlbmd0aCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YSBpbnN0YW5jZW9mICRBcnJheUJ1ZmZlciB8fCAoa2xhc3MgPSBjbGFzc29mKGRhdGEpKSA9PSBBUlJBWV9CVUZGRVIgfHwga2xhc3MgPT0gU0hBUkVEX0JVRkZFUikge1xuICAgICAgICAgIGJ1ZmZlciA9IGRhdGE7XG4gICAgICAgICAgb2Zmc2V0ID0gdG9PZmZzZXQoJG9mZnNldCwgQllURVMpO1xuICAgICAgICAgIHZhciAkbGVuID0gZGF0YS5ieXRlTGVuZ3RoO1xuICAgICAgICAgIGlmICgkbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICgkbGVuICUgQllURVMpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSAkbGVuIC0gb2Zmc2V0O1xuICAgICAgICAgICAgaWYgKGJ5dGVMZW5ndGggPCAwKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSB0b0xlbmd0aCgkbGVuZ3RoKSAqIEJZVEVTO1xuICAgICAgICAgICAgaWYgKGJ5dGVMZW5ndGggKyBvZmZzZXQgPiAkbGVuKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxlbmd0aCA9IGJ5dGVMZW5ndGggLyBCWVRFUztcbiAgICAgICAgfSBlbHNlIGlmIChUWVBFRF9BUlJBWSBpbiBkYXRhKSB7XG4gICAgICAgICAgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiAkZnJvbS5jYWxsKFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGhpZGUodGhhdCwgJ19kJywge1xuICAgICAgICAgIGI6IGJ1ZmZlcixcbiAgICAgICAgICBvOiBvZmZzZXQsXG4gICAgICAgICAgbDogYnl0ZUxlbmd0aCxcbiAgICAgICAgICBlOiBsZW5ndGgsXG4gICAgICAgICAgdjogbmV3ICREYXRhVmlldyhidWZmZXIpXG4gICAgICAgIH0pO1xuICAgICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIGFkZEVsZW1lbnQodGhhdCwgaW5kZXgrKyk7XG4gICAgICB9KTtcbiAgICAgIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBUeXBlZEFycmF5W1BST1RPVFlQRV0gPSBjcmVhdGUoJFR5cGVkQXJyYXlQcm90b3R5cGUkKTtcbiAgICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgJ2NvbnN0cnVjdG9yJywgVHlwZWRBcnJheSk7XG4gICAgfSBlbHNlIGlmICghZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgVHlwZWRBcnJheSgxKTtcbiAgICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoLTEpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIH0pIHx8ICEkaXRlckRldGVjdChmdW5jdGlvbiAoaXRlcikge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KG51bGwpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgICAgbmV3IFR5cGVkQXJyYXkoMS41KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KGl0ZXIpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIH0sIHRydWUpKSB7XG4gICAgICBUeXBlZEFycmF5ID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgZGF0YSwgJG9mZnNldCwgJGxlbmd0aCkge1xuICAgICAgICBhbkluc3RhbmNlKHRoYXQsIFR5cGVkQXJyYXksIE5BTUUpO1xuICAgICAgICB2YXIga2xhc3M7XG4gICAgICAgIC8vIGB3c2AgbW9kdWxlIGJ1ZywgdGVtcG9yYXJpbHkgcmVtb3ZlIHZhbGlkYXRpb24gbGVuZ3RoIGZvciBVaW50OEFycmF5XG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJzb2NrZXRzL3dzL3B1bGwvNjQ1XG4gICAgICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHJldHVybiBuZXcgQmFzZSh0b0luZGV4KGRhdGEpKTtcbiAgICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpIHtcbiAgICAgICAgICByZXR1cm4gJGxlbmd0aCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IG5ldyBCYXNlKGRhdGEsIHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKSwgJGxlbmd0aClcbiAgICAgICAgICAgIDogJG9mZnNldCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gbmV3IEJhc2UoZGF0YSwgdG9PZmZzZXQoJG9mZnNldCwgQllURVMpKVxuICAgICAgICAgICAgICA6IG5ldyBCYXNlKGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChUWVBFRF9BUlJBWSBpbiBkYXRhKSByZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICAgIHJldHVybiAkZnJvbS5jYWxsKFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgfSk7XG4gICAgICBhcnJheUZvckVhY2goVEFDICE9PSBGdW5jdGlvbi5wcm90b3R5cGUgPyBnT1BOKEJhc2UpLmNvbmNhdChnT1BOKFRBQykpIDogZ09QTihCYXNlKSwgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIShrZXkgaW4gVHlwZWRBcnJheSkpIGhpZGUoVHlwZWRBcnJheSwga2V5LCBCYXNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgICBUeXBlZEFycmF5W1BST1RPVFlQRV0gPSBUeXBlZEFycmF5UHJvdG90eXBlO1xuICAgICAgaWYgKCFMSUJSQVJZKSBUeXBlZEFycmF5UHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVHlwZWRBcnJheTtcbiAgICB9XG4gICAgdmFyICRuYXRpdmVJdGVyYXRvciA9IFR5cGVkQXJyYXlQcm90b3R5cGVbSVRFUkFUT1JdO1xuICAgIHZhciBDT1JSRUNUX0lURVJfTkFNRSA9ICEhJG5hdGl2ZUl0ZXJhdG9yXG4gICAgICAmJiAoJG5hdGl2ZUl0ZXJhdG9yLm5hbWUgPT0gJ3ZhbHVlcycgfHwgJG5hdGl2ZUl0ZXJhdG9yLm5hbWUgPT0gdW5kZWZpbmVkKTtcbiAgICB2YXIgJGl0ZXJhdG9yID0gJGl0ZXJhdG9ycy52YWx1ZXM7XG4gICAgaGlkZShUeXBlZEFycmF5LCBUWVBFRF9DT05TVFJVQ1RPUiwgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBUWVBFRF9BUlJBWSwgTkFNRSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBWSUVXLCB0cnVlKTtcbiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIERFRl9DT05TVFJVQ1RPUiwgVHlwZWRBcnJheSk7XG5cbiAgICBpZiAoQ0xBTVBFRCA/IG5ldyBUeXBlZEFycmF5KDEpW1RBR10gIT0gTkFNRSA6ICEoVEFHIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKSB7XG4gICAgICBkUChUeXBlZEFycmF5UHJvdG90eXBlLCBUQUcsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBOQU1FOyB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBPW05BTUVdID0gVHlwZWRBcnJheTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKFR5cGVkQXJyYXkgIT0gQmFzZSksIE8pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlMsIE5BTUUsIHtcbiAgICAgIEJZVEVTX1BFUl9FTEVNRU5UOiBCWVRFU1xuICAgIH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7IEJhc2Uub2YuY2FsbChUeXBlZEFycmF5LCAxKTsgfSksIE5BTUUsIHtcbiAgICAgIGZyb206ICRmcm9tLFxuICAgICAgb2Y6ICRvZlxuICAgIH0pO1xuXG4gICAgaWYgKCEoQllURVNfUEVSX0VMRU1FTlQgaW4gVHlwZWRBcnJheVByb3RvdHlwZSkpIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgQllURVNfUEVSX0VMRU1FTlQsIEJZVEVTKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QLCBOQU1FLCBwcm90byk7XG5cbiAgICBzZXRTcGVjaWVzKE5BTUUpO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBGT1JDRURfU0VULCBOQU1FLCB7IHNldDogJHNldCB9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIUNPUlJFQ1RfSVRFUl9OQU1FLCBOQU1FLCAkaXRlcmF0b3JzKTtcblxuICAgIGlmICghTElCUkFSWSAmJiBUeXBlZEFycmF5UHJvdG90eXBlLnRvU3RyaW5nICE9IGFycmF5VG9TdHJpbmcpIFR5cGVkQXJyYXlQcm90b3R5cGUudG9TdHJpbmcgPSBhcnJheVRvU3RyaW5nO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBuZXcgVHlwZWRBcnJheSgxKS5zbGljZSgpO1xuICAgIH0pLCBOQU1FLCB7IHNsaWNlOiAkc2xpY2UgfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gWzEsIDJdLnRvTG9jYWxlU3RyaW5nKCkgIT0gbmV3IFR5cGVkQXJyYXkoWzEsIDJdKS50b0xvY2FsZVN0cmluZygpO1xuICAgIH0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBUeXBlZEFycmF5UHJvdG90eXBlLnRvTG9jYWxlU3RyaW5nLmNhbGwoWzEsIDJdKTtcbiAgICB9KSksIE5BTUUsIHsgdG9Mb2NhbGVTdHJpbmc6ICR0b0xvY2FsZVN0cmluZyB9KTtcblxuICAgIEl0ZXJhdG9yc1tOQU1FXSA9IENPUlJFQ1RfSVRFUl9OQU1FID8gJG5hdGl2ZUl0ZXJhdG9yIDogJGl0ZXJhdG9yO1xuICAgIGlmICghTElCUkFSWSAmJiAhQ09SUkVDVF9JVEVSX05BTUUpIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgSVRFUkFUT1IsICRpdGVyYXRvcik7XG4gIH07XG59IGVsc2UgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG5cbn0se1wiMTAwXCI6MTAwLFwiMTA0XCI6MTA0LFwiMTFcIjoxMSxcIjExNFwiOjExNCxcIjExNVwiOjExNSxcIjExNlwiOjExNixcIjExOFwiOjExOCxcIjExOVwiOjExOSxcIjEyXCI6MTIsXCIxMjBcIjoxMjAsXCIxMjJcIjoxMjIsXCIxMjNcIjoxMjMsXCIxMjRcIjoxMjQsXCIxMjhcIjoxMjgsXCIxMjlcIjoxMjksXCIxNDFcIjoxNDEsXCIxN1wiOjE3LFwiMjVcIjoyNSxcIjI5XCI6MjksXCIzM1wiOjMzLFwiMzVcIjozNSxcIjQwXCI6NDAsXCI0MVwiOjQxLFwiNDJcIjo0MixcIjQ4XCI6NDgsXCI1MVwiOjUxLFwiNTZcIjo1NixcIjU4XCI6NTgsXCI2XCI6NixcIjYwXCI6NjAsXCI3MVwiOjcxLFwiNzJcIjo3MixcIjc1XCI6NzUsXCI3N1wiOjc3LFwiNzlcIjo3OSxcIjhcIjo4LFwiOVwiOjksXCI5MlwiOjkyLFwiOTNcIjo5M31dLDEyMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gX2RlcmVxXyg0MCk7XG52YXIgREVTQ1JJUFRPUlMgPSBfZGVyZXFfKDI5KTtcbnZhciBMSUJSQVJZID0gX2RlcmVxXyg2MCk7XG52YXIgJHR5cGVkID0gX2RlcmVxXygxMjMpO1xudmFyIGhpZGUgPSBfZGVyZXFfKDQyKTtcbnZhciByZWRlZmluZUFsbCA9IF9kZXJlcV8oOTMpO1xudmFyIGZhaWxzID0gX2RlcmVxXygzNSk7XG52YXIgYW5JbnN0YW5jZSA9IF9kZXJlcV8oNik7XG52YXIgdG9JbnRlZ2VyID0gX2RlcmVxXygxMTYpO1xudmFyIHRvTGVuZ3RoID0gX2RlcmVxXygxMTgpO1xudmFyIHRvSW5kZXggPSBfZGVyZXFfKDExNSk7XG52YXIgZ09QTiA9IF9kZXJlcV8oNzcpLmY7XG52YXIgZFAgPSBfZGVyZXFfKDcyKS5mO1xudmFyIGFycmF5RmlsbCA9IF9kZXJlcV8oOSk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSBfZGVyZXFfKDEwMSk7XG52YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcbnZhciBEQVRBX1ZJRVcgPSAnRGF0YVZpZXcnO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIFdST05HX0xFTkdUSCA9ICdXcm9uZyBsZW5ndGghJztcbnZhciBXUk9OR19JTkRFWCA9ICdXcm9uZyBpbmRleCEnO1xudmFyICRBcnJheUJ1ZmZlciA9IGdsb2JhbFtBUlJBWV9CVUZGRVJdO1xudmFyICREYXRhVmlldyA9IGdsb2JhbFtEQVRBX1ZJRVddO1xudmFyIE1hdGggPSBnbG9iYWwuTWF0aDtcbnZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2hhZG93LXJlc3RyaWN0ZWQtbmFtZXNcbnZhciBJbmZpbml0eSA9IGdsb2JhbC5JbmZpbml0eTtcbnZhciBCYXNlQnVmZmVyID0gJEFycmF5QnVmZmVyO1xudmFyIGFicyA9IE1hdGguYWJzO1xudmFyIHBvdyA9IE1hdGgucG93O1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBsb2cgPSBNYXRoLmxvZztcbnZhciBMTjIgPSBNYXRoLkxOMjtcbnZhciBCVUZGRVIgPSAnYnVmZmVyJztcbnZhciBCWVRFX0xFTkdUSCA9ICdieXRlTGVuZ3RoJztcbnZhciBCWVRFX09GRlNFVCA9ICdieXRlT2Zmc2V0JztcbnZhciAkQlVGRkVSID0gREVTQ1JJUFRPUlMgPyAnX2InIDogQlVGRkVSO1xudmFyICRMRU5HVEggPSBERVNDUklQVE9SUyA/ICdfbCcgOiBCWVRFX0xFTkdUSDtcbnZhciAkT0ZGU0VUID0gREVTQ1JJUFRPUlMgPyAnX28nIDogQllURV9PRkZTRVQ7XG5cbi8vIElFRUU3NTQgY29udmVyc2lvbnMgYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9pZWVlNzU0XG5mdW5jdGlvbiBwYWNrSUVFRTc1NCh2YWx1ZSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBidWZmZXIgPSBBcnJheShuQnl0ZXMpO1xuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMTtcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIHJ0ID0gbUxlbiA9PT0gMjMgPyBwb3coMiwgLTI0KSAtIHBvdygyLCAtNzcpIDogMDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCB2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwID8gMSA6IDA7XG4gIHZhciBlLCBtLCBjO1xuICB2YWx1ZSA9IGFicyh2YWx1ZSk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgaWYgKHZhbHVlICE9IHZhbHVlIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBtID0gdmFsdWUgIT0gdmFsdWUgPyAxIDogMDtcbiAgICBlID0gZU1heDtcbiAgfSBlbHNlIHtcbiAgICBlID0gZmxvb3IobG9nKHZhbHVlKSAvIExOMik7XG4gICAgaWYgKHZhbHVlICogKGMgPSBwb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLTtcbiAgICAgIGMgKj0gMjtcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogcG93KDIsIDEgLSBlQmlhcyk7XG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrO1xuICAgICAgYyAvPSAyO1xuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwO1xuICAgICAgZSA9IGVNYXg7XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICh2YWx1ZSAqIGMgLSAxKSAqIHBvdygyLCBtTGVuKTtcbiAgICAgIGUgPSBlICsgZUJpYXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIHBvdygyLCBlQmlhcyAtIDEpICogcG93KDIsIG1MZW4pO1xuICAgICAgZSA9IDA7XG4gICAgfVxuICB9XG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltpKytdID0gbSAmIDI1NSwgbSAvPSAyNTYsIG1MZW4gLT0gOCk7XG4gIGUgPSBlIDw8IG1MZW4gfCBtO1xuICBlTGVuICs9IG1MZW47XG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW2krK10gPSBlICYgMjU1LCBlIC89IDI1NiwgZUxlbiAtPSA4KTtcbiAgYnVmZmVyWy0taV0gfD0gcyAqIDEyODtcbiAgcmV0dXJuIGJ1ZmZlcjtcbn1cbmZ1bmN0aW9uIHVucGFja0lFRUU3NTQoYnVmZmVyLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDE7XG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxO1xuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDE7XG4gIHZhciBuQml0cyA9IGVMZW4gLSA3O1xuICB2YXIgaSA9IG5CeXRlcyAtIDE7XG4gIHZhciBzID0gYnVmZmVyW2ktLV07XG4gIHZhciBlID0gcyAmIDEyNztcbiAgdmFyIG07XG4gIHMgPj49IDc7XG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSBlICogMjU2ICsgYnVmZmVyW2ldLCBpLS0sIG5CaXRzIC09IDgpO1xuICBtID0gZSAmICgxIDw8IC1uQml0cykgLSAxO1xuICBlID4+PSAtbkJpdHM7XG4gIG5CaXRzICs9IG1MZW47XG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSBtICogMjU2ICsgYnVmZmVyW2ldLCBpLS0sIG5CaXRzIC09IDgpO1xuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXM7XG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogcyA/IC1JbmZpbml0eSA6IEluZmluaXR5O1xuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgcG93KDIsIG1MZW4pO1xuICAgIGUgPSBlIC0gZUJpYXM7XG4gIH0gcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBwb3coMiwgZSAtIG1MZW4pO1xufVxuXG5mdW5jdGlvbiB1bnBhY2tJMzIoYnl0ZXMpIHtcbiAgcmV0dXJuIGJ5dGVzWzNdIDw8IDI0IHwgYnl0ZXNbMl0gPDwgMTYgfCBieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF07XG59XG5mdW5jdGlvbiBwYWNrSTgoaXQpIHtcbiAgcmV0dXJuIFtpdCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0kxNihpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZiwgaXQgPj4gOCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0kzMihpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZiwgaXQgPj4gOCAmIDB4ZmYsIGl0ID4+IDE2ICYgMHhmZiwgaXQgPj4gMjQgJiAweGZmXTtcbn1cbmZ1bmN0aW9uIHBhY2tGNjQoaXQpIHtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KGl0LCA1MiwgOCk7XG59XG5mdW5jdGlvbiBwYWNrRjMyKGl0KSB7XG4gIHJldHVybiBwYWNrSUVFRTc1NChpdCwgMjMsIDQpO1xufVxuXG5mdW5jdGlvbiBhZGRHZXR0ZXIoQywga2V5LCBpbnRlcm5hbCkge1xuICBkUChDW1BST1RPVFlQRV0sIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXNbaW50ZXJuYWxdOyB9IH0pO1xufVxuXG5mdW5jdGlvbiBnZXQodmlldywgYnl0ZXMsIGluZGV4LCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgbnVtSW5kZXggPSAraW5kZXg7XG4gIHZhciBpbnRJbmRleCA9IHRvSW5kZXgobnVtSW5kZXgpO1xuICBpZiAoaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgc3RvcmUgPSB2aWV3WyRCVUZGRVJdLl9iO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHZpZXdbJE9GRlNFVF07XG4gIHZhciBwYWNrID0gc3RvcmUuc2xpY2Uoc3RhcnQsIHN0YXJ0ICsgYnl0ZXMpO1xuICByZXR1cm4gaXNMaXR0bGVFbmRpYW4gPyBwYWNrIDogcGFjay5yZXZlcnNlKCk7XG59XG5mdW5jdGlvbiBzZXQodmlldywgYnl0ZXMsIGluZGV4LCBjb252ZXJzaW9uLCB2YWx1ZSwgaXNMaXR0bGVFbmRpYW4pIHtcbiAgdmFyIG51bUluZGV4ID0gK2luZGV4O1xuICB2YXIgaW50SW5kZXggPSB0b0luZGV4KG51bUluZGV4KTtcbiAgaWYgKGludEluZGV4ICsgYnl0ZXMgPiB2aWV3WyRMRU5HVEhdKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTtcbiAgdmFyIHN0b3JlID0gdmlld1skQlVGRkVSXS5fYjtcbiAgdmFyIHN0YXJ0ID0gaW50SW5kZXggKyB2aWV3WyRPRkZTRVRdO1xuICB2YXIgcGFjayA9IGNvbnZlcnNpb24oK3ZhbHVlKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlczsgaSsrKSBzdG9yZVtzdGFydCArIGldID0gcGFja1tpc0xpdHRsZUVuZGlhbiA/IGkgOiBieXRlcyAtIGkgLSAxXTtcbn1cblxuaWYgKCEkdHlwZWQuQUJWKSB7XG4gICRBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIEFycmF5QnVmZmVyKGxlbmd0aCkge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpO1xuICAgIHZhciBieXRlTGVuZ3RoID0gdG9JbmRleChsZW5ndGgpO1xuICAgIHRoaXMuX2IgPSBhcnJheUZpbGwuY2FsbChBcnJheShieXRlTGVuZ3RoKSwgMCk7XG4gICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgJERhdGFWaWV3ID0gZnVuY3Rpb24gRGF0YVZpZXcoYnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkRGF0YVZpZXcsIERBVEFfVklFVyk7XG4gICAgYW5JbnN0YW5jZShidWZmZXIsICRBcnJheUJ1ZmZlciwgREFUQV9WSUVXKTtcbiAgICB2YXIgYnVmZmVyTGVuZ3RoID0gYnVmZmVyWyRMRU5HVEhdO1xuICAgIHZhciBvZmZzZXQgPSB0b0ludGVnZXIoYnl0ZU9mZnNldCk7XG4gICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XG4gICAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPT09IHVuZGVmaW5lZCA/IGJ1ZmZlckxlbmd0aCAtIG9mZnNldCA6IHRvTGVuZ3RoKGJ5dGVMZW5ndGgpO1xuICAgIGlmIChvZmZzZXQgKyBieXRlTGVuZ3RoID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgdGhpc1skQlVGRkVSXSA9IGJ1ZmZlcjtcbiAgICB0aGlzWyRPRkZTRVRdID0gb2Zmc2V0O1xuICAgIHRoaXNbJExFTkdUSF0gPSBieXRlTGVuZ3RoO1xuICB9O1xuXG4gIGlmIChERVNDUklQVE9SUykge1xuICAgIGFkZEdldHRlcigkQXJyYXlCdWZmZXIsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCVUZGRVIsICdfYicpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCWVRFX09GRlNFVCwgJ19vJyk7XG4gIH1cblxuICByZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xuICAgIGdldEludDg6IGZ1bmN0aW9uIGdldEludDgoYnl0ZU9mZnNldCkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXSA8PCAyNCA+PiAyNDtcbiAgICB9LFxuICAgIGdldFVpbnQ4OiBmdW5jdGlvbiBnZXRVaW50OChieXRlT2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MTY6IGZ1bmN0aW9uIGdldEludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pO1xuICAgICAgcmV0dXJuIChieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF0pIDw8IDE2ID4+IDE2O1xuICAgIH0sXG4gICAgZ2V0VWludDE2OiBmdW5jdGlvbiBnZXRVaW50MTYoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSk7XG4gICAgICByZXR1cm4gYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MzI6IGZ1bmN0aW9uIGdldEludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSkpO1xuICAgIH0sXG4gICAgZ2V0VWludDMyOiBmdW5jdGlvbiBnZXRVaW50MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSkgPj4+IDA7XG4gICAgfSxcbiAgICBnZXRGbG9hdDMyOiBmdW5jdGlvbiBnZXRGbG9hdDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCAyMywgNCk7XG4gICAgfSxcbiAgICBnZXRGbG9hdDY0OiBmdW5jdGlvbiBnZXRGbG9hdDY0KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCA1MiwgOCk7XG4gICAgfSxcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0k4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSTgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldEludDE2OiBmdW5jdGlvbiBzZXRJbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJMTYsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDE2OiBmdW5jdGlvbiBzZXRVaW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEludDMyOiBmdW5jdGlvbiBzZXRJbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDMyOiBmdW5jdGlvbiBzZXRVaW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSTMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0MzI6IGZ1bmN0aW9uIHNldEZsb2F0MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrRjMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0NjQ6IGZ1bmN0aW9uIHNldEZsb2F0NjQoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBwYWNrRjY0LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9XG4gIH0pO1xufSBlbHNlIHtcbiAgaWYgKCFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgJEFycmF5QnVmZmVyKDEpO1xuICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoLTEpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICB9KSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3ICRBcnJheUJ1ZmZlcigpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoMS41KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBuZXcgJEFycmF5QnVmZmVyKE5hTik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgcmV0dXJuICRBcnJheUJ1ZmZlci5uYW1lICE9IEFSUkFZX0JVRkZFUjtcbiAgfSkpIHtcbiAgICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyKTtcbiAgICAgIHJldHVybiBuZXcgQmFzZUJ1ZmZlcih0b0luZGV4KGxlbmd0aCkpO1xuICAgIH07XG4gICAgdmFyIEFycmF5QnVmZmVyUHJvdG8gPSAkQXJyYXlCdWZmZXJbUFJPVE9UWVBFXSA9IEJhc2VCdWZmZXJbUFJPVE9UWVBFXTtcbiAgICBmb3IgKHZhciBrZXlzID0gZ09QTihCYXNlQnVmZmVyKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOykge1xuICAgICAgaWYgKCEoKGtleSA9IGtleXNbaisrXSkgaW4gJEFycmF5QnVmZmVyKSkgaGlkZSgkQXJyYXlCdWZmZXIsIGtleSwgQmFzZUJ1ZmZlcltrZXldKTtcbiAgICB9XG4gICAgaWYgKCFMSUJSQVJZKSBBcnJheUJ1ZmZlclByb3RvLmNvbnN0cnVjdG9yID0gJEFycmF5QnVmZmVyO1xuICB9XG4gIC8vIGlPUyBTYWZhcmkgNy54IGJ1Z1xuICB2YXIgdmlldyA9IG5ldyAkRGF0YVZpZXcobmV3ICRBcnJheUJ1ZmZlcigyKSk7XG4gIHZhciAkc2V0SW50OCA9ICREYXRhVmlld1tQUk9UT1RZUEVdLnNldEludDg7XG4gIHZpZXcuc2V0SW50OCgwLCAyMTQ3NDgzNjQ4KTtcbiAgdmlldy5zZXRJbnQ4KDEsIDIxNDc0ODM2NDkpO1xuICBpZiAodmlldy5nZXRJbnQ4KDApIHx8ICF2aWV3LmdldEludDgoMSkpIHJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7XG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH1cbiAgfSwgdHJ1ZSk7XG59XG5zZXRUb1N0cmluZ1RhZygkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG5zZXRUb1N0cmluZ1RhZygkRGF0YVZpZXcsIERBVEFfVklFVyk7XG5oaWRlKCREYXRhVmlld1tQUk9UT1RZUEVdLCAkdHlwZWQuVklFVywgdHJ1ZSk7XG5leHBvcnRzW0FSUkFZX0JVRkZFUl0gPSAkQXJyYXlCdWZmZXI7XG5leHBvcnRzW0RBVEFfVklFV10gPSAkRGF0YVZpZXc7XG5cbn0se1wiMTAxXCI6MTAxLFwiMTE1XCI6MTE1LFwiMTE2XCI6MTE2LFwiMTE4XCI6MTE4LFwiMTIzXCI6MTIzLFwiMjlcIjoyOSxcIjM1XCI6MzUsXCI0MFwiOjQwLFwiNDJcIjo0MixcIjZcIjo2LFwiNjBcIjo2MCxcIjcyXCI6NzIsXCI3N1wiOjc3LFwiOVwiOjksXCI5M1wiOjkzfV0sMTIzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBnbG9iYWwgPSBfZGVyZXFfKDQwKTtcbnZhciBoaWRlID0gX2RlcmVxXyg0Mik7XG52YXIgdWlkID0gX2RlcmVxXygxMjQpO1xudmFyIFRZUEVEID0gdWlkKCd0eXBlZF9hcnJheScpO1xudmFyIFZJRVcgPSB1aWQoJ3ZpZXcnKTtcbnZhciBBQlYgPSAhIShnbG9iYWwuQXJyYXlCdWZmZXIgJiYgZ2xvYmFsLkRhdGFWaWV3KTtcbnZhciBDT05TVFIgPSBBQlY7XG52YXIgaSA9IDA7XG52YXIgbCA9IDk7XG52YXIgVHlwZWQ7XG5cbnZhciBUeXBlZEFycmF5Q29uc3RydWN0b3JzID0gKFxuICAnSW50OEFycmF5LFVpbnQ4QXJyYXksVWludDhDbGFtcGVkQXJyYXksSW50MTZBcnJheSxVaW50MTZBcnJheSxJbnQzMkFycmF5LFVpbnQzMkFycmF5LEZsb2F0MzJBcnJheSxGbG9hdDY0QXJyYXknXG4pLnNwbGl0KCcsJyk7XG5cbndoaWxlIChpIDwgbCkge1xuICBpZiAoVHlwZWQgPSBnbG9iYWxbVHlwZWRBcnJheUNvbnN0cnVjdG9yc1tpKytdXSkge1xuICAgIGhpZGUoVHlwZWQucHJvdG90eXBlLCBUWVBFRCwgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZC5wcm90b3R5cGUsIFZJRVcsIHRydWUpO1xuICB9IGVsc2UgQ09OU1RSID0gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBBQlY6IEFCVixcbiAgQ09OU1RSOiBDT05TVFIsXG4gIFRZUEVEOiBUWVBFRCxcbiAgVklFVzogVklFV1xufTtcblxufSx7XCIxMjRcIjoxMjQsXCI0MFwiOjQwLFwiNDJcIjo0Mn1dLDEyNDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgaWQgPSAwO1xudmFyIHB4ID0gTWF0aC5yYW5kb20oKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnLmNvbmNhdChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5LCAnKV8nLCAoKytpZCArIHB4KS50b1N0cmluZygzNikpO1xufTtcblxufSx7fV0sMTI1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBpc09iamVjdCA9IF9kZXJlcV8oNTEpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFRZUEUpIHtcbiAgaWYgKCFpc09iamVjdChpdCkgfHwgaXQuX3QgIT09IFRZUEUpIHRocm93IFR5cGVFcnJvcignSW5jb21wYXRpYmxlIHJlY2VpdmVyLCAnICsgVFlQRSArICcgcmVxdWlyZWQhJyk7XG4gIHJldHVybiBpdDtcbn07XG5cbn0se1wiNTFcIjo1MX1dLDEyNjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgZ2xvYmFsID0gX2RlcmVxXyg0MCk7XG52YXIgY29yZSA9IF9kZXJlcV8oMjMpO1xudmFyIExJQlJBUlkgPSBfZGVyZXFfKDYwKTtcbnZhciB3a3NFeHQgPSBfZGVyZXFfKDEyNyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSBfZGVyZXFfKDcyKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICB2YXIgJFN5bWJvbCA9IGNvcmUuU3ltYm9sIHx8IChjb3JlLlN5bWJvbCA9IExJQlJBUlkgPyB7fSA6IGdsb2JhbC5TeW1ib2wgfHwge30pO1xuICBpZiAobmFtZS5jaGFyQXQoMCkgIT0gJ18nICYmICEobmFtZSBpbiAkU3ltYm9sKSkgZGVmaW5lUHJvcGVydHkoJFN5bWJvbCwgbmFtZSwgeyB2YWx1ZTogd2tzRXh0LmYobmFtZSkgfSk7XG59O1xuXG59LHtcIjEyN1wiOjEyNyxcIjIzXCI6MjMsXCI0MFwiOjQwLFwiNjBcIjo2MCxcIjcyXCI6NzJ9XSwxMjc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuZXhwb3J0cy5mID0gX2RlcmVxXygxMjgpO1xuXG59LHtcIjEyOFwiOjEyOH1dLDEyODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgc3RvcmUgPSBfZGVyZXFfKDEwMykoJ3drcycpO1xudmFyIHVpZCA9IF9kZXJlcV8oMTI0KTtcbnZhciBTeW1ib2wgPSBfZGVyZXFfKDQwKS5TeW1ib2w7XG52YXIgVVNFX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcblxudmFyICRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID1cbiAgICBVU0VfU1lNQk9MICYmIFN5bWJvbFtuYW1lXSB8fCAoVVNFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcblxuJGV4cG9ydHMuc3RvcmUgPSBzdG9yZTtcblxufSx7XCIxMDNcIjoxMDMsXCIxMjRcIjoxMjQsXCI0MFwiOjQwfV0sMTI5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBjbGFzc29mID0gX2RlcmVxXygxNyk7XG52YXIgSVRFUkFUT1IgPSBfZGVyZXFfKDEyOCkoJ2l0ZXJhdG9yJyk7XG52YXIgSXRlcmF0b3JzID0gX2RlcmVxXyg1OCk7XG5tb2R1bGUuZXhwb3J0cyA9IF9kZXJlcV8oMjMpLmdldEl0ZXJhdG9yTWV0aG9kID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCAhPSB1bmRlZmluZWQpIHJldHVybiBpdFtJVEVSQVRPUl1cbiAgICB8fCBpdFsnQEBpdGVyYXRvciddXG4gICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07XG5cbn0se1wiMTI4XCI6MTI4LFwiMTdcIjoxNyxcIjIzXCI6MjMsXCI1OFwiOjU4fV0sMTMwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iZW5qYW1pbmdyL1JleEV4cC5lc2NhcGVcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgJHJlID0gX2RlcmVxXyg5NSkoL1tcXFxcXiQqKz8uKCl8W1xcXXt9XS9nLCAnXFxcXCQmJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVnRXhwJywgeyBlc2NhcGU6IGZ1bmN0aW9uIGVzY2FwZShpdCkgeyByZXR1cm4gJHJlKGl0KTsgfSB9KTtcblxufSx7XCIzM1wiOjMzLFwiOTVcIjo5NX1dLDEzMTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7IGNvcHlXaXRoaW46IF9kZXJlcV8oOCkgfSk7XG5cbl9kZXJlcV8oNSkoJ2NvcHlXaXRoaW4nKTtcblxufSx7XCIzM1wiOjMzLFwiNVwiOjUsXCI4XCI6OH1dLDEzMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyICRldmVyeSA9IF9kZXJlcV8oMTIpKDQpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFfZGVyZXFfKDEwNSkoW10uZXZlcnksIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy41IC8gMTUuNC40LjE2IEFycmF5LnByb3RvdHlwZS5ldmVyeShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGV2ZXJ5KHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuXG59LHtcIjEwNVwiOjEwNSxcIjEyXCI6MTIsXCIzM1wiOjMzfV0sMTMzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDIyLjEuMy42IEFycmF5LnByb3RvdHlwZS5maWxsKHZhbHVlLCBzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKVxudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHsgZmlsbDogX2RlcmVxXyg5KSB9KTtcblxuX2RlcmVxXyg1KSgnZmlsbCcpO1xuXG59LHtcIjMzXCI6MzMsXCI1XCI6NSxcIjlcIjo5fV0sMTM0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgJGZpbHRlciA9IF9kZXJlcV8oMTIpKDIpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFfZGVyZXFfKDEwNSkoW10uZmlsdGVyLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuNyAvIDE1LjQuNC4yMCBBcnJheS5wcm90b3R5cGUuZmlsdGVyKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmaWx0ZXIodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG5cbn0se1wiMTA1XCI6MTA1LFwiMTJcIjoxMixcIjMzXCI6MzN9XSwxMzU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuLy8gMjIuMS4zLjkgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleChwcmVkaWNhdGUsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyICRmaW5kID0gX2RlcmVxXygxMikoNik7XG52YXIgS0VZID0gJ2ZpbmRJbmRleCc7XG52YXIgZm9yY2VkID0gdHJ1ZTtcbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoS0VZIGluIFtdKSBBcnJheSgxKVtLRVldKGZ1bmN0aW9uICgpIHsgZm9yY2VkID0gZmFsc2U7IH0pO1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHtcbiAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbl9kZXJlcV8oNSkoS0VZKTtcblxufSx7XCIxMlwiOjEyLFwiMzNcIjozMyxcIjVcIjo1fV0sMTM2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy44IEFycmF5LnByb3RvdHlwZS5maW5kKHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgJGZpbmQgPSBfZGVyZXFfKDEyKSg1KTtcbnZhciBLRVkgPSAnZmluZCc7XG52YXIgZm9yY2VkID0gdHJ1ZTtcbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoS0VZIGluIFtdKSBBcnJheSgxKVtLRVldKGZ1bmN0aW9uICgpIHsgZm9yY2VkID0gZmFsc2U7IH0pO1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHtcbiAgZmluZDogZnVuY3Rpb24gZmluZChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuX2RlcmVxXyg1KShLRVkpO1xuXG59LHtcIjEyXCI6MTIsXCIzM1wiOjMzLFwiNVwiOjV9XSwxMzc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciAkZm9yRWFjaCA9IF9kZXJlcV8oMTIpKDApO1xudmFyIFNUUklDVCA9IF9kZXJlcV8oMTA1KShbXS5mb3JFYWNoLCB0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhU1RSSUNULCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xMCAvIDE1LjQuNC4xOCBBcnJheS5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmb3JFYWNoKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuXG59LHtcIjEwNVwiOjEwNSxcIjEyXCI6MTIsXCIzM1wiOjMzfV0sMTM4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcbnZhciBjdHggPSBfZGVyZXFfKDI1KTtcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgdG9PYmplY3QgPSBfZGVyZXFfKDExOSk7XG52YXIgY2FsbCA9IF9kZXJlcV8oNTMpO1xudmFyIGlzQXJyYXlJdGVyID0gX2RlcmVxXyg0OCk7XG52YXIgdG9MZW5ndGggPSBfZGVyZXFfKDExOCk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSBfZGVyZXFfKDI0KTtcbnZhciBnZXRJdGVyRm4gPSBfZGVyZXFfKDEyOSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIV9kZXJlcV8oNTYpKGZ1bmN0aW9uIChpdGVyKSB7IEFycmF5LmZyb20oaXRlcik7IH0pLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMi4xIEFycmF5LmZyb20oYXJyYXlMaWtlLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgZnJvbTogZnVuY3Rpb24gZnJvbShhcnJheUxpa2UgLyogLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgICB2YXIgQyA9IHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBtYXBmbiA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBpdGVyRm4gPSBnZXRJdGVyRm4oTyk7XG4gICAgdmFyIGxlbmd0aCwgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZiAobWFwcGluZykgbWFwZm4gPSBjdHgobWFwZm4sIGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkLCAyKTtcbiAgICAvLyBpZiBvYmplY3QgaXNuJ3QgaXRlcmFibGUgb3IgaXQncyBhcnJheSB3aXRoIGRlZmF1bHQgaXRlcmF0b3IgLSB1c2Ugc2ltcGxlIGNhc2VcbiAgICBpZiAoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhKEMgPT0gQXJyYXkgJiYgaXNBcnJheUl0ZXIoaXRlckZuKSkpIHtcbiAgICAgIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgcmVzdWx0ID0gbmV3IEMoKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpbmRleCsrKSB7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBjYWxsKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSkgOiBzdGVwLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgICAgZm9yIChyZXN1bHQgPSBuZXcgQyhsZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gbWFwZm4oT1tpbmRleF0sIGluZGV4KSA6IE9baW5kZXhdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGluZGV4O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuXG59LHtcIjExOFwiOjExOCxcIjExOVwiOjExOSxcIjEyOVwiOjEyOSxcIjI0XCI6MjQsXCIyNVwiOjI1LFwiMzNcIjozMyxcIjQ4XCI6NDgsXCI1M1wiOjUzLFwiNTZcIjo1Nn1dLDEzOTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyICRpbmRleE9mID0gX2RlcmVxXygxMSkoZmFsc2UpO1xudmFyICRuYXRpdmUgPSBbXS5pbmRleE9mO1xudmFyIE5FR0FUSVZFX1pFUk8gPSAhISRuYXRpdmUgJiYgMSAvIFsxXS5pbmRleE9mKDEsIC0wKSA8IDA7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKE5FR0FUSVZFX1pFUk8gfHwgIV9kZXJlcV8oMTA1KSgkbmF0aXZlKSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjExIC8gMTUuNC40LjE0IEFycmF5LnByb3RvdHlwZS5pbmRleE9mKHNlYXJjaEVsZW1lbnQgWywgZnJvbUluZGV4XSlcbiAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHJldHVybiBORUdBVElWRV9aRVJPXG4gICAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgICA/ICRuYXRpdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwXG4gICAgICA6ICRpbmRleE9mKHRoaXMsIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuXG59LHtcIjEwNVwiOjEwNSxcIjExXCI6MTEsXCIzM1wiOjMzfV0sMTQwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDIyLjEuMi4yIC8gMTUuNC4zLjIgQXJyYXkuaXNBcnJheShhcmcpXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0FycmF5JywgeyBpc0FycmF5OiBfZGVyZXFfKDQ5KSB9KTtcblxufSx7XCIzM1wiOjMzLFwiNDlcIjo0OX1dLDE0MTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IF9kZXJlcV8oNSk7XG52YXIgc3RlcCA9IF9kZXJlcV8oNTcpO1xudmFyIEl0ZXJhdG9ycyA9IF9kZXJlcV8oNTgpO1xudmFyIHRvSU9iamVjdCA9IF9kZXJlcV8oMTE3KTtcblxuLy8gMjIuMS4zLjQgQXJyYXkucHJvdG90eXBlLmVudHJpZXMoKVxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcbi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKClcbi8vIDIyLjEuMy4zMCBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxubW9kdWxlLmV4cG9ydHMgPSBfZGVyZXFfKDU1KShBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gIHRoaXMuX3QgPSB0b0lPYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgIC8vIGtpbmRcbi8vIDIyLjEuNS4yLjEgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBraW5kID0gdGhpcy5faztcbiAgdmFyIGluZGV4ID0gdGhpcy5faSsrO1xuICBpZiAoIU8gfHwgaW5kZXggPj0gTy5sZW5ndGgpIHtcbiAgICB0aGlzLl90ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBzdGVwKDEpO1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHN0ZXAoMCwgaW5kZXgpO1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHN0ZXAoMCwgT1tpbmRleF0pO1xuICByZXR1cm4gc3RlcCgwLCBbaW5kZXgsIE9baW5kZXhdXSk7XG59LCAndmFsdWVzJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJSAoOS40LjQuNiwgOS40LjQuNylcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuXG59LHtcIjExN1wiOjExNyxcIjVcIjo1LFwiNTVcIjo1NSxcIjU3XCI6NTcsXCI1OFwiOjU4fV0sMTQyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUuam9pbihzZXBhcmF0b3IpXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIHRvSU9iamVjdCA9IF9kZXJlcV8oMTE3KTtcbnZhciBhcnJheUpvaW4gPSBbXS5qb2luO1xuXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2Ugc3RyaW5nc1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoX2RlcmVxXyg0NykgIT0gT2JqZWN0IHx8ICFfZGVyZXFfKDEwNSkoYXJyYXlKb2luKSksICdBcnJheScsIHtcbiAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpIHtcbiAgICByZXR1cm4gYXJyYXlKb2luLmNhbGwodG9JT2JqZWN0KHRoaXMpLCBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCA/ICcsJyA6IHNlcGFyYXRvcik7XG4gIH1cbn0pO1xuXG59LHtcIjEwNVwiOjEwNSxcIjExN1wiOjExNyxcIjMzXCI6MzMsXCI0N1wiOjQ3fV0sMTQzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgdG9JT2JqZWN0ID0gX2RlcmVxXygxMTcpO1xudmFyIHRvSW50ZWdlciA9IF9kZXJlcV8oMTE2KTtcbnZhciB0b0xlbmd0aCA9IF9kZXJlcV8oMTE4KTtcbnZhciAkbmF0aXZlID0gW10ubGFzdEluZGV4T2Y7XG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhJG5hdGl2ZSAmJiAxIC8gWzFdLmxhc3RJbmRleE9mKDEsIC0wKSA8IDA7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKE5FR0FUSVZFX1pFUk8gfHwgIV9kZXJlcV8oMTA1KSgkbmF0aXZlKSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE0IC8gMTUuNC40LjE1IEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IFssIGZyb21JbmRleF0pXG4gIGxhc3RJbmRleE9mOiBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gQFsqLTFdICovKSB7XG4gICAgLy8gY29udmVydCAtMCB0byArMFxuICAgIGlmIChORUdBVElWRV9aRVJPKSByZXR1cm4gJG5hdGl2ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDA7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QodGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSBsZW5ndGggLSAxO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkgaW5kZXggPSBNYXRoLm1pbihpbmRleCwgdG9JbnRlZ2VyKGFyZ3VtZW50c1sxXSkpO1xuICAgIGlmIChpbmRleCA8IDApIGluZGV4ID0gbGVuZ3RoICsgaW5kZXg7XG4gICAgZm9yICg7aW5kZXggPj0gMDsgaW5kZXgtLSkgaWYgKGluZGV4IGluIE8pIGlmIChPW2luZGV4XSA9PT0gc2VhcmNoRWxlbWVudCkgcmV0dXJuIGluZGV4IHx8IDA7XG4gICAgcmV0dXJuIC0xO1xuICB9XG59KTtcblxufSx7XCIxMDVcIjoxMDUsXCIxMTZcIjoxMTYsXCIxMTdcIjoxMTcsXCIxMThcIjoxMTgsXCIzM1wiOjMzfV0sMTQ0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgJG1hcCA9IF9kZXJlcV8oMTIpKDEpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFfZGVyZXFfKDEwNSkoW10ubWFwLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTUgLyAxNS40LjQuMTkgQXJyYXkucHJvdG90eXBlLm1hcChjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBtYXA6IGZ1bmN0aW9uIG1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkbWFwKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuXG59LHtcIjEwNVwiOjEwNSxcIjEyXCI6MTIsXCIzM1wiOjMzfV0sMTQ1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSBfZGVyZXFfKDI0KTtcblxuLy8gV2ViS2l0IEFycmF5Lm9mIGlzbid0IGdlbmVyaWNcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogX2RlcmVxXygzNSkoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiAhKEFycmF5Lm9mLmNhbGwoRikgaW5zdGFuY2VvZiBGKTtcbn0pLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMi4zIEFycmF5Lm9mKCAuLi5pdGVtcylcbiAgb2Y6IGZ1bmN0aW9uIG9mKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gbmV3ICh0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5KShhTGVuKTtcbiAgICB3aGlsZSAoYUxlbiA+IGluZGV4KSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHJlc3VsdC5sZW5ndGggPSBhTGVuO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuXG59LHtcIjI0XCI6MjQsXCIzM1wiOjMzLFwiMzVcIjozNX1dLDE0NjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyICRyZWR1Y2UgPSBfZGVyZXFfKDEzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhX2RlcmVxXygxMDUpKFtdLnJlZHVjZVJpZ2h0LCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTkgLyAxNS40LjQuMjIgQXJyYXkucHJvdG90eXBlLnJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSlcbiAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHtcbiAgICByZXR1cm4gJHJlZHVjZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoLCBhcmd1bWVudHNbMV0sIHRydWUpO1xuICB9XG59KTtcblxufSx7XCIxMDVcIjoxMDUsXCIxM1wiOjEzLFwiMzNcIjozM31dLDE0NzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyICRyZWR1Y2UgPSBfZGVyZXFfKDEzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhX2RlcmVxXygxMDUpKFtdLnJlZHVjZSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE4IC8gMTUuNC40LjIxIEFycmF5LnByb3RvdHlwZS5yZWR1Y2UoY2FsbGJhY2tmbiBbLCBpbml0aWFsVmFsdWVdKVxuICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzWzFdLCBmYWxzZSk7XG4gIH1cbn0pO1xuXG59LHtcIjEwNVwiOjEwNSxcIjEzXCI6MTMsXCIzM1wiOjMzfV0sMTQ4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgaHRtbCA9IF9kZXJlcV8oNDMpO1xudmFyIGNvZiA9IF9kZXJlcV8oMTgpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IF9kZXJlcV8oMTE0KTtcbnZhciB0b0xlbmd0aCA9IF9kZXJlcV8oMTE4KTtcbnZhciBhcnJheVNsaWNlID0gW10uc2xpY2U7XG5cbi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBFUzMgc3RyaW5ncyBhbmQgRE9NIG9iamVjdHNcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogX2RlcmVxXygzNSkoZnVuY3Rpb24gKCkge1xuICBpZiAoaHRtbCkgYXJyYXlTbGljZS5jYWxsKGh0bWwpO1xufSksICdBcnJheScsIHtcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKGJlZ2luLCBlbmQpIHtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodGhpcy5sZW5ndGgpO1xuICAgIHZhciBrbGFzcyA9IGNvZih0aGlzKTtcbiAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IGVuZDtcbiAgICBpZiAoa2xhc3MgPT0gJ0FycmF5JykgcmV0dXJuIGFycmF5U2xpY2UuY2FsbCh0aGlzLCBiZWdpbiwgZW5kKTtcbiAgICB2YXIgc3RhcnQgPSB0b0Fic29sdXRlSW5kZXgoYmVnaW4sIGxlbik7XG4gICAgdmFyIHVwVG8gPSB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW4pO1xuICAgIHZhciBzaXplID0gdG9MZW5ndGgodXBUbyAtIHN0YXJ0KTtcbiAgICB2YXIgY2xvbmVkID0gQXJyYXkoc2l6ZSk7XG4gICAgdmFyIGkgPSAwO1xuICAgIGZvciAoOyBpIDwgc2l6ZTsgaSsrKSBjbG9uZWRbaV0gPSBrbGFzcyA9PSAnU3RyaW5nJ1xuICAgICAgPyB0aGlzLmNoYXJBdChzdGFydCArIGkpXG4gICAgICA6IHRoaXNbc3RhcnQgKyBpXTtcbiAgICByZXR1cm4gY2xvbmVkO1xuICB9XG59KTtcblxufSx7XCIxMTRcIjoxMTQsXCIxMThcIjoxMTgsXCIxOFwiOjE4LFwiMzNcIjozMyxcIjM1XCI6MzUsXCI0M1wiOjQzfV0sMTQ5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgJHNvbWUgPSBfZGVyZXFfKDEyKSgzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhX2RlcmVxXygxMDUpKFtdLnNvbWUsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4yMyAvIDE1LjQuNC4xNyBBcnJheS5wcm90b3R5cGUuc29tZShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRzb21lKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuXG59LHtcIjEwNVwiOjEwNSxcIjEyXCI6MTIsXCIzM1wiOjMzfV0sMTUwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgYUZ1bmN0aW9uID0gX2RlcmVxXygzKTtcbnZhciB0b09iamVjdCA9IF9kZXJlcV8oMTE5KTtcbnZhciBmYWlscyA9IF9kZXJlcV8oMzUpO1xudmFyICRzb3J0ID0gW10uc29ydDtcbnZhciB0ZXN0ID0gWzEsIDIsIDNdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIElFOC1cbiAgdGVzdC5zb3J0KHVuZGVmaW5lZCk7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBWOCBidWdcbiAgdGVzdC5zb3J0KG51bGwpO1xuICAvLyBPbGQgV2ViS2l0XG59KSB8fCAhX2RlcmVxXygxMDUpKCRzb3J0KSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjI1IEFycmF5LnByb3RvdHlwZS5zb3J0KGNvbXBhcmVmbilcbiAgc29ydDogZnVuY3Rpb24gc29ydChjb21wYXJlZm4pIHtcbiAgICByZXR1cm4gY29tcGFyZWZuID09PSB1bmRlZmluZWRcbiAgICAgID8gJHNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSlcbiAgICAgIDogJHNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSwgYUZ1bmN0aW9uKGNvbXBhcmVmbikpO1xuICB9XG59KTtcblxufSx7XCIxMDVcIjoxMDUsXCIxMTlcIjoxMTksXCIzXCI6MyxcIjMzXCI6MzMsXCIzNVwiOjM1fV0sMTUxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbl9kZXJlcV8oMTAwKSgnQXJyYXknKTtcblxufSx7XCIxMDBcIjoxMDB9XSwxNTI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjAuMy4zLjEgLyAxNS45LjQuNCBEYXRlLm5vdygpXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0RhdGUnLCB7IG5vdzogZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7IH0gfSk7XG5cbn0se1wiMzNcIjozM31dLDE1MzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMC4zLjQuMzYgLyAxNS45LjUuNDMgRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcoKVxudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciB0b0lTT1N0cmluZyA9IF9kZXJlcV8oMjYpO1xuXG4vLyBQaGFudG9tSlMgLyBvbGQgV2ViS2l0IGhhcyBhIGJyb2tlbiBpbXBsZW1lbnRhdGlvbnNcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nICE9PSB0b0lTT1N0cmluZyksICdEYXRlJywge1xuICB0b0lTT1N0cmluZzogdG9JU09TdHJpbmdcbn0pO1xuXG59LHtcIjI2XCI6MjYsXCIzM1wiOjMzfV0sMTU0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgdG9PYmplY3QgPSBfZGVyZXFfKDExOSk7XG52YXIgdG9QcmltaXRpdmUgPSBfZGVyZXFfKDEyMCk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogX2RlcmVxXygzNSkoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmV3IERhdGUoTmFOKS50b0pTT04oKSAhPT0gbnVsbFxuICAgIHx8IERhdGUucHJvdG90eXBlLnRvSlNPTi5jYWxsKHsgdG9JU09TdHJpbmc6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDE7IH0gfSkgIT09IDE7XG59KSwgJ0RhdGUnLCB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTihrZXkpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBwdiA9IHRvUHJpbWl0aXZlKE8pO1xuICAgIHJldHVybiB0eXBlb2YgcHYgPT0gJ251bWJlcicgJiYgIWlzRmluaXRlKHB2KSA/IG51bGwgOiBPLnRvSVNPU3RyaW5nKCk7XG4gIH1cbn0pO1xuXG59LHtcIjExOVwiOjExOSxcIjEyMFwiOjEyMCxcIjMzXCI6MzMsXCIzNVwiOjM1fV0sMTU1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBUT19QUklNSVRJVkUgPSBfZGVyZXFfKDEyOCkoJ3RvUHJpbWl0aXZlJyk7XG52YXIgcHJvdG8gPSBEYXRlLnByb3RvdHlwZTtcblxuaWYgKCEoVE9fUFJJTUlUSVZFIGluIHByb3RvKSkgX2RlcmVxXyg0MikocHJvdG8sIFRPX1BSSU1JVElWRSwgX2RlcmVxXygyNykpO1xuXG59LHtcIjEyOFwiOjEyOCxcIjI3XCI6MjcsXCI0MlwiOjQyfV0sMTU2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBEYXRlUHJvdG8gPSBEYXRlLnByb3RvdHlwZTtcbnZhciBJTlZBTElEX0RBVEUgPSAnSW52YWxpZCBEYXRlJztcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyICR0b1N0cmluZyA9IERhdGVQcm90b1tUT19TVFJJTkddO1xudmFyIGdldFRpbWUgPSBEYXRlUHJvdG8uZ2V0VGltZTtcbmlmIChuZXcgRGF0ZShOYU4pICsgJycgIT0gSU5WQUxJRF9EQVRFKSB7XG4gIF9kZXJlcV8oOTQpKERhdGVQcm90bywgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgdmFsdWUgPSBnZXRUaW1lLmNhbGwodGhpcyk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgPyAkdG9TdHJpbmcuY2FsbCh0aGlzKSA6IElOVkFMSURfREFURTtcbiAgfSk7XG59XG5cbn0se1wiOTRcIjo5NH1dLDE1NzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAxOS4yLjMuMiAvIDE1LjMuNC41IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kKHRoaXNBcmcsIGFyZ3MuLi4pXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0Z1bmN0aW9uJywgeyBiaW5kOiBfZGVyZXFfKDE2KSB9KTtcblxufSx7XCIxNlwiOjE2LFwiMzNcIjozM31dLDE1ODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgaXNPYmplY3QgPSBfZGVyZXFfKDUxKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IF9kZXJlcV8oNzkpO1xudmFyIEhBU19JTlNUQU5DRSA9IF9kZXJlcV8oMTI4KSgnaGFzSW5zdGFuY2UnKTtcbnZhciBGdW5jdGlvblByb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuLy8gMTkuMi4zLjYgRnVuY3Rpb24ucHJvdG90eXBlW0BAaGFzSW5zdGFuY2VdKFYpXG5pZiAoIShIQVNfSU5TVEFOQ0UgaW4gRnVuY3Rpb25Qcm90bykpIF9kZXJlcV8oNzIpLmYoRnVuY3Rpb25Qcm90bywgSEFTX0lOU1RBTkNFLCB7IHZhbHVlOiBmdW5jdGlvbiAoTykge1xuICBpZiAodHlwZW9mIHRoaXMgIT0gJ2Z1bmN0aW9uJyB8fCAhaXNPYmplY3QoTykpIHJldHVybiBmYWxzZTtcbiAgaWYgKCFpc09iamVjdCh0aGlzLnByb3RvdHlwZSkpIHJldHVybiBPIGluc3RhbmNlb2YgdGhpcztcbiAgLy8gZm9yIGVudmlyb25tZW50IHcvbyBuYXRpdmUgYEBAaGFzSW5zdGFuY2VgIGxvZ2ljIGVub3VnaCBgaW5zdGFuY2VvZmAsIGJ1dCBhZGQgdGhpczpcbiAgd2hpbGUgKE8gPSBnZXRQcm90b3R5cGVPZihPKSkgaWYgKHRoaXMucHJvdG90eXBlID09PSBPKSByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIGZhbHNlO1xufSB9KTtcblxufSx7XCIxMjhcIjoxMjgsXCI1MVwiOjUxLFwiNzJcIjo3MixcIjc5XCI6Nzl9XSwxNTk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyIGRQID0gX2RlcmVxXyg3MikuZjtcbnZhciBGUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG52YXIgbmFtZVJFID0gL15cXHMqZnVuY3Rpb24gKFteIChdKikvO1xudmFyIE5BTUUgPSAnbmFtZSc7XG5cbi8vIDE5LjIuNC4yIG5hbWVcbk5BTUUgaW4gRlByb3RvIHx8IF9kZXJlcV8oMjkpICYmIGRQKEZQcm90bywgTkFNRSwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKCcnICsgdGhpcykubWF0Y2gobmFtZVJFKVsxXTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG59KTtcblxufSx7XCIyOVwiOjI5LFwiNzJcIjo3Mn1dLDE2MDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgc3Ryb25nID0gX2RlcmVxXygxOSk7XG52YXIgdmFsaWRhdGUgPSBfZGVyZXFfKDEyNSk7XG52YXIgTUFQID0gJ01hcCc7XG5cbi8vIDIzLjEgTWFwIE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gX2RlcmVxXygyMikoTUFQLCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBNYXAoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy4xLjMuNiBNYXAucHJvdG90eXBlLmdldChrZXkpXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgIHZhciBlbnRyeSA9IHN0cm9uZy5nZXRFbnRyeSh2YWxpZGF0ZSh0aGlzLCBNQVApLCBrZXkpO1xuICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeS52O1xuICB9LFxuICAvLyAyMy4xLjMuOSBNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKVxuICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIHN0cm9uZy5kZWYodmFsaWRhdGUodGhpcywgTUFQKSwga2V5ID09PSAwID8gMCA6IGtleSwgdmFsdWUpO1xuICB9XG59LCBzdHJvbmcsIHRydWUpO1xuXG59LHtcIjEyNVwiOjEyNSxcIjE5XCI6MTksXCIyMlwiOjIyfV0sMTYxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDIwLjIuMi4zIE1hdGguYWNvc2goeClcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgbG9nMXAgPSBfZGVyZXFfKDYzKTtcbnZhciBzcXJ0ID0gTWF0aC5zcXJ0O1xudmFyICRhY29zaCA9IE1hdGguYWNvc2g7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYWNvc2hcbiAgLy8gVjggYnVnOiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzUwOVxuICAmJiBNYXRoLmZsb29yKCRhY29zaChOdW1iZXIuTUFYX1ZBTFVFKSkgPT0gNzEwXG4gIC8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hY29zaChJbmZpbml0eSkgLT4gTmFOXG4gICYmICRhY29zaChJbmZpbml0eSkgPT0gSW5maW5pdHlcbiksICdNYXRoJywge1xuICBhY29zaDogZnVuY3Rpb24gYWNvc2goeCkge1xuICAgIHJldHVybiAoeCA9ICt4KSA8IDEgPyBOYU4gOiB4ID4gOTQ5MDYyNjUuNjI0MjUxNTZcbiAgICAgID8gTWF0aC5sb2coeCkgKyBNYXRoLkxOMlxuICAgICAgOiBsb2cxcCh4IC0gMSArIHNxcnQoeCAtIDEpICogc3FydCh4ICsgMSkpO1xuICB9XG59KTtcblxufSx7XCIzM1wiOjMzLFwiNjNcIjo2M31dLDE2MjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMC4yLjIuNSBNYXRoLmFzaW5oKHgpXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyICRhc2luaCA9IE1hdGguYXNpbmg7XG5cbmZ1bmN0aW9uIGFzaW5oKHgpIHtcbiAgcmV0dXJuICFpc0Zpbml0ZSh4ID0gK3gpIHx8IHggPT0gMCA/IHggOiB4IDwgMCA/IC1hc2luaCgteCkgOiBNYXRoLmxvZyh4ICsgTWF0aC5zcXJ0KHggKiB4ICsgMSkpO1xufVxuXG4vLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYXNpbmgoMCkgLT4gLTBcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYXNpbmggJiYgMSAvICRhc2luaCgwKSA+IDApLCAnTWF0aCcsIHsgYXNpbmg6IGFzaW5oIH0pO1xuXG59LHtcIjMzXCI6MzN9XSwxNjM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjAuMi4yLjcgTWF0aC5hdGFuaCh4KVxudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciAkYXRhbmggPSBNYXRoLmF0YW5oO1xuXG4vLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYXRhbmgoLTApIC0+IDBcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYXRhbmggJiYgMSAvICRhdGFuaCgtMCkgPCAwKSwgJ01hdGgnLCB7XG4gIGF0YW5oOiBmdW5jdGlvbiBhdGFuaCh4KSB7XG4gICAgcmV0dXJuICh4ID0gK3gpID09IDAgPyB4IDogTWF0aC5sb2coKDEgKyB4KSAvICgxIC0geCkpIC8gMjtcbiAgfVxufSk7XG5cbn0se1wiMzNcIjozM31dLDE2NDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMC4yLjIuOSBNYXRoLmNicnQoeClcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgc2lnbiA9IF9kZXJlcV8oNjUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNicnQ6IGZ1bmN0aW9uIGNicnQoeCkge1xuICAgIHJldHVybiBzaWduKHggPSAreCkgKiBNYXRoLnBvdyhNYXRoLmFicyh4KSwgMSAvIDMpO1xuICB9XG59KTtcblxufSx7XCIzM1wiOjMzLFwiNjVcIjo2NX1dLDE2NTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMC4yLjIuMTEgTWF0aC5jbHozMih4KVxudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjbHozMjogZnVuY3Rpb24gY2x6MzIoeCkge1xuICAgIHJldHVybiAoeCA+Pj49IDApID8gMzEgLSBNYXRoLmZsb29yKE1hdGgubG9nKHggKyAwLjUpICogTWF0aC5MT0cyRSkgOiAzMjtcbiAgfVxufSk7XG5cbn0se1wiMzNcIjozM31dLDE2NjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMC4yLjIuMTIgTWF0aC5jb3NoKHgpXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNvc2g6IGZ1bmN0aW9uIGNvc2goeCkge1xuICAgIHJldHVybiAoZXhwKHggPSAreCkgKyBleHAoLXgpKSAvIDI7XG4gIH1cbn0pO1xuXG59LHtcIjMzXCI6MzN9XSwxNjc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjAuMi4yLjE0IE1hdGguZXhwbTEoeClcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgJGV4cG0xID0gX2RlcmVxXyg2MSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCRleHBtMSAhPSBNYXRoLmV4cG0xKSwgJ01hdGgnLCB7IGV4cG0xOiAkZXhwbTEgfSk7XG5cbn0se1wiMzNcIjozMyxcIjYxXCI6NjF9XSwxNjg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjAuMi4yLjE2IE1hdGguZnJvdW5kKHgpXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IGZyb3VuZDogX2RlcmVxXyg2MikgfSk7XG5cbn0se1wiMzNcIjozMyxcIjYyXCI6NjJ9XSwxNjk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjAuMi4yLjE3IE1hdGguaHlwb3QoW3ZhbHVlMVssIHZhbHVlMlssIOKApiBdXV0pXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIGFicyA9IE1hdGguYWJzO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGh5cG90OiBmdW5jdGlvbiBoeXBvdCh2YWx1ZTEsIHZhbHVlMikgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgdmFyIHN1bSA9IDA7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbGFyZyA9IDA7XG4gICAgdmFyIGFyZywgZGl2O1xuICAgIHdoaWxlIChpIDwgYUxlbikge1xuICAgICAgYXJnID0gYWJzKGFyZ3VtZW50c1tpKytdKTtcbiAgICAgIGlmIChsYXJnIDwgYXJnKSB7XG4gICAgICAgIGRpdiA9IGxhcmcgLyBhcmc7XG4gICAgICAgIHN1bSA9IHN1bSAqIGRpdiAqIGRpdiArIDE7XG4gICAgICAgIGxhcmcgPSBhcmc7XG4gICAgICB9IGVsc2UgaWYgKGFyZyA+IDApIHtcbiAgICAgICAgZGl2ID0gYXJnIC8gbGFyZztcbiAgICAgICAgc3VtICs9IGRpdiAqIGRpdjtcbiAgICAgIH0gZWxzZSBzdW0gKz0gYXJnO1xuICAgIH1cbiAgICByZXR1cm4gbGFyZyA9PT0gSW5maW5pdHkgPyBJbmZpbml0eSA6IGxhcmcgKiBNYXRoLnNxcnQoc3VtKTtcbiAgfVxufSk7XG5cbn0se1wiMzNcIjozM31dLDE3MDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMC4yLjIuMTggTWF0aC5pbXVsKHgsIHkpXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyICRpbXVsID0gTWF0aC5pbXVsO1xuXG4vLyBzb21lIFdlYktpdCB2ZXJzaW9ucyBmYWlscyB3aXRoIGJpZyBudW1iZXJzLCBzb21lIGhhcyB3cm9uZyBhcml0eVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBfZGVyZXFfKDM1KShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkaW11bCgweGZmZmZmZmZmLCA1KSAhPSAtNSB8fCAkaW11bC5sZW5ndGggIT0gMjtcbn0pLCAnTWF0aCcsIHtcbiAgaW11bDogZnVuY3Rpb24gaW11bCh4LCB5KSB7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZjtcbiAgICB2YXIgeG4gPSAreDtcbiAgICB2YXIgeW4gPSAreTtcbiAgICB2YXIgeGwgPSBVSU5UMTYgJiB4bjtcbiAgICB2YXIgeWwgPSBVSU5UMTYgJiB5bjtcbiAgICByZXR1cm4gMCB8IHhsICogeWwgKyAoKFVJTlQxNiAmIHhuID4+PiAxNikgKiB5bCArIHhsICogKFVJTlQxNiAmIHluID4+PiAxNikgPDwgMTYgPj4+IDApO1xuICB9XG59KTtcblxufSx7XCIzM1wiOjMzLFwiMzVcIjozNX1dLDE3MTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMC4yLjIuMjEgTWF0aC5sb2cxMCh4KVxudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBsb2cxMDogZnVuY3Rpb24gbG9nMTAoeCkge1xuICAgIHJldHVybiBNYXRoLmxvZyh4KSAqIE1hdGguTE9HMTBFO1xuICB9XG59KTtcblxufSx7XCIzM1wiOjMzfV0sMTcyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDIwLjIuMi4yMCBNYXRoLmxvZzFwKHgpXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IGxvZzFwOiBfZGVyZXFfKDYzKSB9KTtcblxufSx7XCIzM1wiOjMzLFwiNjNcIjo2M31dLDE3MzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMC4yLjIuMjIgTWF0aC5sb2cyKHgpXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGxvZzI6IGZ1bmN0aW9uIGxvZzIoeCkge1xuICAgIHJldHVybiBNYXRoLmxvZyh4KSAvIE1hdGguTE4yO1xuICB9XG59KTtcblxufSx7XCIzM1wiOjMzfV0sMTc0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDIwLjIuMi4yOCBNYXRoLnNpZ24oeClcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgc2lnbjogX2RlcmVxXyg2NSkgfSk7XG5cbn0se1wiMzNcIjozMyxcIjY1XCI6NjV9XSwxNzU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjAuMi4yLjMwIE1hdGguc2luaCh4KVxudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciBleHBtMSA9IF9kZXJlcV8oNjEpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4vLyBWOCBuZWFyIENocm9taXVtIDM4IGhhcyBhIHByb2JsZW0gd2l0aCB2ZXJ5IHNtYWxsIG51bWJlcnNcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogX2RlcmVxXygzNSkoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gIU1hdGguc2luaCgtMmUtMTcpICE9IC0yZS0xNztcbn0pLCAnTWF0aCcsIHtcbiAgc2luaDogZnVuY3Rpb24gc2luaCh4KSB7XG4gICAgcmV0dXJuIE1hdGguYWJzKHggPSAreCkgPCAxXG4gICAgICA/IChleHBtMSh4KSAtIGV4cG0xKC14KSkgLyAyXG4gICAgICA6IChleHAoeCAtIDEpIC0gZXhwKC14IC0gMSkpICogKE1hdGguRSAvIDIpO1xuICB9XG59KTtcblxufSx7XCIzM1wiOjMzLFwiMzVcIjozNSxcIjYxXCI6NjF9XSwxNzY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjAuMi4yLjMzIE1hdGgudGFuaCh4KVxudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciBleHBtMSA9IF9kZXJlcV8oNjEpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHRhbmg6IGZ1bmN0aW9uIHRhbmgoeCkge1xuICAgIHZhciBhID0gZXhwbTEoeCA9ICt4KTtcbiAgICB2YXIgYiA9IGV4cG0xKC14KTtcbiAgICByZXR1cm4gYSA9PSBJbmZpbml0eSA/IDEgOiBiID09IEluZmluaXR5ID8gLTEgOiAoYSAtIGIpIC8gKGV4cCh4KSArIGV4cCgteCkpO1xuICB9XG59KTtcblxufSx7XCIzM1wiOjMzLFwiNjFcIjo2MX1dLDE3NzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMC4yLjIuMzQgTWF0aC50cnVuYyh4KVxudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB0cnVuYzogZnVuY3Rpb24gdHJ1bmMoaXQpIHtcbiAgICByZXR1cm4gKGl0ID4gMCA/IE1hdGguZmxvb3IgOiBNYXRoLmNlaWwpKGl0KTtcbiAgfVxufSk7XG5cbn0se1wiMzNcIjozM31dLDE3ODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gX2RlcmVxXyg0MCk7XG52YXIgaGFzID0gX2RlcmVxXyg0MSk7XG52YXIgY29mID0gX2RlcmVxXygxOCk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSBfZGVyZXFfKDQ1KTtcbnZhciB0b1ByaW1pdGl2ZSA9IF9kZXJlcV8oMTIwKTtcbnZhciBmYWlscyA9IF9kZXJlcV8oMzUpO1xudmFyIGdPUE4gPSBfZGVyZXFfKDc3KS5mO1xudmFyIGdPUEQgPSBfZGVyZXFfKDc1KS5mO1xudmFyIGRQID0gX2RlcmVxXyg3MikuZjtcbnZhciAkdHJpbSA9IF9kZXJlcV8oMTExKS50cmltO1xudmFyIE5VTUJFUiA9ICdOdW1iZXInO1xudmFyICROdW1iZXIgPSBnbG9iYWxbTlVNQkVSXTtcbnZhciBCYXNlID0gJE51bWJlcjtcbnZhciBwcm90byA9ICROdW1iZXIucHJvdG90eXBlO1xuLy8gT3BlcmEgfjEyIGhhcyBicm9rZW4gT2JqZWN0I3RvU3RyaW5nXG52YXIgQlJPS0VOX0NPRiA9IGNvZihfZGVyZXFfKDcxKShwcm90bykpID09IE5VTUJFUjtcbnZhciBUUklNID0gJ3RyaW0nIGluIFN0cmluZy5wcm90b3R5cGU7XG5cbi8vIDcuMS4zIFRvTnVtYmVyKGFyZ3VtZW50KVxudmFyIHRvTnVtYmVyID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHZhciBpdCA9IHRvUHJpbWl0aXZlKGFyZ3VtZW50LCBmYWxzZSk7XG4gIGlmICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgJiYgaXQubGVuZ3RoID4gMikge1xuICAgIGl0ID0gVFJJTSA/IGl0LnRyaW0oKSA6ICR0cmltKGl0LCAzKTtcbiAgICB2YXIgZmlyc3QgPSBpdC5jaGFyQ29kZUF0KDApO1xuICAgIHZhciB0aGlyZCwgcmFkaXgsIG1heENvZGU7XG4gICAgaWYgKGZpcnN0ID09PSA0MyB8fCBmaXJzdCA9PT0gNDUpIHtcbiAgICAgIHRoaXJkID0gaXQuY2hhckNvZGVBdCgyKTtcbiAgICAgIGlmICh0aGlyZCA9PT0gODggfHwgdGhpcmQgPT09IDEyMCkgcmV0dXJuIE5hTjsgLy8gTnVtYmVyKCcrMHgxJykgc2hvdWxkIGJlIE5hTiwgb2xkIFY4IGZpeFxuICAgIH0gZWxzZSBpZiAoZmlyc3QgPT09IDQ4KSB7XG4gICAgICBzd2l0Y2ggKGl0LmNoYXJDb2RlQXQoMSkpIHtcbiAgICAgICAgY2FzZSA2NjogY2FzZSA5ODogcmFkaXggPSAyOyBtYXhDb2RlID0gNDk7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIC9eMGJbMDFdKyQvaVxuICAgICAgICBjYXNlIDc5OiBjYXNlIDExMTogcmFkaXggPSA4OyBtYXhDb2RlID0gNTU7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIC9eMG9bMC03XSskL2lcbiAgICAgICAgZGVmYXVsdDogcmV0dXJuICtpdDtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGRpZ2l0cyA9IGl0LnNsaWNlKDIpLCBpID0gMCwgbCA9IGRpZ2l0cy5sZW5ndGgsIGNvZGU7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgY29kZSA9IGRpZ2l0cy5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAvLyBwYXJzZUludCBwYXJzZXMgYSBzdHJpbmcgdG8gYSBmaXJzdCB1bmF2YWlsYWJsZSBzeW1ib2xcbiAgICAgICAgLy8gYnV0IFRvTnVtYmVyIHNob3VsZCByZXR1cm4gTmFOIGlmIGEgc3RyaW5nIGNvbnRhaW5zIHVuYXZhaWxhYmxlIHN5bWJvbHNcbiAgICAgICAgaWYgKGNvZGUgPCA0OCB8fCBjb2RlID4gbWF4Q29kZSkgcmV0dXJuIE5hTjtcbiAgICAgIH0gcmV0dXJuIHBhcnNlSW50KGRpZ2l0cywgcmFkaXgpO1xuICAgIH1cbiAgfSByZXR1cm4gK2l0O1xufTtcblxuaWYgKCEkTnVtYmVyKCcgMG8xJykgfHwgISROdW1iZXIoJzBiMScpIHx8ICROdW1iZXIoJysweDEnKSkge1xuICAkTnVtYmVyID0gZnVuY3Rpb24gTnVtYmVyKHZhbHVlKSB7XG4gICAgdmFyIGl0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDEgPyAwIDogdmFsdWU7XG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIHJldHVybiB0aGF0IGluc3RhbmNlb2YgJE51bWJlclxuICAgICAgLy8gY2hlY2sgb24gMS4uY29uc3RydWN0b3IoZm9vKSBjYXNlXG4gICAgICAmJiAoQlJPS0VOX0NPRiA/IGZhaWxzKGZ1bmN0aW9uICgpIHsgcHJvdG8udmFsdWVPZi5jYWxsKHRoYXQpOyB9KSA6IGNvZih0aGF0KSAhPSBOVU1CRVIpXG4gICAgICAgID8gaW5oZXJpdElmUmVxdWlyZWQobmV3IEJhc2UodG9OdW1iZXIoaXQpKSwgdGhhdCwgJE51bWJlcikgOiB0b051bWJlcihpdCk7XG4gIH07XG4gIGZvciAodmFyIGtleXMgPSBfZGVyZXFfKDI5KSA/IGdPUE4oQmFzZSkgOiAoXG4gICAgLy8gRVMzOlxuICAgICdNQVhfVkFMVUUsTUlOX1ZBTFVFLE5hTixORUdBVElWRV9JTkZJTklUWSxQT1NJVElWRV9JTkZJTklUWSwnICtcbiAgICAvLyBFUzYgKGluIGNhc2UsIGlmIG1vZHVsZXMgd2l0aCBFUzYgTnVtYmVyIHN0YXRpY3MgcmVxdWlyZWQgYmVmb3JlKTpcbiAgICAnRVBTSUxPTixpc0Zpbml0ZSxpc0ludGVnZXIsaXNOYU4saXNTYWZlSW50ZWdlcixNQVhfU0FGRV9JTlRFR0VSLCcgK1xuICAgICdNSU5fU0FGRV9JTlRFR0VSLHBhcnNlRmxvYXQscGFyc2VJbnQsaXNJbnRlZ2VyJ1xuICApLnNwbGl0KCcsJyksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajsgaisrKSB7XG4gICAgaWYgKGhhcyhCYXNlLCBrZXkgPSBrZXlzW2pdKSAmJiAhaGFzKCROdW1iZXIsIGtleSkpIHtcbiAgICAgIGRQKCROdW1iZXIsIGtleSwgZ09QRChCYXNlLCBrZXkpKTtcbiAgICB9XG4gIH1cbiAgJE51bWJlci5wcm90b3R5cGUgPSBwcm90bztcbiAgcHJvdG8uY29uc3RydWN0b3IgPSAkTnVtYmVyO1xuICBfZGVyZXFfKDk0KShnbG9iYWwsIE5VTUJFUiwgJE51bWJlcik7XG59XG5cbn0se1wiMTExXCI6MTExLFwiMTIwXCI6MTIwLFwiMThcIjoxOCxcIjI5XCI6MjksXCIzNVwiOjM1LFwiNDBcIjo0MCxcIjQxXCI6NDEsXCI0NVwiOjQ1LFwiNzFcIjo3MSxcIjcyXCI6NzIsXCI3NVwiOjc1LFwiNzdcIjo3NyxcIjk0XCI6OTR9XSwxNzk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjAuMS4yLjEgTnVtYmVyLkVQU0lMT05cbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBFUFNJTE9OOiBNYXRoLnBvdygyLCAtNTIpIH0pO1xuXG59LHtcIjMzXCI6MzN9XSwxODA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjAuMS4yLjIgTnVtYmVyLmlzRmluaXRlKG51bWJlcilcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgX2lzRmluaXRlID0gX2RlcmVxXyg0MCkuaXNGaW5pdGU7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc0Zpbml0ZTogZnVuY3Rpb24gaXNGaW5pdGUoaXQpIHtcbiAgICByZXR1cm4gdHlwZW9mIGl0ID09ICdudW1iZXInICYmIF9pc0Zpbml0ZShpdCk7XG4gIH1cbn0pO1xuXG59LHtcIjMzXCI6MzMsXCI0MFwiOjQwfV0sMTgxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDIwLjEuMi4zIE51bWJlci5pc0ludGVnZXIobnVtYmVyKVxudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IGlzSW50ZWdlcjogX2RlcmVxXyg1MCkgfSk7XG5cbn0se1wiMzNcIjozMyxcIjUwXCI6NTB9XSwxODI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjAuMS4yLjQgTnVtYmVyLmlzTmFOKG51bWJlcilcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc05hTjogZnVuY3Rpb24gaXNOYU4obnVtYmVyKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHJldHVybiBudW1iZXIgIT0gbnVtYmVyO1xuICB9XG59KTtcblxufSx7XCIzM1wiOjMzfV0sMTgzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDIwLjEuMi41IE51bWJlci5pc1NhZmVJbnRlZ2VyKG51bWJlcilcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgaXNJbnRlZ2VyID0gX2RlcmVxXyg1MCk7XG52YXIgYWJzID0gTWF0aC5hYnM7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc1NhZmVJbnRlZ2VyOiBmdW5jdGlvbiBpc1NhZmVJbnRlZ2VyKG51bWJlcikge1xuICAgIHJldHVybiBpc0ludGVnZXIobnVtYmVyKSAmJiBhYnMobnVtYmVyKSA8PSAweDFmZmZmZmZmZmZmZmZmO1xuICB9XG59KTtcblxufSx7XCIzM1wiOjMzLFwiNTBcIjo1MH1dLDE4NDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMC4xLjIuNiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUlxudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IE1BWF9TQUZFX0lOVEVHRVI6IDB4MWZmZmZmZmZmZmZmZmYgfSk7XG5cbn0se1wiMzNcIjozM31dLDE4NTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyMC4xLjIuMTAgTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVJcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBNSU5fU0FGRV9JTlRFR0VSOiAtMHgxZmZmZmZmZmZmZmZmZiB9KTtcblxufSx7XCIzM1wiOjMzfV0sMTg2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgJHBhcnNlRmxvYXQgPSBfZGVyZXFfKDg2KTtcbi8vIDIwLjEuMi4xMiBOdW1iZXIucGFyc2VGbG9hdChzdHJpbmcpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChOdW1iZXIucGFyc2VGbG9hdCAhPSAkcGFyc2VGbG9hdCksICdOdW1iZXInLCB7IHBhcnNlRmxvYXQ6ICRwYXJzZUZsb2F0IH0pO1xuXG59LHtcIjMzXCI6MzMsXCI4NlwiOjg2fV0sMTg3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgJHBhcnNlSW50ID0gX2RlcmVxXyg4Nyk7XG4vLyAyMC4xLjIuMTMgTnVtYmVyLnBhcnNlSW50KHN0cmluZywgcmFkaXgpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChOdW1iZXIucGFyc2VJbnQgIT0gJHBhcnNlSW50KSwgJ051bWJlcicsIHsgcGFyc2VJbnQ6ICRwYXJzZUludCB9KTtcblxufSx7XCIzM1wiOjMzLFwiODdcIjo4N31dLDE4ODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIHRvSW50ZWdlciA9IF9kZXJlcV8oMTE2KTtcbnZhciBhTnVtYmVyVmFsdWUgPSBfZGVyZXFfKDQpO1xudmFyIHJlcGVhdCA9IF9kZXJlcV8oMTEwKTtcbnZhciAkdG9GaXhlZCA9IDEuMC50b0ZpeGVkO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBkYXRhID0gWzAsIDAsIDAsIDAsIDAsIDBdO1xudmFyIEVSUk9SID0gJ051bWJlci50b0ZpeGVkOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnO1xudmFyIFpFUk8gPSAnMCc7XG5cbnZhciBtdWx0aXBseSA9IGZ1bmN0aW9uIChuLCBjKSB7XG4gIHZhciBpID0gLTE7XG4gIHZhciBjMiA9IGM7XG4gIHdoaWxlICgrK2kgPCA2KSB7XG4gICAgYzIgKz0gbiAqIGRhdGFbaV07XG4gICAgZGF0YVtpXSA9IGMyICUgMWU3O1xuICAgIGMyID0gZmxvb3IoYzIgLyAxZTcpO1xuICB9XG59O1xudmFyIGRpdmlkZSA9IGZ1bmN0aW9uIChuKSB7XG4gIHZhciBpID0gNjtcbiAgdmFyIGMgPSAwO1xuICB3aGlsZSAoLS1pID49IDApIHtcbiAgICBjICs9IGRhdGFbaV07XG4gICAgZGF0YVtpXSA9IGZsb29yKGMgLyBuKTtcbiAgICBjID0gKGMgJSBuKSAqIDFlNztcbiAgfVxufTtcbnZhciBudW1Ub1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGkgPSA2O1xuICB2YXIgcyA9ICcnO1xuICB3aGlsZSAoLS1pID49IDApIHtcbiAgICBpZiAocyAhPT0gJycgfHwgaSA9PT0gMCB8fCBkYXRhW2ldICE9PSAwKSB7XG4gICAgICB2YXIgdCA9IFN0cmluZyhkYXRhW2ldKTtcbiAgICAgIHMgPSBzID09PSAnJyA/IHQgOiBzICsgcmVwZWF0LmNhbGwoWkVSTywgNyAtIHQubGVuZ3RoKSArIHQ7XG4gICAgfVxuICB9IHJldHVybiBzO1xufTtcbnZhciBwb3cgPSBmdW5jdGlvbiAoeCwgbiwgYWNjKSB7XG4gIHJldHVybiBuID09PSAwID8gYWNjIDogbiAlIDIgPT09IDEgPyBwb3coeCwgbiAtIDEsIGFjYyAqIHgpIDogcG93KHggKiB4LCBuIC8gMiwgYWNjKTtcbn07XG52YXIgbG9nID0gZnVuY3Rpb24gKHgpIHtcbiAgdmFyIG4gPSAwO1xuICB2YXIgeDIgPSB4O1xuICB3aGlsZSAoeDIgPj0gNDA5Nikge1xuICAgIG4gKz0gMTI7XG4gICAgeDIgLz0gNDA5NjtcbiAgfVxuICB3aGlsZSAoeDIgPj0gMikge1xuICAgIG4gKz0gMTtcbiAgICB4MiAvPSAyO1xuICB9IHJldHVybiBuO1xufTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoISEkdG9GaXhlZCAmJiAoXG4gIDAuMDAwMDgudG9GaXhlZCgzKSAhPT0gJzAuMDAwJyB8fFxuICAwLjkudG9GaXhlZCgwKSAhPT0gJzEnIHx8XG4gIDEuMjU1LnRvRml4ZWQoMikgIT09ICcxLjI1JyB8fFxuICAxMDAwMDAwMDAwMDAwMDAwMTI4LjAudG9GaXhlZCgwKSAhPT0gJzEwMDAwMDAwMDAwMDAwMDAxMjgnXG4pIHx8ICFfZGVyZXFfKDM1KShmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IH4gQW5kcm9pZCA0LjMtXG4gICR0b0ZpeGVkLmNhbGwoe30pO1xufSkpLCAnTnVtYmVyJywge1xuICB0b0ZpeGVkOiBmdW5jdGlvbiB0b0ZpeGVkKGZyYWN0aW9uRGlnaXRzKSB7XG4gICAgdmFyIHggPSBhTnVtYmVyVmFsdWUodGhpcywgRVJST1IpO1xuICAgIHZhciBmID0gdG9JbnRlZ2VyKGZyYWN0aW9uRGlnaXRzKTtcbiAgICB2YXIgcyA9ICcnO1xuICAgIHZhciBtID0gWkVSTztcbiAgICB2YXIgZSwgeiwgaiwgaztcbiAgICBpZiAoZiA8IDAgfHwgZiA+IDIwKSB0aHJvdyBSYW5nZUVycm9yKEVSUk9SKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKHggIT0geCkgcmV0dXJuICdOYU4nO1xuICAgIGlmICh4IDw9IC0xZTIxIHx8IHggPj0gMWUyMSkgcmV0dXJuIFN0cmluZyh4KTtcbiAgICBpZiAoeCA8IDApIHtcbiAgICAgIHMgPSAnLSc7XG4gICAgICB4ID0gLXg7XG4gICAgfVxuICAgIGlmICh4ID4gMWUtMjEpIHtcbiAgICAgIGUgPSBsb2coeCAqIHBvdygyLCA2OSwgMSkpIC0gNjk7XG4gICAgICB6ID0gZSA8IDAgPyB4ICogcG93KDIsIC1lLCAxKSA6IHggLyBwb3coMiwgZSwgMSk7XG4gICAgICB6ICo9IDB4MTAwMDAwMDAwMDAwMDA7XG4gICAgICBlID0gNTIgLSBlO1xuICAgICAgaWYgKGUgPiAwKSB7XG4gICAgICAgIG11bHRpcGx5KDAsIHopO1xuICAgICAgICBqID0gZjtcbiAgICAgICAgd2hpbGUgKGogPj0gNykge1xuICAgICAgICAgIG11bHRpcGx5KDFlNywgMCk7XG4gICAgICAgICAgaiAtPSA3O1xuICAgICAgICB9XG4gICAgICAgIG11bHRpcGx5KHBvdygxMCwgaiwgMSksIDApO1xuICAgICAgICBqID0gZSAtIDE7XG4gICAgICAgIHdoaWxlIChqID49IDIzKSB7XG4gICAgICAgICAgZGl2aWRlKDEgPDwgMjMpO1xuICAgICAgICAgIGogLT0gMjM7XG4gICAgICAgIH1cbiAgICAgICAgZGl2aWRlKDEgPDwgaik7XG4gICAgICAgIG11bHRpcGx5KDEsIDEpO1xuICAgICAgICBkaXZpZGUoMik7XG4gICAgICAgIG0gPSBudW1Ub1N0cmluZygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbXVsdGlwbHkoMCwgeik7XG4gICAgICAgIG11bHRpcGx5KDEgPDwgLWUsIDApO1xuICAgICAgICBtID0gbnVtVG9TdHJpbmcoKSArIHJlcGVhdC5jYWxsKFpFUk8sIGYpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZiA+IDApIHtcbiAgICAgIGsgPSBtLmxlbmd0aDtcbiAgICAgIG0gPSBzICsgKGsgPD0gZiA/ICcwLicgKyByZXBlYXQuY2FsbChaRVJPLCBmIC0gaykgKyBtIDogbS5zbGljZSgwLCBrIC0gZikgKyAnLicgKyBtLnNsaWNlKGsgLSBmKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSBzICsgbTtcbiAgICB9IHJldHVybiBtO1xuICB9XG59KTtcblxufSx7XCIxMTBcIjoxMTAsXCIxMTZcIjoxMTYsXCIzM1wiOjMzLFwiMzVcIjozNSxcIjRcIjo0fV0sMTg5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgJGZhaWxzID0gX2RlcmVxXygzNSk7XG52YXIgYU51bWJlclZhbHVlID0gX2RlcmVxXyg0KTtcbnZhciAkdG9QcmVjaXNpb24gPSAxLjAudG9QcmVjaXNpb247XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKCRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIElFNy1cbiAgcmV0dXJuICR0b1ByZWNpc2lvbi5jYWxsKDEsIHVuZGVmaW5lZCkgIT09ICcxJztcbn0pIHx8ICEkZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBWOCB+IEFuZHJvaWQgNC4zLVxuICAkdG9QcmVjaXNpb24uY2FsbCh7fSk7XG59KSksICdOdW1iZXInLCB7XG4gIHRvUHJlY2lzaW9uOiBmdW5jdGlvbiB0b1ByZWNpc2lvbihwcmVjaXNpb24pIHtcbiAgICB2YXIgdGhhdCA9IGFOdW1iZXJWYWx1ZSh0aGlzLCAnTnVtYmVyI3RvUHJlY2lzaW9uOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgICByZXR1cm4gcHJlY2lzaW9uID09PSB1bmRlZmluZWQgPyAkdG9QcmVjaXNpb24uY2FsbCh0aGF0KSA6ICR0b1ByZWNpc2lvbi5jYWxsKHRoYXQsIHByZWNpc2lvbik7XG4gIH1cbn0pO1xuXG59LHtcIjMzXCI6MzMsXCIzNVwiOjM1LFwiNFwiOjR9XSwxOTA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMTkuMS4zLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSlcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GLCAnT2JqZWN0JywgeyBhc3NpZ246IF9kZXJlcV8oNzApIH0pO1xuXG59LHtcIjMzXCI6MzMsXCI3MFwiOjcwfV0sMTkxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG4vLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBjcmVhdGU6IF9kZXJlcV8oNzEpIH0pO1xuXG59LHtcIjMzXCI6MzMsXCI3MVwiOjcxfV0sMTkyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG4vLyAxOS4xLjIuMyAvIDE1LjIuMy43IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFfZGVyZXFfKDI5KSwgJ09iamVjdCcsIHsgZGVmaW5lUHJvcGVydGllczogX2RlcmVxXyg3MykgfSk7XG5cbn0se1wiMjlcIjoyOSxcIjMzXCI6MzMsXCI3M1wiOjczfV0sMTkzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG4vLyAxOS4xLjIuNCAvIDE1LjIuMy42IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhX2RlcmVxXygyOSksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnR5OiBfZGVyZXFfKDcyKS5mIH0pO1xuXG59LHtcIjI5XCI6MjksXCIzM1wiOjMzLFwiNzJcIjo3Mn1dLDE5NDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAxOS4xLjIuNSBPYmplY3QuZnJlZXplKE8pXG52YXIgaXNPYmplY3QgPSBfZGVyZXFfKDUxKTtcbnZhciBtZXRhID0gX2RlcmVxXyg2Nikub25GcmVlemU7XG5cbl9kZXJlcV8oODMpKCdmcmVlemUnLCBmdW5jdGlvbiAoJGZyZWV6ZSkge1xuICByZXR1cm4gZnVuY3Rpb24gZnJlZXplKGl0KSB7XG4gICAgcmV0dXJuICRmcmVlemUgJiYgaXNPYmplY3QoaXQpID8gJGZyZWV6ZShtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuXG59LHtcIjUxXCI6NTEsXCI2NlwiOjY2LFwiODNcIjo4M31dLDE5NTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG52YXIgdG9JT2JqZWN0ID0gX2RlcmVxXygxMTcpO1xudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBfZGVyZXFfKDc1KS5mO1xuXG5fZGVyZXFfKDgzKSgnZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgICByZXR1cm4gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0b0lPYmplY3QoaXQpLCBrZXkpO1xuICB9O1xufSk7XG5cbn0se1wiMTE3XCI6MTE3LFwiNzVcIjo3NSxcIjgzXCI6ODN9XSwxOTY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbl9kZXJlcV8oODMpKCdnZXRPd25Qcm9wZXJ0eU5hbWVzJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gX2RlcmVxXyg3NikuZjtcbn0pO1xuXG59LHtcIjc2XCI6NzYsXCI4M1wiOjgzfV0sMTk3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDE5LjEuMi45IE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIHRvT2JqZWN0ID0gX2RlcmVxXygxMTkpO1xudmFyICRnZXRQcm90b3R5cGVPZiA9IF9kZXJlcV8oNzkpO1xuXG5fZGVyZXFfKDgzKSgnZ2V0UHJvdG90eXBlT2YnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZihpdCkge1xuICAgIHJldHVybiAkZ2V0UHJvdG90eXBlT2YodG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuXG59LHtcIjExOVwiOjExOSxcIjc5XCI6NzksXCI4M1wiOjgzfV0sMTk4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDE5LjEuMi4xMSBPYmplY3QuaXNFeHRlbnNpYmxlKE8pXG52YXIgaXNPYmplY3QgPSBfZGVyZXFfKDUxKTtcblxuX2RlcmVxXyg4MykoJ2lzRXh0ZW5zaWJsZScsIGZ1bmN0aW9uICgkaXNFeHRlbnNpYmxlKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpc0V4dGVuc2libGUoaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzRXh0ZW5zaWJsZSA/ICRpc0V4dGVuc2libGUoaXQpIDogdHJ1ZSA6IGZhbHNlO1xuICB9O1xufSk7XG5cbn0se1wiNTFcIjo1MSxcIjgzXCI6ODN9XSwxOTk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMTkuMS4yLjEyIE9iamVjdC5pc0Zyb3plbihPKVxudmFyIGlzT2JqZWN0ID0gX2RlcmVxXyg1MSk7XG5cbl9kZXJlcV8oODMpKCdpc0Zyb3plbicsIGZ1bmN0aW9uICgkaXNGcm96ZW4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzRnJvemVuKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc0Zyb3plbiA/ICRpc0Zyb3plbihpdCkgOiBmYWxzZSA6IHRydWU7XG4gIH07XG59KTtcblxufSx7XCI1MVwiOjUxLFwiODNcIjo4M31dLDIwMDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAxOS4xLjIuMTMgT2JqZWN0LmlzU2VhbGVkKE8pXG52YXIgaXNPYmplY3QgPSBfZGVyZXFfKDUxKTtcblxuX2RlcmVxXyg4MykoJ2lzU2VhbGVkJywgZnVuY3Rpb24gKCRpc1NlYWxlZCkge1xuICByZXR1cm4gZnVuY3Rpb24gaXNTZWFsZWQoaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzU2VhbGVkID8gJGlzU2VhbGVkKGl0KSA6IGZhbHNlIDogdHJ1ZTtcbiAgfTtcbn0pO1xuXG59LHtcIjUxXCI6NTEsXCI4M1wiOjgzfV0sMjAxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDE5LjEuMy4xMCBPYmplY3QuaXModmFsdWUxLCB2YWx1ZTIpXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IGlzOiBfZGVyZXFfKDk2KSB9KTtcblxufSx7XCIzM1wiOjMzLFwiOTZcIjo5Nn1dLDIwMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAxOS4xLjIuMTQgT2JqZWN0LmtleXMoTylcbnZhciB0b09iamVjdCA9IF9kZXJlcV8oMTE5KTtcbnZhciAka2V5cyA9IF9kZXJlcV8oODEpO1xuXG5fZGVyZXFfKDgzKSgna2V5cycsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGtleXMoaXQpIHtcbiAgICByZXR1cm4gJGtleXModG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuXG59LHtcIjExOVwiOjExOSxcIjgxXCI6ODEsXCI4M1wiOjgzfV0sMjAzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDE5LjEuMi4xNSBPYmplY3QucHJldmVudEV4dGVuc2lvbnMoTylcbnZhciBpc09iamVjdCA9IF9kZXJlcV8oNTEpO1xudmFyIG1ldGEgPSBfZGVyZXFfKDY2KS5vbkZyZWV6ZTtcblxuX2RlcmVxXyg4MykoJ3ByZXZlbnRFeHRlbnNpb25zJywgZnVuY3Rpb24gKCRwcmV2ZW50RXh0ZW5zaW9ucykge1xuICByZXR1cm4gZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnMoaXQpIHtcbiAgICByZXR1cm4gJHByZXZlbnRFeHRlbnNpb25zICYmIGlzT2JqZWN0KGl0KSA/ICRwcmV2ZW50RXh0ZW5zaW9ucyhtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuXG59LHtcIjUxXCI6NTEsXCI2NlwiOjY2LFwiODNcIjo4M31dLDIwNDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAxOS4xLjIuMTcgT2JqZWN0LnNlYWwoTylcbnZhciBpc09iamVjdCA9IF9kZXJlcV8oNTEpO1xudmFyIG1ldGEgPSBfZGVyZXFfKDY2KS5vbkZyZWV6ZTtcblxuX2RlcmVxXyg4MykoJ3NlYWwnLCBmdW5jdGlvbiAoJHNlYWwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNlYWwoaXQpIHtcbiAgICByZXR1cm4gJHNlYWwgJiYgaXNPYmplY3QoaXQpID8gJHNlYWwobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcblxufSx7XCI1MVwiOjUxLFwiNjZcIjo2NixcIjgzXCI6ODN9XSwyMDU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMTkuMS4zLjE5IE9iamVjdC5zZXRQcm90b3R5cGVPZihPLCBwcm90bylcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgc2V0UHJvdG90eXBlT2Y6IF9kZXJlcV8oOTkpLnNldCB9KTtcblxufSx7XCIzM1wiOjMzLFwiOTlcIjo5OX1dLDIwNjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG4vLyAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjbGFzc29mID0gX2RlcmVxXygxNyk7XG52YXIgdGVzdCA9IHt9O1xudGVzdFtfZGVyZXFfKDEyOCkoJ3RvU3RyaW5nVGFnJyldID0gJ3onO1xuaWYgKHRlc3QgKyAnJyAhPSAnW29iamVjdCB6XScpIHtcbiAgX2RlcmVxXyg5NCkoT2JqZWN0LnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICdbb2JqZWN0ICcgKyBjbGFzc29mKHRoaXMpICsgJ10nO1xuICB9LCB0cnVlKTtcbn1cblxufSx7XCIxMjhcIjoxMjgsXCIxN1wiOjE3LFwiOTRcIjo5NH1dLDIwNzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyICRwYXJzZUZsb2F0ID0gX2RlcmVxXyg4Nik7XG4vLyAxOC4yLjQgcGFyc2VGbG9hdChzdHJpbmcpXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuRiAqIChwYXJzZUZsb2F0ICE9ICRwYXJzZUZsb2F0KSwgeyBwYXJzZUZsb2F0OiAkcGFyc2VGbG9hdCB9KTtcblxufSx7XCIzM1wiOjMzLFwiODZcIjo4Nn1dLDIwODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyICRwYXJzZUludCA9IF9kZXJlcV8oODcpO1xuLy8gMTguMi41IHBhcnNlSW50KHN0cmluZywgcmFkaXgpXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuRiAqIChwYXJzZUludCAhPSAkcGFyc2VJbnQpLCB7IHBhcnNlSW50OiAkcGFyc2VJbnQgfSk7XG5cbn0se1wiMzNcIjozMyxcIjg3XCI6ODd9XSwyMDk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSBfZGVyZXFfKDYwKTtcbnZhciBnbG9iYWwgPSBfZGVyZXFfKDQwKTtcbnZhciBjdHggPSBfZGVyZXFfKDI1KTtcbnZhciBjbGFzc29mID0gX2RlcmVxXygxNyk7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIGlzT2JqZWN0ID0gX2RlcmVxXyg1MSk7XG52YXIgYUZ1bmN0aW9uID0gX2RlcmVxXygzKTtcbnZhciBhbkluc3RhbmNlID0gX2RlcmVxXyg2KTtcbnZhciBmb3JPZiA9IF9kZXJlcV8oMzkpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IF9kZXJlcV8oMTA0KTtcbnZhciB0YXNrID0gX2RlcmVxXygxMTMpLnNldDtcbnZhciBtaWNyb3Rhc2sgPSBfZGVyZXFfKDY4KSgpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlID0gX2RlcmVxXyg2OSk7XG52YXIgcGVyZm9ybSA9IF9kZXJlcV8oOTApO1xudmFyIHByb21pc2VSZXNvbHZlID0gX2RlcmVxXyg5MSk7XG52YXIgUFJPTUlTRSA9ICdQcm9taXNlJztcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciAkUHJvbWlzZSA9IGdsb2JhbFtQUk9NSVNFXTtcbnZhciBpc05vZGUgPSBjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJztcbnZhciBlbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBJbnRlcm5hbCwgbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5LCBPd25Qcm9taXNlQ2FwYWJpbGl0eSwgV3JhcHBlcjtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmY7XG5cbnZhciBVU0VfTkFUSVZFID0gISFmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgLy8gY29ycmVjdCBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0XG4gICAgdmFyIHByb21pc2UgPSAkUHJvbWlzZS5yZXNvbHZlKDEpO1xuICAgIHZhciBGYWtlUHJvbWlzZSA9IChwcm9taXNlLmNvbnN0cnVjdG9yID0ge30pW19kZXJlcV8oMTI4KSgnc3BlY2llcycpXSA9IGZ1bmN0aW9uIChleGVjKSB7XG4gICAgICBleGVjKGVtcHR5LCBlbXB0eSk7XG4gICAgfTtcbiAgICAvLyB1bmhhbmRsZWQgcmVqZWN0aW9ucyB0cmFja2luZyBzdXBwb3J0LCBOb2RlSlMgUHJvbWlzZSB3aXRob3V0IGl0IGZhaWxzIEBAc3BlY2llcyB0ZXN0XG4gICAgcmV0dXJuIChpc05vZGUgfHwgdHlwZW9mIFByb21pc2VSZWplY3Rpb25FdmVudCA9PSAnZnVuY3Rpb24nKSAmJiBwcm9taXNlLnRoZW4oZW1wdHkpIGluc3RhbmNlb2YgRmFrZVByb21pc2U7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufSgpO1xuXG4vLyBoZWxwZXJzXG52YXIgc2FtZUNvbnN0cnVjdG9yID0gTElCUkFSWSA/IGZ1bmN0aW9uIChhLCBiKSB7XG4gIC8vIHdpdGggbGlicmFyeSB3cmFwcGVyIHNwZWNpYWwgY2FzZVxuICByZXR1cm4gYSA9PT0gYiB8fCBhID09PSAkUHJvbWlzZSAmJiBiID09PSBXcmFwcGVyO1xufSA6IGZ1bmN0aW9uIChhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufTtcbnZhciBpc1RoZW5hYmxlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciB0aGVuO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmIHR5cGVvZiAodGhlbiA9IGl0LnRoZW4pID09ICdmdW5jdGlvbicgPyB0aGVuIDogZmFsc2U7XG59O1xudmFyIG5vdGlmeSA9IGZ1bmN0aW9uIChwcm9taXNlLCBpc1JlamVjdCkge1xuICBpZiAocHJvbWlzZS5fbikgcmV0dXJuO1xuICBwcm9taXNlLl9uID0gdHJ1ZTtcbiAgdmFyIGNoYWluID0gcHJvbWlzZS5fYztcbiAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92O1xuICAgIHZhciBvayA9IHByb21pc2UuX3MgPT0gMTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHJ1biA9IGZ1bmN0aW9uIChyZWFjdGlvbikge1xuICAgICAgdmFyIGhhbmRsZXIgPSBvayA/IHJlYWN0aW9uLm9rIDogcmVhY3Rpb24uZmFpbDtcbiAgICAgIHZhciByZXNvbHZlID0gcmVhY3Rpb24ucmVzb2x2ZTtcbiAgICAgIHZhciByZWplY3QgPSByZWFjdGlvbi5yZWplY3Q7XG4gICAgICB2YXIgZG9tYWluID0gcmVhY3Rpb24uZG9tYWluO1xuICAgICAgdmFyIHJlc3VsdCwgdGhlbjtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgaWYgKCFvaykge1xuICAgICAgICAgICAgaWYgKHByb21pc2UuX2ggPT0gMikgb25IYW5kbGVVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgICAgICAgICBwcm9taXNlLl9oID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGhhbmRsZXIgPT09IHRydWUpIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGRvbWFpbikgZG9tYWluLmVudGVyKCk7XG4gICAgICAgICAgICByZXN1bHQgPSBoYW5kbGVyKHZhbHVlKTtcbiAgICAgICAgICAgIGlmIChkb21haW4pIGRvbWFpbi5leGl0KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHJlYWN0aW9uLnByb21pc2UpIHtcbiAgICAgICAgICAgIHJlamVjdChUeXBlRXJyb3IoJ1Byb21pc2UtY2hhaW4gY3ljbGUnKSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGVuID0gaXNUaGVuYWJsZShyZXN1bHQpKSB7XG4gICAgICAgICAgICB0aGVuLmNhbGwocmVzdWx0LCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0gZWxzZSByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSByZWplY3QodmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB3aGlsZSAoY2hhaW4ubGVuZ3RoID4gaSkgcnVuKGNoYWluW2krK10pOyAvLyB2YXJpYWJsZSBsZW5ndGggLSBjYW4ndCB1c2UgZm9yRWFjaFxuICAgIHByb21pc2UuX2MgPSBbXTtcbiAgICBwcm9taXNlLl9uID0gZmFsc2U7XG4gICAgaWYgKGlzUmVqZWN0ICYmICFwcm9taXNlLl9oKSBvblVuaGFuZGxlZChwcm9taXNlKTtcbiAgfSk7XG59O1xudmFyIG9uVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3Y7XG4gICAgdmFyIHVuaGFuZGxlZCA9IGlzVW5oYW5kbGVkKHByb21pc2UpO1xuICAgIHZhciByZXN1bHQsIGhhbmRsZXIsIGNvbnNvbGU7XG4gICAgaWYgKHVuaGFuZGxlZCkge1xuICAgICAgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChpc05vZGUpIHtcbiAgICAgICAgICBwcm9jZXNzLmVtaXQoJ3VuaGFuZGxlZFJlamVjdGlvbicsIHZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsLm9udW5oYW5kbGVkcmVqZWN0aW9uKSB7XG4gICAgICAgICAgaGFuZGxlcih7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogdmFsdWUgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoKGNvbnNvbGUgPSBnbG9iYWwuY29uc29sZSkgJiYgY29uc29sZS5lcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAvLyBCcm93c2VycyBzaG91bGQgbm90IHRyaWdnZXIgYHJlamVjdGlvbkhhbmRsZWRgIGV2ZW50IGlmIGl0IHdhcyBoYW5kbGVkIGhlcmUsIE5vZGVKUyAtIHNob3VsZFxuICAgICAgcHJvbWlzZS5faCA9IGlzTm9kZSB8fCBpc1VuaGFuZGxlZChwcm9taXNlKSA/IDIgOiAxO1xuICAgIH0gcHJvbWlzZS5fYSA9IHVuZGVmaW5lZDtcbiAgICBpZiAodW5oYW5kbGVkICYmIHJlc3VsdC5lKSB0aHJvdyByZXN1bHQudjtcbiAgfSk7XG59O1xudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgaWYgKHByb21pc2UuX2ggPT0gMSkgcmV0dXJuIGZhbHNlO1xuICB2YXIgY2hhaW4gPSBwcm9taXNlLl9hIHx8IHByb21pc2UuX2M7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlYWN0aW9uO1xuICB3aGlsZSAoY2hhaW4ubGVuZ3RoID4gaSkge1xuICAgIHJlYWN0aW9uID0gY2hhaW5baSsrXTtcbiAgICBpZiAocmVhY3Rpb24uZmFpbCB8fCAhaXNVbmhhbmRsZWQocmVhY3Rpb24ucHJvbWlzZSkpIHJldHVybiBmYWxzZTtcbiAgfSByZXR1cm4gdHJ1ZTtcbn07XG52YXIgb25IYW5kbGVVbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGhhbmRsZXI7XG4gICAgaWYgKGlzTm9kZSkge1xuICAgICAgcHJvY2Vzcy5lbWl0KCdyZWplY3Rpb25IYW5kbGVkJywgcHJvbWlzZSk7XG4gICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsLm9ucmVqZWN0aW9uaGFuZGxlZCkge1xuICAgICAgaGFuZGxlcih7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogcHJvbWlzZS5fdiB9KTtcbiAgICB9XG4gIH0pO1xufTtcbnZhciAkcmVqZWN0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBwcm9taXNlID0gdGhpcztcbiAgaWYgKHByb21pc2UuX2QpIHJldHVybjtcbiAgcHJvbWlzZS5fZCA9IHRydWU7XG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxuICBwcm9taXNlLl92ID0gdmFsdWU7XG4gIHByb21pc2UuX3MgPSAyO1xuICBpZiAoIXByb21pc2UuX2EpIHByb21pc2UuX2EgPSBwcm9taXNlLl9jLnNsaWNlKCk7XG4gIG5vdGlmeShwcm9taXNlLCB0cnVlKTtcbn07XG52YXIgJHJlc29sdmUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgdmFyIHByb21pc2UgPSB0aGlzO1xuICB2YXIgdGhlbjtcbiAgaWYgKHByb21pc2UuX2QpIHJldHVybjtcbiAgcHJvbWlzZS5fZCA9IHRydWU7XG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxuICB0cnkge1xuICAgIGlmIChwcm9taXNlID09PSB2YWx1ZSkgdGhyb3cgVHlwZUVycm9yKFwiUHJvbWlzZSBjYW4ndCBiZSByZXNvbHZlZCBpdHNlbGZcIik7XG4gICAgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHZhbHVlKSkge1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHdyYXBwZXIgPSB7IF93OiBwcm9taXNlLCBfZDogZmFsc2UgfTsgLy8gd3JhcFxuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoZW4uY2FsbCh2YWx1ZSwgY3R4KCRyZXNvbHZlLCB3cmFwcGVyLCAxKSwgY3R4KCRyZWplY3QsIHdyYXBwZXIsIDEpKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICRyZWplY3QuY2FsbCh3cmFwcGVyLCBlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb21pc2UuX3YgPSB2YWx1ZTtcbiAgICAgIHByb21pc2UuX3MgPSAxO1xuICAgICAgbm90aWZ5KHByb21pc2UsIGZhbHNlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAkcmVqZWN0LmNhbGwoeyBfdzogcHJvbWlzZSwgX2Q6IGZhbHNlIH0sIGUpOyAvLyB3cmFwXG4gIH1cbn07XG5cbi8vIGNvbnN0cnVjdG9yIHBvbHlmaWxsXG5pZiAoIVVTRV9OQVRJVkUpIHtcbiAgLy8gMjUuNC4zLjEgUHJvbWlzZShleGVjdXRvcilcbiAgJFByb21pc2UgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkUHJvbWlzZSwgUFJPTUlTRSwgJ19oJyk7XG4gICAgYUZ1bmN0aW9uKGV4ZWN1dG9yKTtcbiAgICBJbnRlcm5hbC5jYWxsKHRoaXMpO1xuICAgIHRyeSB7XG4gICAgICBleGVjdXRvcihjdHgoJHJlc29sdmUsIHRoaXMsIDEpLCBjdHgoJHJlamVjdCwgdGhpcywgMSkpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgJHJlamVjdC5jYWxsKHRoaXMsIGVycik7XG4gICAgfVxuICB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgSW50ZXJuYWwgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgdGhpcy5fYyA9IFtdOyAgICAgICAgICAgICAvLyA8LSBhd2FpdGluZyByZWFjdGlvbnNcbiAgICB0aGlzLl9hID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIGNoZWNrZWQgaW4gaXNVbmhhbmRsZWQgcmVhY3Rpb25zXG4gICAgdGhpcy5fcyA9IDA7ICAgICAgICAgICAgICAvLyA8LSBzdGF0ZVxuICAgIHRoaXMuX2QgPSBmYWxzZTsgICAgICAgICAgLy8gPC0gZG9uZVxuICAgIHRoaXMuX3YgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gdmFsdWVcbiAgICB0aGlzLl9oID0gMDsgICAgICAgICAgICAgIC8vIDwtIHJlamVjdGlvbiBzdGF0ZSwgMCAtIGRlZmF1bHQsIDEgLSBoYW5kbGVkLCAyIC0gdW5oYW5kbGVkXG4gICAgdGhpcy5fbiA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBub3RpZnlcbiAgfTtcbiAgSW50ZXJuYWwucHJvdG90eXBlID0gX2RlcmVxXyg5MykoJFByb21pc2UucHJvdG90eXBlLCB7XG4gICAgLy8gMjUuNC41LjMgUHJvbWlzZS5wcm90b3R5cGUudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZClcbiAgICB0aGVuOiBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gICAgICB2YXIgcmVhY3Rpb24gPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgJFByb21pc2UpKTtcbiAgICAgIHJlYWN0aW9uLm9rID0gdHlwZW9mIG9uRnVsZmlsbGVkID09ICdmdW5jdGlvbicgPyBvbkZ1bGZpbGxlZCA6IHRydWU7XG4gICAgICByZWFjdGlvbi5mYWlsID0gdHlwZW9mIG9uUmVqZWN0ZWQgPT0gJ2Z1bmN0aW9uJyAmJiBvblJlamVjdGVkO1xuICAgICAgcmVhY3Rpb24uZG9tYWluID0gaXNOb2RlID8gcHJvY2Vzcy5kb21haW4gOiB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9jLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHRoaXMuX2EpIHRoaXMuX2EucHVzaChyZWFjdGlvbik7XG4gICAgICBpZiAodGhpcy5fcykgbm90aWZ5KHRoaXMsIGZhbHNlKTtcbiAgICAgIHJldHVybiByZWFjdGlvbi5wcm9taXNlO1xuICAgIH0sXG4gICAgLy8gMjUuNC41LjEgUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2gob25SZWplY3RlZClcbiAgICAnY2F0Y2gnOiBmdW5jdGlvbiAob25SZWplY3RlZCkge1xuICAgICAgcmV0dXJuIHRoaXMudGhlbih1bmRlZmluZWQsIG9uUmVqZWN0ZWQpO1xuICAgIH1cbiAgfSk7XG4gIE93blByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9taXNlID0gbmV3IEludGVybmFsKCk7XG4gICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbiAgICB0aGlzLnJlc29sdmUgPSBjdHgoJHJlc29sdmUsIHByb21pc2UsIDEpO1xuICAgIHRoaXMucmVqZWN0ID0gY3R4KCRyZWplY3QsIHByb21pc2UsIDEpO1xuICB9O1xuICBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoQykge1xuICAgIHJldHVybiBzYW1lQ29uc3RydWN0b3IoJFByb21pc2UsIEMpXG4gICAgICA/IG5ldyBPd25Qcm9taXNlQ2FwYWJpbGl0eShDKVxuICAgICAgOiBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gIH07XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHsgUHJvbWlzZTogJFByb21pc2UgfSk7XG5fZGVyZXFfKDEwMSkoJFByb21pc2UsIFBST01JU0UpO1xuX2RlcmVxXygxMDApKFBST01JU0UpO1xuV3JhcHBlciA9IF9kZXJlcV8oMjMpW1BST01JU0VdO1xuXG4vLyBzdGF0aWNzXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC41IFByb21pc2UucmVqZWN0KHIpXG4gIHJlamVjdDogZnVuY3Rpb24gcmVqZWN0KHIpIHtcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpO1xuICAgIHZhciAkJHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgICQkcmVqZWN0KHIpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTElCUkFSWSB8fCAhVVNFX05BVElWRSksIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjYgUHJvbWlzZS5yZXNvbHZlKHgpXG4gIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoeCkge1xuICAgIC8vIGluc3RhbmNlb2YgaW5zdGVhZCBvZiBpbnRlcm5hbCBzbG90IGNoZWNrIGJlY2F1c2Ugd2Ugc2hvdWxkIGZpeCBpdCB3aXRob3V0IHJlcGxhY2VtZW50IG5hdGl2ZSBQcm9taXNlIGNvcmVcbiAgICBpZiAoeCBpbnN0YW5jZW9mICRQcm9taXNlICYmIHNhbWVDb25zdHJ1Y3Rvcih4LmNvbnN0cnVjdG9yLCB0aGlzKSkgcmV0dXJuIHg7XG4gICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKHRoaXMsIHgpO1xuICB9XG59KTtcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIShVU0VfTkFUSVZFICYmIF9kZXJlcV8oNTYpKGZ1bmN0aW9uIChpdGVyKSB7XG4gICRQcm9taXNlLmFsbChpdGVyKVsnY2F0Y2gnXShlbXB0eSk7XG59KSksIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjEgUHJvbWlzZS5hbGwoaXRlcmFibGUpXG4gIGFsbDogZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgcmVtYWluaW5nID0gMTtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyICRpbmRleCA9IGluZGV4Kys7XG4gICAgICAgIHZhciBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1skaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lKSByZWplY3QocmVzdWx0LnYpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH0sXG4gIC8vIDI1LjQuNC40IFByb21pc2UucmFjZShpdGVyYWJsZSlcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZSkgcmVqZWN0KHJlc3VsdC52KTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcblxufSx7XCIxMDBcIjoxMDAsXCIxMDFcIjoxMDEsXCIxMDRcIjoxMDQsXCIxMTNcIjoxMTMsXCIxMjhcIjoxMjgsXCIxN1wiOjE3LFwiMjNcIjoyMyxcIjI1XCI6MjUsXCIzXCI6MyxcIjMzXCI6MzMsXCIzOVwiOjM5LFwiNDBcIjo0MCxcIjUxXCI6NTEsXCI1NlwiOjU2LFwiNlwiOjYsXCI2MFwiOjYwLFwiNjhcIjo2OCxcIjY5XCI6NjksXCI5MFwiOjkwLFwiOTFcIjo5MSxcIjkzXCI6OTN9XSwyMTA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjYuMS4xIFJlZmxlY3QuYXBwbHkodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3QpXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIGFGdW5jdGlvbiA9IF9kZXJlcV8oMyk7XG52YXIgYW5PYmplY3QgPSBfZGVyZXFfKDcpO1xudmFyIHJBcHBseSA9IChfZGVyZXFfKDQwKS5SZWZsZWN0IHx8IHt9KS5hcHBseTtcbnZhciBmQXBwbHkgPSBGdW5jdGlvbi5hcHBseTtcbi8vIE1TIEVkZ2UgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhX2RlcmVxXygzNSkoZnVuY3Rpb24gKCkge1xuICByQXBwbHkoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pLCAnUmVmbGVjdCcsIHtcbiAgYXBwbHk6IGZ1bmN0aW9uIGFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KSB7XG4gICAgdmFyIFQgPSBhRnVuY3Rpb24odGFyZ2V0KTtcbiAgICB2YXIgTCA9IGFuT2JqZWN0KGFyZ3VtZW50c0xpc3QpO1xuICAgIHJldHVybiByQXBwbHkgPyByQXBwbHkoVCwgdGhpc0FyZ3VtZW50LCBMKSA6IGZBcHBseS5jYWxsKFQsIHRoaXNBcmd1bWVudCwgTCk7XG4gIH1cbn0pO1xuXG59LHtcIjNcIjozLFwiMzNcIjozMyxcIjM1XCI6MzUsXCI0MFwiOjQwLFwiN1wiOjd9XSwyMTE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjYuMS4yIFJlZmxlY3QuY29uc3RydWN0KHRhcmdldCwgYXJndW1lbnRzTGlzdCBbLCBuZXdUYXJnZXRdKVxudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciBjcmVhdGUgPSBfZGVyZXFfKDcxKTtcbnZhciBhRnVuY3Rpb24gPSBfZGVyZXFfKDMpO1xudmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTtcbnZhciBpc09iamVjdCA9IF9kZXJlcV8oNTEpO1xudmFyIGZhaWxzID0gX2RlcmVxXygzNSk7XG52YXIgYmluZCA9IF9kZXJlcV8oMTYpO1xudmFyIHJDb25zdHJ1Y3QgPSAoX2RlcmVxXyg0MCkuUmVmbGVjdCB8fCB7fSkuY29uc3RydWN0O1xuXG4vLyBNUyBFZGdlIHN1cHBvcnRzIG9ubHkgMiBhcmd1bWVudHMgYW5kIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWxcbi8vIEZGIE5pZ2h0bHkgc2V0cyB0aGlyZCBhcmd1bWVudCBhcyBgbmV3LnRhcmdldGAsIGJ1dCBkb2VzIG5vdCBjcmVhdGUgYHRoaXNgIGZyb20gaXRcbnZhciBORVdfVEFSR0VUX0JVRyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gIShyQ29uc3RydWN0KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgW10sIEYpIGluc3RhbmNlb2YgRik7XG59KTtcbnZhciBBUkdTX0JVRyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChORVdfVEFSR0VUX0JVRyB8fCBBUkdTX0JVRyksICdSZWZsZWN0Jywge1xuICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uIGNvbnN0cnVjdChUYXJnZXQsIGFyZ3MgLyogLCBuZXdUYXJnZXQgKi8pIHtcbiAgICBhRnVuY3Rpb24oVGFyZ2V0KTtcbiAgICBhbk9iamVjdChhcmdzKTtcbiAgICB2YXIgbmV3VGFyZ2V0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyBUYXJnZXQgOiBhRnVuY3Rpb24oYXJndW1lbnRzWzJdKTtcbiAgICBpZiAoQVJHU19CVUcgJiYgIU5FV19UQVJHRVRfQlVHKSByZXR1cm4gckNvbnN0cnVjdChUYXJnZXQsIGFyZ3MsIG5ld1RhcmdldCk7XG4gICAgaWYgKFRhcmdldCA9PSBuZXdUYXJnZXQpIHtcbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgb3B0aW1pemF0aW9uIGZvciAwLTQgYXJndW1lbnRzXG4gICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBUYXJnZXQoKTtcbiAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdKTtcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgICAgIH1cbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgbG90IG9mIGFyZ3VtZW50cyBjYXNlXG4gICAgICB2YXIgJGFyZ3MgPSBbbnVsbF07XG4gICAgICAkYXJncy5wdXNoLmFwcGx5KCRhcmdzLCBhcmdzKTtcbiAgICAgIHJldHVybiBuZXcgKGJpbmQuYXBwbHkoVGFyZ2V0LCAkYXJncykpKCk7XG4gICAgfVxuICAgIC8vIHdpdGggYWx0ZXJlZCBuZXdUYXJnZXQsIG5vdCBzdXBwb3J0IGJ1aWx0LWluIGNvbnN0cnVjdG9yc1xuICAgIHZhciBwcm90byA9IG5ld1RhcmdldC5wcm90b3R5cGU7XG4gICAgdmFyIGluc3RhbmNlID0gY3JlYXRlKGlzT2JqZWN0KHByb3RvKSA/IHByb3RvIDogT2JqZWN0LnByb3RvdHlwZSk7XG4gICAgdmFyIHJlc3VsdCA9IEZ1bmN0aW9uLmFwcGx5LmNhbGwoVGFyZ2V0LCBpbnN0YW5jZSwgYXJncyk7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHJlc3VsdCkgPyByZXN1bHQgOiBpbnN0YW5jZTtcbiAgfVxufSk7XG5cbn0se1wiMTZcIjoxNixcIjNcIjozLFwiMzNcIjozMyxcIjM1XCI6MzUsXCI0MFwiOjQwLFwiNTFcIjo1MSxcIjdcIjo3LFwiNzFcIjo3MX1dLDIxMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyNi4xLjMgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKVxudmFyIGRQID0gX2RlcmVxXyg3Mik7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTtcbnZhciB0b1ByaW1pdGl2ZSA9IF9kZXJlcV8oMTIwKTtcblxuLy8gTVMgRWRnZSBoYXMgYnJva2VuIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkgLSB0aHJvd2luZyBpbnN0ZWFkIG9mIHJldHVybmluZyBmYWxzZVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBfZGVyZXFfKDM1KShmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICBSZWZsZWN0LmRlZmluZVByb3BlcnR5KGRQLmYoe30sIDEsIHsgdmFsdWU6IDEgfSksIDEsIHsgdmFsdWU6IDIgfSk7XG59KSwgJ1JlZmxlY3QnLCB7XG4gIGRlZmluZVByb3BlcnR5OiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICBwcm9wZXJ0eUtleSA9IHRvUHJpbWl0aXZlKHByb3BlcnR5S2V5LCB0cnVlKTtcbiAgICBhbk9iamVjdChhdHRyaWJ1dGVzKTtcbiAgICB0cnkge1xuICAgICAgZFAuZih0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuXG59LHtcIjEyMFwiOjEyMCxcIjMzXCI6MzMsXCIzNVwiOjM1LFwiN1wiOjcsXCI3MlwiOjcyfV0sMjEzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDI2LjEuNCBSZWZsZWN0LmRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIGdPUEQgPSBfZGVyZXFfKDc1KS5mO1xudmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBkZWxldGVQcm9wZXJ0eTogZnVuY3Rpb24gZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHZhciBkZXNjID0gZ09QRChhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gICAgcmV0dXJuIGRlc2MgJiYgIWRlc2MuY29uZmlndXJhYmxlID8gZmFsc2UgOiBkZWxldGUgdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgfVxufSk7XG5cbn0se1wiMzNcIjozMyxcIjdcIjo3LFwiNzVcIjo3NX1dLDIxNDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG4vLyAyNi4xLjUgUmVmbGVjdC5lbnVtZXJhdGUodGFyZ2V0KVxudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciBhbk9iamVjdCA9IF9kZXJlcV8oNyk7XG52YXIgRW51bWVyYXRlID0gZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHRoaXMuX3QgPSBhbk9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHZhciBrZXlzID0gdGhpcy5fayA9IFtdOyAgICAgIC8vIGtleXNcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gaXRlcmF0ZWQpIGtleXMucHVzaChrZXkpO1xufTtcbl9kZXJlcV8oNTQpKEVudW1lcmF0ZSwgJ09iamVjdCcsIGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSB0aGlzO1xuICB2YXIga2V5cyA9IHRoYXQuX2s7XG4gIHZhciBrZXk7XG4gIGRvIHtcbiAgICBpZiAodGhhdC5faSA+PSBrZXlzLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9IHdoaWxlICghKChrZXkgPSBrZXlzW3RoYXQuX2krK10pIGluIHRoYXQuX3QpKTtcbiAgcmV0dXJuIHsgdmFsdWU6IGtleSwgZG9uZTogZmFsc2UgfTtcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGVudW1lcmF0ZTogZnVuY3Rpb24gZW51bWVyYXRlKHRhcmdldCkge1xuICAgIHJldHVybiBuZXcgRW51bWVyYXRlKHRhcmdldCk7XG4gIH1cbn0pO1xuXG59LHtcIjMzXCI6MzMsXCI1NFwiOjU0LFwiN1wiOjd9XSwyMTU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjYuMS43IFJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgZ09QRCA9IF9kZXJlcV8oNzUpO1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciBhbk9iamVjdCA9IF9kZXJlcV8oNyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHJldHVybiBnT1BELmYoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICB9XG59KTtcblxufSx7XCIzM1wiOjMzLFwiN1wiOjcsXCI3NVwiOjc1fV0sMjE2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDI2LjEuOCBSZWZsZWN0LmdldFByb3RvdHlwZU9mKHRhcmdldClcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgZ2V0UHJvdG8gPSBfZGVyZXFfKDc5KTtcbnZhciBhbk9iamVjdCA9IF9kZXJlcV8oNyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZ2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKHRhcmdldCkge1xuICAgIHJldHVybiBnZXRQcm90byhhbk9iamVjdCh0YXJnZXQpKTtcbiAgfVxufSk7XG5cbn0se1wiMzNcIjozMyxcIjdcIjo3LFwiNzlcIjo3OX1dLDIxNzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyNi4xLjYgUmVmbGVjdC5nZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSBbLCByZWNlaXZlcl0pXG52YXIgZ09QRCA9IF9kZXJlcV8oNzUpO1xudmFyIGdldFByb3RvdHlwZU9mID0gX2RlcmVxXyg3OSk7XG52YXIgaGFzID0gX2RlcmVxXyg0MSk7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIGlzT2JqZWN0ID0gX2RlcmVxXyg1MSk7XG52YXIgYW5PYmplY3QgPSBfZGVyZXFfKDcpO1xuXG5mdW5jdGlvbiBnZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSAvKiAsIHJlY2VpdmVyICovKSB7XG4gIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdGFyZ2V0IDogYXJndW1lbnRzWzJdO1xuICB2YXIgZGVzYywgcHJvdG87XG4gIGlmIChhbk9iamVjdCh0YXJnZXQpID09PSByZWNlaXZlcikgcmV0dXJuIHRhcmdldFtwcm9wZXJ0eUtleV07XG4gIGlmIChkZXNjID0gZ09QRC5mKHRhcmdldCwgcHJvcGVydHlLZXkpKSByZXR1cm4gaGFzKGRlc2MsICd2YWx1ZScpXG4gICAgPyBkZXNjLnZhbHVlXG4gICAgOiBkZXNjLmdldCAhPT0gdW5kZWZpbmVkXG4gICAgICA/IGRlc2MuZ2V0LmNhbGwocmVjZWl2ZXIpXG4gICAgICA6IHVuZGVmaW5lZDtcbiAgaWYgKGlzT2JqZWN0KHByb3RvID0gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSkpIHJldHVybiBnZXQocHJvdG8sIHByb3BlcnR5S2V5LCByZWNlaXZlcik7XG59XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgZ2V0OiBnZXQgfSk7XG5cbn0se1wiMzNcIjozMyxcIjQxXCI6NDEsXCI1MVwiOjUxLFwiN1wiOjcsXCI3NVwiOjc1LFwiNzlcIjo3OX1dLDIxODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyNi4xLjkgUmVmbGVjdC5oYXModGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgaGFzOiBmdW5jdGlvbiBoYXModGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHJldHVybiBwcm9wZXJ0eUtleSBpbiB0YXJnZXQ7XG4gIH1cbn0pO1xuXG59LHtcIjMzXCI6MzN9XSwyMTk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjYuMS4xMCBSZWZsZWN0LmlzRXh0ZW5zaWJsZSh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTtcbnZhciAkaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBpc0V4dGVuc2libGU6IGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZSh0YXJnZXQpIHtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHJldHVybiAkaXNFeHRlbnNpYmxlID8gJGlzRXh0ZW5zaWJsZSh0YXJnZXQpIDogdHJ1ZTtcbiAgfVxufSk7XG5cbn0se1wiMzNcIjozMyxcIjdcIjo3fV0sMjIwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDI2LjEuMTEgUmVmbGVjdC5vd25LZXlzKHRhcmdldClcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgb3duS2V5czogX2RlcmVxXyg4NSkgfSk7XG5cbn0se1wiMzNcIjozMyxcIjg1XCI6ODV9XSwyMjE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjYuMS4xMiBSZWZsZWN0LnByZXZlbnRFeHRlbnNpb25zKHRhcmdldClcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgYW5PYmplY3QgPSBfZGVyZXFfKDcpO1xudmFyICRwcmV2ZW50RXh0ZW5zaW9ucyA9IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBwcmV2ZW50RXh0ZW5zaW9uczogZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICB0cnkge1xuICAgICAgaWYgKCRwcmV2ZW50RXh0ZW5zaW9ucykgJHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcblxufSx7XCIzM1wiOjMzLFwiN1wiOjd9XSwyMjI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjYuMS4xNCBSZWZsZWN0LnNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIHNldFByb3RvID0gX2RlcmVxXyg5OSk7XG5cbmlmIChzZXRQcm90bykgJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBzZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90bykge1xuICAgIHNldFByb3RvLmNoZWNrKHRhcmdldCwgcHJvdG8pO1xuICAgIHRyeSB7XG4gICAgICBzZXRQcm90by5zZXQodGFyZ2V0LCBwcm90byk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcblxufSx7XCIzM1wiOjMzLFwiOTlcIjo5OX1dLDIyMzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyAyNi4xLjEzIFJlZmxlY3Quc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYgWywgcmVjZWl2ZXJdKVxudmFyIGRQID0gX2RlcmVxXyg3Mik7XG52YXIgZ09QRCA9IF9kZXJlcV8oNzUpO1xudmFyIGdldFByb3RvdHlwZU9mID0gX2RlcmVxXyg3OSk7XG52YXIgaGFzID0gX2RlcmVxXyg0MSk7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIGNyZWF0ZURlc2MgPSBfZGVyZXFfKDkyKTtcbnZhciBhbk9iamVjdCA9IF9kZXJlcV8oNyk7XG52YXIgaXNPYmplY3QgPSBfZGVyZXFfKDUxKTtcblxuZnVuY3Rpb24gc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYgLyogLCByZWNlaXZlciAqLykge1xuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgNCA/IHRhcmdldCA6IGFyZ3VtZW50c1szXTtcbiAgdmFyIG93bkRlc2MgPSBnT1BELmYoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICB2YXIgZXhpc3RpbmdEZXNjcmlwdG9yLCBwcm90bztcbiAgaWYgKCFvd25EZXNjKSB7XG4gICAgaWYgKGlzT2JqZWN0KHByb3RvID0gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSkpIHtcbiAgICAgIHJldHVybiBzZXQocHJvdG8sIHByb3BlcnR5S2V5LCBWLCByZWNlaXZlcik7XG4gICAgfVxuICAgIG93bkRlc2MgPSBjcmVhdGVEZXNjKDApO1xuICB9XG4gIGlmIChoYXMob3duRGVzYywgJ3ZhbHVlJykpIHtcbiAgICBpZiAob3duRGVzYy53cml0YWJsZSA9PT0gZmFsc2UgfHwgIWlzT2JqZWN0KHJlY2VpdmVyKSkgcmV0dXJuIGZhbHNlO1xuICAgIGV4aXN0aW5nRGVzY3JpcHRvciA9IGdPUEQuZihyZWNlaXZlciwgcHJvcGVydHlLZXkpIHx8IGNyZWF0ZURlc2MoMCk7XG4gICAgZXhpc3RpbmdEZXNjcmlwdG9yLnZhbHVlID0gVjtcbiAgICBkUC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSwgZXhpc3RpbmdEZXNjcmlwdG9yKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gb3duRGVzYy5zZXQgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogKG93bkRlc2Muc2V0LmNhbGwocmVjZWl2ZXIsIFYpLCB0cnVlKTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgeyBzZXQ6IHNldCB9KTtcblxufSx7XCIzM1wiOjMzLFwiNDFcIjo0MSxcIjUxXCI6NTEsXCI3XCI6NyxcIjcyXCI6NzIsXCI3NVwiOjc1LFwiNzlcIjo3OSxcIjkyXCI6OTJ9XSwyMjQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyIGdsb2JhbCA9IF9kZXJlcV8oNDApO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gX2RlcmVxXyg0NSk7XG52YXIgZFAgPSBfZGVyZXFfKDcyKS5mO1xudmFyIGdPUE4gPSBfZGVyZXFfKDc3KS5mO1xudmFyIGlzUmVnRXhwID0gX2RlcmVxXyg1Mik7XG52YXIgJGZsYWdzID0gX2RlcmVxXygzNyk7XG52YXIgJFJlZ0V4cCA9IGdsb2JhbC5SZWdFeHA7XG52YXIgQmFzZSA9ICRSZWdFeHA7XG52YXIgcHJvdG8gPSAkUmVnRXhwLnByb3RvdHlwZTtcbnZhciByZTEgPSAvYS9nO1xudmFyIHJlMiA9IC9hL2c7XG4vLyBcIm5ld1wiIGNyZWF0ZXMgYSBuZXcgb2JqZWN0LCBvbGQgd2Via2l0IGJ1Z2d5IGhlcmVcbnZhciBDT1JSRUNUX05FVyA9IG5ldyAkUmVnRXhwKHJlMSkgIT09IHJlMTtcblxuaWYgKF9kZXJlcV8oMjkpICYmICghQ09SUkVDVF9ORVcgfHwgX2RlcmVxXygzNSkoZnVuY3Rpb24gKCkge1xuICByZTJbX2RlcmVxXygxMjgpKCdtYXRjaCcpXSA9IGZhbHNlO1xuICAvLyBSZWdFeHAgY29uc3RydWN0b3IgY2FuIGFsdGVyIGZsYWdzIGFuZCBJc1JlZ0V4cCB3b3JrcyBjb3JyZWN0IHdpdGggQEBtYXRjaFxuICByZXR1cm4gJFJlZ0V4cChyZTEpICE9IHJlMSB8fCAkUmVnRXhwKHJlMikgPT0gcmUyIHx8ICRSZWdFeHAocmUxLCAnaScpICE9ICcvYS9pJztcbn0pKSkge1xuICAkUmVnRXhwID0gZnVuY3Rpb24gUmVnRXhwKHAsIGYpIHtcbiAgICB2YXIgdGlSRSA9IHRoaXMgaW5zdGFuY2VvZiAkUmVnRXhwO1xuICAgIHZhciBwaVJFID0gaXNSZWdFeHAocCk7XG4gICAgdmFyIGZpVSA9IGYgPT09IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gIXRpUkUgJiYgcGlSRSAmJiBwLmNvbnN0cnVjdG9yID09PSAkUmVnRXhwICYmIGZpVSA/IHBcbiAgICAgIDogaW5oZXJpdElmUmVxdWlyZWQoQ09SUkVDVF9ORVdcbiAgICAgICAgPyBuZXcgQmFzZShwaVJFICYmICFmaVUgPyBwLnNvdXJjZSA6IHAsIGYpXG4gICAgICAgIDogQmFzZSgocGlSRSA9IHAgaW5zdGFuY2VvZiAkUmVnRXhwKSA/IHAuc291cmNlIDogcCwgcGlSRSAmJiBmaVUgPyAkZmxhZ3MuY2FsbChwKSA6IGYpXG4gICAgICAsIHRpUkUgPyB0aGlzIDogcHJvdG8sICRSZWdFeHApO1xuICB9O1xuICB2YXIgcHJveHkgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAga2V5IGluICRSZWdFeHAgfHwgZFAoJFJlZ0V4cCwga2V5LCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEJhc2Vba2V5XTsgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gKGl0KSB7IEJhc2Vba2V5XSA9IGl0OyB9XG4gICAgfSk7XG4gIH07XG4gIGZvciAodmFyIGtleXMgPSBnT1BOKEJhc2UpLCBpID0gMDsga2V5cy5sZW5ndGggPiBpOykgcHJveHkoa2V5c1tpKytdKTtcbiAgcHJvdG8uY29uc3RydWN0b3IgPSAkUmVnRXhwO1xuICAkUmVnRXhwLnByb3RvdHlwZSA9IHByb3RvO1xuICBfZGVyZXFfKDk0KShnbG9iYWwsICdSZWdFeHAnLCAkUmVnRXhwKTtcbn1cblxuX2RlcmVxXygxMDApKCdSZWdFeHAnKTtcblxufSx7XCIxMDBcIjoxMDAsXCIxMjhcIjoxMjgsXCIyOVwiOjI5LFwiMzVcIjozNSxcIjM3XCI6MzcsXCI0MFwiOjQwLFwiNDVcIjo0NSxcIjUyXCI6NTIsXCI3MlwiOjcyLFwiNzdcIjo3NyxcIjk0XCI6OTR9XSwyMjU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3MoKVxuaWYgKF9kZXJlcV8oMjkpICYmIC8uL2cuZmxhZ3MgIT0gJ2cnKSBfZGVyZXFfKDcyKS5mKFJlZ0V4cC5wcm90b3R5cGUsICdmbGFncycsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IF9kZXJlcV8oMzcpXG59KTtcblxufSx7XCIyOVwiOjI5LFwiMzdcIjozNyxcIjcyXCI6NzJ9XSwyMjY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gQEBtYXRjaCBsb2dpY1xuX2RlcmVxXygzNikoJ21hdGNoJywgMSwgZnVuY3Rpb24gKGRlZmluZWQsIE1BVENILCAkbWF0Y2gpIHtcbiAgLy8gMjEuMS4zLjExIFN0cmluZy5wcm90b3R5cGUubWF0Y2gocmVnZXhwKVxuICByZXR1cm4gW2Z1bmN0aW9uIG1hdGNoKHJlZ2V4cCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgdmFyIGZuID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHJlZ2V4cFtNQVRDSF07XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbTUFUQ0hdKFN0cmluZyhPKSk7XG4gIH0sICRtYXRjaF07XG59KTtcblxufSx7XCIzNlwiOjM2fV0sMjI3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIEBAcmVwbGFjZSBsb2dpY1xuX2RlcmVxXygzNikoJ3JlcGxhY2UnLCAyLCBmdW5jdGlvbiAoZGVmaW5lZCwgUkVQTEFDRSwgJHJlcGxhY2UpIHtcbiAgLy8gMjEuMS4zLjE0IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKVxuICByZXR1cm4gW2Z1bmN0aW9uIHJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgdmFyIGZuID0gc2VhcmNoVmFsdWUgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VhcmNoVmFsdWVbUkVQTEFDRV07XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWRcbiAgICAgID8gZm4uY2FsbChzZWFyY2hWYWx1ZSwgTywgcmVwbGFjZVZhbHVlKVxuICAgICAgOiAkcmVwbGFjZS5jYWxsKFN0cmluZyhPKSwgc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7XG4gIH0sICRyZXBsYWNlXTtcbn0pO1xuXG59LHtcIjM2XCI6MzZ9XSwyMjg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gQEBzZWFyY2ggbG9naWNcbl9kZXJlcV8oMzYpKCdzZWFyY2gnLCAxLCBmdW5jdGlvbiAoZGVmaW5lZCwgU0VBUkNILCAkc2VhcmNoKSB7XG4gIC8vIDIxLjEuMy4xNSBTdHJpbmcucHJvdG90eXBlLnNlYXJjaChyZWdleHApXG4gIHJldHVybiBbZnVuY3Rpb24gc2VhcmNoKHJlZ2V4cCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgdmFyIGZuID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHJlZ2V4cFtTRUFSQ0hdO1xuICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW1NFQVJDSF0oU3RyaW5nKE8pKTtcbiAgfSwgJHNlYXJjaF07XG59KTtcblxufSx7XCIzNlwiOjM2fV0sMjI5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIEBAc3BsaXQgbG9naWNcbl9kZXJlcV8oMzYpKCdzcGxpdCcsIDIsIGZ1bmN0aW9uIChkZWZpbmVkLCBTUExJVCwgJHNwbGl0KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIGlzUmVnRXhwID0gX2RlcmVxXyg1Mik7XG4gIHZhciBfc3BsaXQgPSAkc3BsaXQ7XG4gIHZhciAkcHVzaCA9IFtdLnB1c2g7XG4gIHZhciAkU1BMSVQgPSAnc3BsaXQnO1xuICB2YXIgTEVOR1RIID0gJ2xlbmd0aCc7XG4gIHZhciBMQVNUX0lOREVYID0gJ2xhc3RJbmRleCc7XG4gIGlmIChcbiAgICAnYWJiYydbJFNQTElUXSgvKGIpKi8pWzFdID09ICdjJyB8fFxuICAgICd0ZXN0J1skU1BMSVRdKC8oPzopLywgLTEpW0xFTkdUSF0gIT0gNCB8fFxuICAgICdhYidbJFNQTElUXSgvKD86YWIpKi8pW0xFTkdUSF0gIT0gMiB8fFxuICAgICcuJ1skU1BMSVRdKC8oLj8pKC4/KS8pW0xFTkdUSF0gIT0gNCB8fFxuICAgICcuJ1skU1BMSVRdKC8oKSgpLylbTEVOR1RIXSA+IDEgfHxcbiAgICAnJ1skU1BMSVRdKC8uPy8pW0xFTkdUSF1cbiAgKSB7XG4gICAgdmFyIE5QQ0cgPSAvKCk/Py8uZXhlYygnJylbMV0gPT09IHVuZGVmaW5lZDsgLy8gbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXBcbiAgICAvLyBiYXNlZCBvbiBlczUtc2hpbSBpbXBsZW1lbnRhdGlvbiwgbmVlZCB0byByZXdvcmsgaXRcbiAgICAkc3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgdmFyIHN0cmluZyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIGlmIChzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMCkgcmV0dXJuIFtdO1xuICAgICAgLy8gSWYgYHNlcGFyYXRvcmAgaXMgbm90IGEgcmVnZXgsIHVzZSBuYXRpdmUgc3BsaXRcbiAgICAgIGlmICghaXNSZWdFeHAoc2VwYXJhdG9yKSkgcmV0dXJuIF9zcGxpdC5jYWxsKHN0cmluZywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgICB2YXIgb3V0cHV0ID0gW107XG4gICAgICB2YXIgZmxhZ3MgPSAoc2VwYXJhdG9yLmlnbm9yZUNhc2UgPyAnaScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5tdWx0aWxpbmUgPyAnbScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci51bmljb2RlID8gJ3UnIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3Iuc3RpY2t5ID8gJ3knIDogJycpO1xuICAgICAgdmFyIGxhc3RMYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIHNwbGl0TGltaXQgPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gNDI5NDk2NzI5NSA6IGxpbWl0ID4+PiAwO1xuICAgICAgLy8gTWFrZSBgZ2xvYmFsYCBhbmQgYXZvaWQgYGxhc3RJbmRleGAgaXNzdWVzIGJ5IHdvcmtpbmcgd2l0aCBhIGNvcHlcbiAgICAgIHZhciBzZXBhcmF0b3JDb3B5ID0gbmV3IFJlZ0V4cChzZXBhcmF0b3Iuc291cmNlLCBmbGFncyArICdnJyk7XG4gICAgICB2YXIgc2VwYXJhdG9yMiwgbWF0Y2gsIGxhc3RJbmRleCwgbGFzdExlbmd0aCwgaTtcbiAgICAgIC8vIERvZXNuJ3QgbmVlZCBmbGFncyBneSwgYnV0IHRoZXkgZG9uJ3QgaHVydFxuICAgICAgaWYgKCFOUENHKSBzZXBhcmF0b3IyID0gbmV3IFJlZ0V4cCgnXicgKyBzZXBhcmF0b3JDb3B5LnNvdXJjZSArICckKD8hXFxcXHMpJywgZmxhZ3MpO1xuICAgICAgd2hpbGUgKG1hdGNoID0gc2VwYXJhdG9yQ29weS5leGVjKHN0cmluZykpIHtcbiAgICAgICAgLy8gYHNlcGFyYXRvckNvcHkubGFzdEluZGV4YCBpcyBub3QgcmVsaWFibGUgY3Jvc3MtYnJvd3NlclxuICAgICAgICBsYXN0SW5kZXggPSBtYXRjaC5pbmRleCArIG1hdGNoWzBdW0xFTkdUSF07XG4gICAgICAgIGlmIChsYXN0SW5kZXggPiBsYXN0TGFzdEluZGV4KSB7XG4gICAgICAgICAgb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgsIG1hdGNoLmluZGV4KSk7XG4gICAgICAgICAgLy8gRml4IGJyb3dzZXJzIHdob3NlIGBleGVjYCBtZXRob2RzIGRvbid0IGNvbnNpc3RlbnRseSByZXR1cm4gYHVuZGVmaW5lZGAgZm9yIE5QQ0dcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9vcC1mdW5jXG4gICAgICAgICAgaWYgKCFOUENHICYmIG1hdGNoW0xFTkdUSF0gPiAxKSBtYXRjaFswXS5yZXBsYWNlKHNlcGFyYXRvcjIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGZvciAoaSA9IDE7IGkgPCBhcmd1bWVudHNbTEVOR1RIXSAtIDI7IGkrKykgaWYgKGFyZ3VtZW50c1tpXSA9PT0gdW5kZWZpbmVkKSBtYXRjaFtpXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZiAobWF0Y2hbTEVOR1RIXSA+IDEgJiYgbWF0Y2guaW5kZXggPCBzdHJpbmdbTEVOR1RIXSkgJHB1c2guYXBwbHkob3V0cHV0LCBtYXRjaC5zbGljZSgxKSk7XG4gICAgICAgICAgbGFzdExlbmd0aCA9IG1hdGNoWzBdW0xFTkdUSF07XG4gICAgICAgICAgbGFzdExhc3RJbmRleCA9IGxhc3RJbmRleDtcbiAgICAgICAgICBpZiAob3V0cHV0W0xFTkdUSF0gPj0gc3BsaXRMaW1pdCkgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF0gPT09IG1hdGNoLmluZGV4KSBzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdKys7IC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3BcbiAgICAgIH1cbiAgICAgIGlmIChsYXN0TGFzdEluZGV4ID09PSBzdHJpbmdbTEVOR1RIXSkge1xuICAgICAgICBpZiAobGFzdExlbmd0aCB8fCAhc2VwYXJhdG9yQ29weS50ZXN0KCcnKSkgb3V0cHV0LnB1c2goJycpO1xuICAgICAgfSBlbHNlIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4KSk7XG4gICAgICByZXR1cm4gb3V0cHV0W0xFTkdUSF0gPiBzcGxpdExpbWl0ID8gb3V0cHV0LnNsaWNlKDAsIHNwbGl0TGltaXQpIDogb3V0cHV0O1xuICAgIH07XG4gIC8vIENoYWtyYSwgVjhcbiAgfSBlbHNlIGlmICgnMCdbJFNQTElUXSh1bmRlZmluZWQsIDApW0xFTkdUSF0pIHtcbiAgICAkc3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgcmV0dXJuIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwID8gW10gOiBfc3BsaXQuY2FsbCh0aGlzLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9O1xuICB9XG4gIC8vIDIxLjEuMy4xNyBTdHJpbmcucHJvdG90eXBlLnNwbGl0KHNlcGFyYXRvciwgbGltaXQpXG4gIHJldHVybiBbZnVuY3Rpb24gc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICB2YXIgZm4gPSBzZXBhcmF0b3IgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VwYXJhdG9yW1NQTElUXTtcbiAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwoc2VwYXJhdG9yLCBPLCBsaW1pdCkgOiAkc3BsaXQuY2FsbChTdHJpbmcoTyksIHNlcGFyYXRvciwgbGltaXQpO1xuICB9LCAkc3BsaXRdO1xufSk7XG5cbn0se1wiMzZcIjozNixcIjUyXCI6NTJ9XSwyMzA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuX2RlcmVxXygyMjUpO1xudmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTtcbnZhciAkZmxhZ3MgPSBfZGVyZXFfKDM3KTtcbnZhciBERVNDUklQVE9SUyA9IF9kZXJlcV8oMjkpO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgJHRvU3RyaW5nID0gLy4vW1RPX1NUUklOR107XG5cbnZhciBkZWZpbmUgPSBmdW5jdGlvbiAoZm4pIHtcbiAgX2RlcmVxXyg5NCkoUmVnRXhwLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmbiwgdHJ1ZSk7XG59O1xuXG4vLyAyMS4yLjUuMTQgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZygpXG5pZiAoX2RlcmVxXygzNSkoZnVuY3Rpb24gKCkgeyByZXR1cm4gJHRvU3RyaW5nLmNhbGwoeyBzb3VyY2U6ICdhJywgZmxhZ3M6ICdiJyB9KSAhPSAnL2EvYic7IH0pKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgUiA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHJldHVybiAnLycuY29uY2F0KFIuc291cmNlLCAnLycsXG4gICAgICAnZmxhZ3MnIGluIFIgPyBSLmZsYWdzIDogIURFU0NSSVBUT1JTICYmIFIgaW5zdGFuY2VvZiBSZWdFeHAgPyAkZmxhZ3MuY2FsbChSKSA6IHVuZGVmaW5lZCk7XG4gIH0pO1xuLy8gRkY0NC0gUmVnRXhwI3RvU3RyaW5nIGhhcyBhIHdyb25nIG5hbWVcbn0gZWxzZSBpZiAoJHRvU3RyaW5nLm5hbWUgIT0gVE9fU1RSSU5HKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJHRvU3RyaW5nLmNhbGwodGhpcyk7XG4gIH0pO1xufVxuXG59LHtcIjIyNVwiOjIyNSxcIjI5XCI6MjksXCIzNVwiOjM1LFwiMzdcIjozNyxcIjdcIjo3LFwiOTRcIjo5NH1dLDIzMTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgc3Ryb25nID0gX2RlcmVxXygxOSk7XG52YXIgdmFsaWRhdGUgPSBfZGVyZXFfKDEyNSk7XG52YXIgU0VUID0gJ1NldCc7XG5cbi8vIDIzLjIgU2V0IE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gX2RlcmVxXygyMikoU0VULCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBTZXQoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy4yLjMuMSBTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSlcbiAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih2YWxpZGF0ZSh0aGlzLCBTRVQpLCB2YWx1ZSA9IHZhbHVlID09PSAwID8gMCA6IHZhbHVlLCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZyk7XG5cbn0se1wiMTI1XCI6MTI1LFwiMTlcIjoxOSxcIjIyXCI6MjJ9XSwyMzI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMiBTdHJpbmcucHJvdG90eXBlLmFuY2hvcihuYW1lKVxuX2RlcmVxXygxMDgpKCdhbmNob3InLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYW5jaG9yKG5hbWUpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICduYW1lJywgbmFtZSk7XG4gIH07XG59KTtcblxufSx7XCIxMDhcIjoxMDh9XSwyMzM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMyBTdHJpbmcucHJvdG90eXBlLmJpZygpXG5fZGVyZXFfKDEwOCkoJ2JpZycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBiaWcoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2JpZycsICcnLCAnJyk7XG4gIH07XG59KTtcblxufSx7XCIxMDhcIjoxMDh9XSwyMzQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNCBTdHJpbmcucHJvdG90eXBlLmJsaW5rKClcbl9kZXJlcV8oMTA4KSgnYmxpbmsnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYmxpbmsoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2JsaW5rJywgJycsICcnKTtcbiAgfTtcbn0pO1xuXG59LHtcIjEwOFwiOjEwOH1dLDIzNTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG4vLyBCLjIuMy41IFN0cmluZy5wcm90b3R5cGUuYm9sZCgpXG5fZGVyZXFfKDEwOCkoJ2JvbGQnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYm9sZCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYicsICcnLCAnJyk7XG4gIH07XG59KTtcblxufSx7XCIxMDhcIjoxMDh9XSwyMzY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciAkYXQgPSBfZGVyZXFfKDEwNikoZmFsc2UpO1xuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMy4zIFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXQocG9zKVxuICBjb2RlUG9pbnRBdDogZnVuY3Rpb24gY29kZVBvaW50QXQocG9zKSB7XG4gICAgcmV0dXJuICRhdCh0aGlzLCBwb3MpO1xuICB9XG59KTtcblxufSx7XCIxMDZcIjoxMDYsXCIzM1wiOjMzfV0sMjM3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIDIxLjEuMy42IFN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGgoc2VhcmNoU3RyaW5nIFssIGVuZFBvc2l0aW9uXSlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgdG9MZW5ndGggPSBfZGVyZXFfKDExOCk7XG52YXIgY29udGV4dCA9IF9kZXJlcV8oMTA3KTtcbnZhciBFTkRTX1dJVEggPSAnZW5kc1dpdGgnO1xudmFyICRlbmRzV2l0aCA9ICcnW0VORFNfV0lUSF07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogX2RlcmVxXygzNCkoRU5EU19XSVRIKSwgJ1N0cmluZycsIHtcbiAgZW5kc1dpdGg6IGZ1bmN0aW9uIGVuZHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIGVuZFBvc2l0aW9uID0gQGxlbmd0aCAqLykge1xuICAgIHZhciB0aGF0ID0gY29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIEVORFNfV0lUSCk7XG4gICAgdmFyIGVuZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRoYXQubGVuZ3RoKTtcbiAgICB2YXIgZW5kID0gZW5kUG9zaXRpb24gPT09IHVuZGVmaW5lZCA/IGxlbiA6IE1hdGgubWluKHRvTGVuZ3RoKGVuZFBvc2l0aW9uKSwgbGVuKTtcbiAgICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuICRlbmRzV2l0aFxuICAgICAgPyAkZW5kc1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGVuZClcbiAgICAgIDogdGhhdC5zbGljZShlbmQgLSBzZWFyY2gubGVuZ3RoLCBlbmQpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuXG59LHtcIjEwN1wiOjEwNyxcIjExOFwiOjExOCxcIjMzXCI6MzMsXCIzNFwiOjM0fV0sMjM4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjYgU3RyaW5nLnByb3RvdHlwZS5maXhlZCgpXG5fZGVyZXFfKDEwOCkoJ2ZpeGVkJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZpeGVkKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICd0dCcsICcnLCAnJyk7XG4gIH07XG59KTtcblxufSx7XCIxMDhcIjoxMDh9XSwyMzk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNyBTdHJpbmcucHJvdG90eXBlLmZvbnRjb2xvcihjb2xvcilcbl9kZXJlcV8oMTA4KSgnZm9udGNvbG9yJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZvbnRjb2xvcihjb2xvcikge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ2NvbG9yJywgY29sb3IpO1xuICB9O1xufSk7XG5cbn0se1wiMTA4XCI6MTA4fV0sMjQwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjggU3RyaW5nLnByb3RvdHlwZS5mb250c2l6ZShzaXplKVxuX2RlcmVxXygxMDgpKCdmb250c2l6ZScsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmb250c2l6ZShzaXplKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnc2l6ZScsIHNpemUpO1xuICB9O1xufSk7XG5cbn0se1wiMTA4XCI6MTA4fV0sMjQxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gX2RlcmVxXygxMTQpO1xudmFyIGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG52YXIgJGZyb21Db2RlUG9pbnQgPSBTdHJpbmcuZnJvbUNvZGVQb2ludDtcblxuLy8gbGVuZ3RoIHNob3VsZCBiZSAxLCBvbGQgRkYgcHJvYmxlbVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoISEkZnJvbUNvZGVQb2ludCAmJiAkZnJvbUNvZGVQb2ludC5sZW5ndGggIT0gMSksICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMi4yIFN0cmluZy5mcm9tQ29kZVBvaW50KC4uLmNvZGVQb2ludHMpXG4gIGZyb21Db2RlUG9pbnQ6IGZ1bmN0aW9uIGZyb21Db2RlUG9pbnQoeCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGNvZGU7XG4gICAgd2hpbGUgKGFMZW4gPiBpKSB7XG4gICAgICBjb2RlID0gK2FyZ3VtZW50c1tpKytdO1xuICAgICAgaWYgKHRvQWJzb2x1dGVJbmRleChjb2RlLCAweDEwZmZmZikgIT09IGNvZGUpIHRocm93IFJhbmdlRXJyb3IoY29kZSArICcgaXMgbm90IGEgdmFsaWQgY29kZSBwb2ludCcpO1xuICAgICAgcmVzLnB1c2goY29kZSA8IDB4MTAwMDBcbiAgICAgICAgPyBmcm9tQ2hhckNvZGUoY29kZSlcbiAgICAgICAgOiBmcm9tQ2hhckNvZGUoKChjb2RlIC09IDB4MTAwMDApID4+IDEwKSArIDB4ZDgwMCwgY29kZSAlIDB4NDAwICsgMHhkYzAwKVxuICAgICAgKTtcbiAgICB9IHJldHVybiByZXMuam9pbignJyk7XG4gIH1cbn0pO1xuXG59LHtcIjExNFwiOjExNCxcIjMzXCI6MzN9XSwyNDI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjEuMS4zLjcgU3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlcyhzZWFyY2hTdHJpbmcsIHBvc2l0aW9uID0gMClcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgY29udGV4dCA9IF9kZXJlcV8oMTA3KTtcbnZhciBJTkNMVURFUyA9ICdpbmNsdWRlcyc7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogX2RlcmVxXygzNCkoSU5DTFVERVMpLCAnU3RyaW5nJywge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XG4gICAgcmV0dXJuICEhfmNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBJTkNMVURFUylcbiAgICAgIC5pbmRleE9mKHNlYXJjaFN0cmluZywgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcblxufSx7XCIxMDdcIjoxMDcsXCIzM1wiOjMzLFwiMzRcIjozNH1dLDI0MzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG4vLyBCLjIuMy45IFN0cmluZy5wcm90b3R5cGUuaXRhbGljcygpXG5fZGVyZXFfKDEwOCkoJ2l0YWxpY3MnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gaXRhbGljcygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnaScsICcnLCAnJyk7XG4gIH07XG59KTtcblxufSx7XCIxMDhcIjoxMDh9XSwyNDQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xudmFyICRhdCA9IF9kZXJlcV8oMTA2KSh0cnVlKTtcblxuLy8gMjEuMS4zLjI3IFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxuX2RlcmVxXyg1NSkoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHRoaXMuX3QgPSBTdHJpbmcoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbi8vIDIxLjEuNS4yLjEgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIgaW5kZXggPSB0aGlzLl9pO1xuICB2YXIgcG9pbnQ7XG4gIGlmIChpbmRleCA+PSBPLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICBwb2ludCA9ICRhdChPLCBpbmRleCk7XG4gIHRoaXMuX2kgKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4geyB2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlIH07XG59KTtcblxufSx7XCIxMDZcIjoxMDYsXCI1NVwiOjU1fV0sMjQ1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEwIFN0cmluZy5wcm90b3R5cGUubGluayh1cmwpXG5fZGVyZXFfKDEwOCkoJ2xpbmsnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gbGluayh1cmwpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICdocmVmJywgdXJsKTtcbiAgfTtcbn0pO1xuXG59LHtcIjEwOFwiOjEwOH1dLDI0NjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIHRvSU9iamVjdCA9IF9kZXJlcV8oMTE3KTtcbnZhciB0b0xlbmd0aCA9IF9kZXJlcV8oMTE4KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMi40IFN0cmluZy5yYXcoY2FsbFNpdGUsIC4uLnN1YnN0aXR1dGlvbnMpXG4gIHJhdzogZnVuY3Rpb24gcmF3KGNhbGxTaXRlKSB7XG4gICAgdmFyIHRwbCA9IHRvSU9iamVjdChjYWxsU2l0ZS5yYXcpO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aCh0cGwubGVuZ3RoKTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAobGVuID4gaSkge1xuICAgICAgcmVzLnB1c2goU3RyaW5nKHRwbFtpKytdKSk7XG4gICAgICBpZiAoaSA8IGFMZW4pIHJlcy5wdXNoKFN0cmluZyhhcmd1bWVudHNbaV0pKTtcbiAgICB9IHJldHVybiByZXMuam9pbignJyk7XG4gIH1cbn0pO1xuXG59LHtcIjExN1wiOjExNyxcIjExOFwiOjExOCxcIjMzXCI6MzN9XSwyNDc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMy4xMyBTdHJpbmcucHJvdG90eXBlLnJlcGVhdChjb3VudClcbiAgcmVwZWF0OiBfZGVyZXFfKDExMClcbn0pO1xuXG59LHtcIjExMFwiOjExMCxcIjMzXCI6MzN9XSwyNDg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTEgU3RyaW5nLnByb3RvdHlwZS5zbWFsbCgpXG5fZGVyZXFfKDEwOCkoJ3NtYWxsJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNtYWxsKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzbWFsbCcsICcnLCAnJyk7XG4gIH07XG59KTtcblxufSx7XCIxMDhcIjoxMDh9XSwyNDk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gMjEuMS4zLjE4IFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgWywgcG9zaXRpb24gXSlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgdG9MZW5ndGggPSBfZGVyZXFfKDExOCk7XG52YXIgY29udGV4dCA9IF9kZXJlcV8oMTA3KTtcbnZhciBTVEFSVFNfV0lUSCA9ICdzdGFydHNXaXRoJztcbnZhciAkc3RhcnRzV2l0aCA9ICcnW1NUQVJUU19XSVRIXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBfZGVyZXFfKDM0KShTVEFSVFNfV0lUSCksICdTdHJpbmcnLCB7XG4gIHN0YXJ0c1dpdGg6IGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XG4gICAgdmFyIHRoYXQgPSBjb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgU1RBUlRTX1dJVEgpO1xuICAgIHZhciBpbmRleCA9IHRvTGVuZ3RoKE1hdGgubWluKGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCB0aGF0Lmxlbmd0aCkpO1xuICAgIHZhciBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTtcbiAgICByZXR1cm4gJHN0YXJ0c1dpdGhcbiAgICAgID8gJHN0YXJ0c1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGluZGV4KVxuICAgICAgOiB0aGF0LnNsaWNlKGluZGV4LCBpbmRleCArIHNlYXJjaC5sZW5ndGgpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuXG59LHtcIjEwN1wiOjEwNyxcIjExOFwiOjExOCxcIjMzXCI6MzMsXCIzNFwiOjM0fV0sMjUwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEyIFN0cmluZy5wcm90b3R5cGUuc3RyaWtlKClcbl9kZXJlcV8oMTA4KSgnc3RyaWtlJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN0cmlrZSgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3RyaWtlJywgJycsICcnKTtcbiAgfTtcbn0pO1xuXG59LHtcIjEwOFwiOjEwOH1dLDI1MTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMyBTdHJpbmcucHJvdG90eXBlLnN1YigpXG5fZGVyZXFfKDEwOCkoJ3N1YicsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzdWIoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N1YicsICcnLCAnJyk7XG4gIH07XG59KTtcblxufSx7XCIxMDhcIjoxMDh9XSwyNTI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTQgU3RyaW5nLnByb3RvdHlwZS5zdXAoKVxuX2RlcmVxXygxMDgpKCdzdXAnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3VwKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdXAnLCAnJywgJycpO1xuICB9O1xufSk7XG5cbn0se1wiMTA4XCI6MTA4fV0sMjUzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0Jztcbi8vIDIxLjEuMy4yNSBTdHJpbmcucHJvdG90eXBlLnRyaW0oKVxuX2RlcmVxXygxMTEpKCd0cmltJywgZnVuY3Rpb24gKCR0cmltKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltKCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAzKTtcbiAgfTtcbn0pO1xuXG59LHtcIjExMVwiOjExMX1dLDI1NDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG4vLyBFQ01BU2NyaXB0IDYgc3ltYm9scyBzaGltXG52YXIgZ2xvYmFsID0gX2RlcmVxXyg0MCk7XG52YXIgaGFzID0gX2RlcmVxXyg0MSk7XG52YXIgREVTQ1JJUFRPUlMgPSBfZGVyZXFfKDI5KTtcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgcmVkZWZpbmUgPSBfZGVyZXFfKDk0KTtcbnZhciBNRVRBID0gX2RlcmVxXyg2NikuS0VZO1xudmFyICRmYWlscyA9IF9kZXJlcV8oMzUpO1xudmFyIHNoYXJlZCA9IF9kZXJlcV8oMTAzKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IF9kZXJlcV8oMTAxKTtcbnZhciB1aWQgPSBfZGVyZXFfKDEyNCk7XG52YXIgd2tzID0gX2RlcmVxXygxMjgpO1xudmFyIHdrc0V4dCA9IF9kZXJlcV8oMTI3KTtcbnZhciB3a3NEZWZpbmUgPSBfZGVyZXFfKDEyNik7XG52YXIga2V5T2YgPSBfZGVyZXFfKDU5KTtcbnZhciBlbnVtS2V5cyA9IF9kZXJlcV8oMzIpO1xudmFyIGlzQXJyYXkgPSBfZGVyZXFfKDQ5KTtcbnZhciBhbk9iamVjdCA9IF9kZXJlcV8oNyk7XG52YXIgdG9JT2JqZWN0ID0gX2RlcmVxXygxMTcpO1xudmFyIHRvUHJpbWl0aXZlID0gX2RlcmVxXygxMjApO1xudmFyIGNyZWF0ZURlc2MgPSBfZGVyZXFfKDkyKTtcbnZhciBfY3JlYXRlID0gX2RlcmVxXyg3MSk7XG52YXIgZ09QTkV4dCA9IF9kZXJlcV8oNzYpO1xudmFyICRHT1BEID0gX2RlcmVxXyg3NSk7XG52YXIgJERQID0gX2RlcmVxXyg3Mik7XG52YXIgJGtleXMgPSBfZGVyZXFfKDgxKTtcbnZhciBnT1BEID0gJEdPUEQuZjtcbnZhciBkUCA9ICREUC5mO1xudmFyIGdPUE4gPSBnT1BORXh0LmY7XG52YXIgJFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgJEpTT04gPSBnbG9iYWwuSlNPTjtcbnZhciBfc3RyaW5naWZ5ID0gJEpTT04gJiYgJEpTT04uc3RyaW5naWZ5O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIEhJRERFTiA9IHdrcygnX2hpZGRlbicpO1xudmFyIFRPX1BSSU1JVElWRSA9IHdrcygndG9QcmltaXRpdmUnKTtcbnZhciBpc0VudW0gPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBTeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXJlZ2lzdHJ5Jyk7XG52YXIgQWxsU3ltYm9scyA9IHNoYXJlZCgnc3ltYm9scycpO1xudmFyIE9QU3ltYm9scyA9IHNoYXJlZCgnb3Atc3ltYm9scycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0W1BST1RPVFlQRV07XG52YXIgVVNFX05BVElWRSA9IHR5cGVvZiAkU3ltYm9sID09ICdmdW5jdGlvbic7XG52YXIgUU9iamVjdCA9IGdsb2JhbC5RT2JqZWN0O1xuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgc2V0dGVyID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgc2V0U3ltYm9sRGVzYyA9IERFU0NSSVBUT1JTICYmICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBfY3JlYXRlKGRQKHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRQKHRoaXMsICdhJywgeyB2YWx1ZTogNyB9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uIChpdCwga2V5LCBEKSB7XG4gIHZhciBwcm90b0Rlc2MgPSBnT1BEKE9iamVjdFByb3RvLCBrZXkpO1xuICBpZiAocHJvdG9EZXNjKSBkZWxldGUgT2JqZWN0UHJvdG9ba2V5XTtcbiAgZFAoaXQsIGtleSwgRCk7XG4gIGlmIChwcm90b0Rlc2MgJiYgaXQgIT09IE9iamVjdFByb3RvKSBkUChPYmplY3RQcm90bywga2V5LCBwcm90b0Rlc2MpO1xufSA6IGRQO1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgdmFyIHN5bSA9IEFsbFN5bWJvbHNbdGFnXSA9IF9jcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcbiAgc3ltLl9rID0gdGFnO1xuICByZXR1cm4gc3ltO1xufTtcblxudmFyIGlzU3ltYm9sID0gVVNFX05BVElWRSAmJiB0eXBlb2YgJFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJyA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnO1xufSA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgaW5zdGFuY2VvZiAkU3ltYm9sO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIEQpIHtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90bykgJGRlZmluZVByb3BlcnR5KE9QU3ltYm9scywga2V5LCBEKTtcbiAgYW5PYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBhbk9iamVjdChEKTtcbiAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkpKSB7XG4gICAgaWYgKCFELmVudW1lcmFibGUpIHtcbiAgICAgIGlmICghaGFzKGl0LCBISURERU4pKSBkUChpdCwgSElEREVOLCBjcmVhdGVEZXNjKDEsIHt9KSk7XG4gICAgICBpdFtISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkgaXRbSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBEID0gX2NyZWF0ZShELCB7IGVudW1lcmFibGU6IGNyZWF0ZURlc2MoMCwgZmFsc2UpIH0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2MoaXQsIGtleSwgRCk7XG4gIH0gcmV0dXJuIGRQKGl0LCBrZXksIEQpO1xufTtcbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoaXQsIFApIHtcbiAgYW5PYmplY3QoaXQpO1xuICB2YXIga2V5cyA9IGVudW1LZXlzKFAgPSB0b0lPYmplY3QoUCkpO1xuICB2YXIgaSA9IDA7XG4gIHZhciBsID0ga2V5cy5sZW5ndGg7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsID4gaSkgJGRlZmluZVByb3BlcnR5KGl0LCBrZXkgPSBrZXlzW2krK10sIFBba2V5XSk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpdCwgUCkge1xuICByZXR1cm4gUCA9PT0gdW5kZWZpbmVkID8gX2NyZWF0ZShpdCkgOiAkZGVmaW5lUHJvcGVydGllcyhfY3JlYXRlKGl0KSwgUCk7XG59O1xudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKGtleSkge1xuICB2YXIgRSA9IGlzRW51bS5jYWxsKHRoaXMsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpO1xuICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIEUgfHwgIWhhcyh0aGlzLCBrZXkpIHx8ICFoYXMoQWxsU3ltYm9scywga2V5KSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1ba2V5XSA/IEUgOiB0cnVlO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgaXQgPSB0b0lPYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm47XG4gIHZhciBEID0gZ09QRChpdCwga2V5KTtcbiAgaWYgKEQgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSkgRC5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgcmV0dXJuIEQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICB2YXIgbmFtZXMgPSBnT1BOKHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoIWhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiBrZXkgIT0gSElEREVOICYmIGtleSAhPSBNRVRBKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgdmFyIElTX09QID0gaXQgPT09IE9iamVjdFByb3RvO1xuICB2YXIgbmFtZXMgPSBnT1BOKElTX09QID8gT1BTeW1ib2xzIDogdG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmIChoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYgKElTX09QID8gaGFzKE9iamVjdFByb3RvLCBrZXkpIDogdHJ1ZSkpIHJlc3VsdC5wdXNoKEFsbFN5bWJvbHNba2V5XSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIDE5LjQuMS4xIFN5bWJvbChbZGVzY3JpcHRpb25dKVxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgaWYgKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKSB0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvciEnKTtcbiAgICB2YXIgdGFnID0gdWlkKGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgJHNldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvKSAkc2V0LmNhbGwoT1BTeW1ib2xzLCB2YWx1ZSk7XG4gICAgICBpZiAoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSkgdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcbiAgICAgIHNldFN5bWJvbERlc2ModGhpcywgdGFnLCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG4gICAgfTtcbiAgICBpZiAoREVTQ1JJUFRPUlMgJiYgc2V0dGVyKSBzZXRTeW1ib2xEZXNjKE9iamVjdFByb3RvLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6ICRzZXQgfSk7XG4gICAgcmV0dXJuIHdyYXAodGFnKTtcbiAgfTtcbiAgcmVkZWZpbmUoJFN5bWJvbFtQUk9UT1RZUEVdLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5faztcbiAgfSk7XG5cbiAgJEdPUEQuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICREUC5mID0gJGRlZmluZVByb3BlcnR5O1xuICBfZGVyZXFfKDc3KS5mID0gZ09QTkV4dC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7XG4gIF9kZXJlcV8oODIpLmYgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gIF9kZXJlcV8oNzgpLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIGlmIChERVNDUklQVE9SUyAmJiAhX2RlcmVxXyg2MCkpIHtcbiAgICByZWRlZmluZShPYmplY3RQcm90bywgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJHByb3BlcnR5SXNFbnVtZXJhYmxlLCB0cnVlKTtcbiAgfVxuXG4gIHdrc0V4dC5mID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gd3JhcCh3a3MobmFtZSkpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7IFN5bWJvbDogJFN5bWJvbCB9KTtcblxuZm9yICh2YXIgZXM2U3ltYm9scyA9IChcbiAgLy8gMTkuNC4yLjIsIDE5LjQuMi4zLCAxOS40LjIuNCwgMTkuNC4yLjYsIDE5LjQuMi44LCAxOS40LjIuOSwgMTkuNC4yLjEwLCAxOS40LjIuMTEsIDE5LjQuMi4xMiwgMTkuNC4yLjEzLCAxOS40LjIuMTRcbiAgJ2hhc0luc3RhbmNlLGlzQ29uY2F0U3ByZWFkYWJsZSxpdGVyYXRvcixtYXRjaCxyZXBsYWNlLHNlYXJjaCxzcGVjaWVzLHNwbGl0LHRvUHJpbWl0aXZlLHRvU3RyaW5nVGFnLHVuc2NvcGFibGVzJ1xuKS5zcGxpdCgnLCcpLCBqID0gMDsgZXM2U3ltYm9scy5sZW5ndGggPiBqOyl3a3MoZXM2U3ltYm9sc1tqKytdKTtcblxuZm9yICh2YXIgd2VsbEtub3duU3ltYm9scyA9ICRrZXlzKHdrcy5zdG9yZSksIGsgPSAwOyB3ZWxsS25vd25TeW1ib2xzLmxlbmd0aCA+IGs7KSB3a3NEZWZpbmUod2VsbEtub3duU3ltYm9sc1trKytdKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ1N5bWJvbCcsIHtcbiAgLy8gMTkuNC4yLjEgU3ltYm9sLmZvcihrZXkpXG4gICdmb3InOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIGhhcyhTeW1ib2xSZWdpc3RyeSwga2V5ICs9ICcnKVxuICAgICAgPyBTeW1ib2xSZWdpc3RyeVtrZXldXG4gICAgICA6IFN5bWJvbFJlZ2lzdHJ5W2tleV0gPSAkU3ltYm9sKGtleSk7XG4gIH0sXG4gIC8vIDE5LjQuMi41IFN5bWJvbC5rZXlGb3Ioc3ltKVxuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihrZXkpIHtcbiAgICBpZiAoaXNTeW1ib2woa2V5KSkgcmV0dXJuIGtleU9mKFN5bWJvbFJlZ2lzdHJ5LCBrZXkpO1xuICAgIHRocm93IFR5cGVFcnJvcihrZXkgKyAnIGlzIG5vdCBhIHN5bWJvbCEnKTtcbiAgfSxcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IHRydWU7IH0sXG4gIHVzZVNpbXBsZTogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSBmYWxzZTsgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdPYmplY3QnLCB7XG4gIC8vIDE5LjEuMi4yIE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiAgY3JlYXRlOiAkY3JlYXRlLFxuICAvLyAxOS4xLjIuNCBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcbiAgLy8gMTkuMS4yLjMgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsXG4gIC8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICAvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgLy8gMTkuMS4yLjggT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhPKVxuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbn0pO1xuXG4vLyAyNC4zLjIgSlNPTi5zdHJpbmdpZnkodmFsdWUgWywgcmVwbGFjZXIgWywgc3BhY2VdXSlcbiRKU09OICYmICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCFVU0VfTkFUSVZFIHx8ICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBTID0gJFN5bWJvbCgpO1xuICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fVxuICAvLyBXZWJLaXQgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIG51bGxcbiAgLy8gVjggdGhyb3dzIG9uIGJveGVkIHN5bWJvbHNcbiAgcmV0dXJuIF9zdHJpbmdpZnkoW1NdKSAhPSAnW251bGxdJyB8fCBfc3RyaW5naWZ5KHsgYTogUyB9KSAhPSAne30nIHx8IF9zdHJpbmdpZnkoT2JqZWN0KFMpKSAhPSAne30nO1xufSkpLCAnSlNPTicsIHtcbiAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQpIHtcbiAgICBpZiAoaXQgPT09IHVuZGVmaW5lZCB8fCBpc1N5bWJvbChpdCkpIHJldHVybjsgLy8gSUU4IHJldHVybnMgc3RyaW5nIG9uIHVuZGVmaW5lZFxuICAgIHZhciBhcmdzID0gW2l0XTtcbiAgICB2YXIgaSA9IDE7XG4gICAgdmFyIHJlcGxhY2VyLCAkcmVwbGFjZXI7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgIHJlcGxhY2VyID0gYXJnc1sxXTtcbiAgICBpZiAodHlwZW9mIHJlcGxhY2VyID09ICdmdW5jdGlvbicpICRyZXBsYWNlciA9IHJlcGxhY2VyO1xuICAgIGlmICgkcmVwbGFjZXIgfHwgIWlzQXJyYXkocmVwbGFjZXIpKSByZXBsYWNlciA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoJHJlcGxhY2VyKSB2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgaWYgKCFpc1N5bWJvbCh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIGFyZ3NbMV0gPSByZXBsYWNlcjtcbiAgICByZXR1cm4gX3N0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJncyk7XG4gIH1cbn0pO1xuXG4vLyAxOS40LjMuNCBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdKGhpbnQpXG4kU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSB8fCBfZGVyZXFfKDQyKSgkU3ltYm9sW1BST1RPVFlQRV0sIFRPX1BSSU1JVElWRSwgJFN5bWJvbFtQUk9UT1RZUEVdLnZhbHVlT2YpO1xuLy8gMTkuNC4zLjUgU3ltYm9sLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoJFN5bWJvbCwgJ1N5bWJvbCcpO1xuLy8gMjAuMi4xLjkgTWF0aFtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoTWF0aCwgJ01hdGgnLCB0cnVlKTtcbi8vIDI0LjMuMyBKU09OW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhnbG9iYWwuSlNPTiwgJ0pTT04nLCB0cnVlKTtcblxufSx7XCIxMDFcIjoxMDEsXCIxMDNcIjoxMDMsXCIxMTdcIjoxMTcsXCIxMjBcIjoxMjAsXCIxMjRcIjoxMjQsXCIxMjZcIjoxMjYsXCIxMjdcIjoxMjcsXCIxMjhcIjoxMjgsXCIyOVwiOjI5LFwiMzJcIjozMixcIjMzXCI6MzMsXCIzNVwiOjM1LFwiNDBcIjo0MCxcIjQxXCI6NDEsXCI0MlwiOjQyLFwiNDlcIjo0OSxcIjU5XCI6NTksXCI2MFwiOjYwLFwiNjZcIjo2NixcIjdcIjo3LFwiNzFcIjo3MSxcIjcyXCI6NzIsXCI3NVwiOjc1LFwiNzZcIjo3NixcIjc3XCI6NzcsXCI3OFwiOjc4LFwiODFcIjo4MSxcIjgyXCI6ODIsXCI5MlwiOjkyLFwiOTRcIjo5NH1dLDI1NTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyICR0eXBlZCA9IF9kZXJlcV8oMTIzKTtcbnZhciBidWZmZXIgPSBfZGVyZXFfKDEyMik7XG52YXIgYW5PYmplY3QgPSBfZGVyZXFfKDcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IF9kZXJlcV8oMTE0KTtcbnZhciB0b0xlbmd0aCA9IF9kZXJlcV8oMTE4KTtcbnZhciBpc09iamVjdCA9IF9kZXJlcV8oNTEpO1xudmFyIEFycmF5QnVmZmVyID0gX2RlcmVxXyg0MCkuQXJyYXlCdWZmZXI7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gX2RlcmVxXygxMDQpO1xudmFyICRBcnJheUJ1ZmZlciA9IGJ1ZmZlci5BcnJheUJ1ZmZlcjtcbnZhciAkRGF0YVZpZXcgPSBidWZmZXIuRGF0YVZpZXc7XG52YXIgJGlzVmlldyA9ICR0eXBlZC5BQlYgJiYgQXJyYXlCdWZmZXIuaXNWaWV3O1xudmFyICRzbGljZSA9ICRBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2U7XG52YXIgVklFVyA9ICR0eXBlZC5WSUVXO1xudmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKEFycmF5QnVmZmVyICE9PSAkQXJyYXlCdWZmZXIpLCB7IEFycmF5QnVmZmVyOiAkQXJyYXlCdWZmZXIgfSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISR0eXBlZC5DT05TVFIsIEFSUkFZX0JVRkZFUiwge1xuICAvLyAyNC4xLjMuMSBBcnJheUJ1ZmZlci5pc1ZpZXcoYXJnKVxuICBpc1ZpZXc6IGZ1bmN0aW9uIGlzVmlldyhpdCkge1xuICAgIHJldHVybiAkaXNWaWV3ICYmICRpc1ZpZXcoaXQpIHx8IGlzT2JqZWN0KGl0KSAmJiBWSUVXIGluIGl0O1xuICB9XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlUgKyAkZXhwb3J0LkYgKiBfZGVyZXFfKDM1KShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhbmV3ICRBcnJheUJ1ZmZlcigyKS5zbGljZSgxLCB1bmRlZmluZWQpLmJ5dGVMZW5ndGg7XG59KSwgQVJSQVlfQlVGRkVSLCB7XG4gIC8vIDI0LjEuNC4zIEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZShzdGFydCwgZW5kKVxuICBzbGljZTogZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIGlmICgkc2xpY2UgIT09IHVuZGVmaW5lZCAmJiBlbmQgPT09IHVuZGVmaW5lZCkgcmV0dXJuICRzbGljZS5jYWxsKGFuT2JqZWN0KHRoaXMpLCBzdGFydCk7IC8vIEZGIGZpeFxuICAgIHZhciBsZW4gPSBhbk9iamVjdCh0aGlzKS5ieXRlTGVuZ3RoO1xuICAgIHZhciBmaXJzdCA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuKTtcbiAgICB2YXIgZmluYWwgPSB0b0Fic29sdXRlSW5kZXgoZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiBlbmQsIGxlbik7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsICRBcnJheUJ1ZmZlcikpKHRvTGVuZ3RoKGZpbmFsIC0gZmlyc3QpKTtcbiAgICB2YXIgdmlld1MgPSBuZXcgJERhdGFWaWV3KHRoaXMpO1xuICAgIHZhciB2aWV3VCA9IG5ldyAkRGF0YVZpZXcocmVzdWx0KTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHdoaWxlIChmaXJzdCA8IGZpbmFsKSB7XG4gICAgICB2aWV3VC5zZXRVaW50OChpbmRleCsrLCB2aWV3Uy5nZXRVaW50OChmaXJzdCsrKSk7XG4gICAgfSByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcblxuX2RlcmVxXygxMDApKEFSUkFZX0JVRkZFUik7XG5cbn0se1wiMTAwXCI6MTAwLFwiMTA0XCI6MTA0LFwiMTE0XCI6MTE0LFwiMTE4XCI6MTE4LFwiMTIyXCI6MTIyLFwiMTIzXCI6MTIzLFwiMzNcIjozMyxcIjM1XCI6MzUsXCI0MFwiOjQwLFwiNTFcIjo1MSxcIjdcIjo3fV0sMjU2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFfZGVyZXFfKDEyMykuQUJWLCB7XG4gIERhdGFWaWV3OiBfZGVyZXFfKDEyMikuRGF0YVZpZXdcbn0pO1xuXG59LHtcIjEyMlwiOjEyMixcIjEyM1wiOjEyMyxcIjMzXCI6MzN9XSwyNTc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuX2RlcmVxXygxMjEpKCdGbG9hdDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG5cbn0se1wiMTIxXCI6MTIxfV0sMjU4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbl9kZXJlcV8oMTIxKSgnRmxvYXQ2NCcsIDgsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBGbG9hdDY0QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuXG59LHtcIjEyMVwiOjEyMX1dLDI1OTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5fZGVyZXFfKDEyMSkoJ0ludDE2JywgMiwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDE2QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuXG59LHtcIjEyMVwiOjEyMX1dLDI2MDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5fZGVyZXFfKDEyMSkoJ0ludDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuXG59LHtcIjEyMVwiOjEyMX1dLDI2MTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5fZGVyZXFfKDEyMSkoJ0ludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcblxufSx7XCIxMjFcIjoxMjF9XSwyNjI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuX2RlcmVxXygxMjEpKCdVaW50MTYnLCAyLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDE2QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuXG59LHtcIjEyMVwiOjEyMX1dLDI2MzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5fZGVyZXFfKDEyMSkoJ1VpbnQzMicsIDQsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG5cbn0se1wiMTIxXCI6MTIxfV0sMjY0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbl9kZXJlcV8oMTIxKSgnVWludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG5cbn0se1wiMTIxXCI6MTIxfV0sMjY1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbl9kZXJlcV8oMTIxKSgnVWludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDhDbGFtcGVkQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0sIHRydWUpO1xuXG59LHtcIjEyMVwiOjEyMX1dLDI2NjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgZWFjaCA9IF9kZXJlcV8oMTIpKDApO1xudmFyIHJlZGVmaW5lID0gX2RlcmVxXyg5NCk7XG52YXIgbWV0YSA9IF9kZXJlcV8oNjYpO1xudmFyIGFzc2lnbiA9IF9kZXJlcV8oNzApO1xudmFyIHdlYWsgPSBfZGVyZXFfKDIxKTtcbnZhciBpc09iamVjdCA9IF9kZXJlcV8oNTEpO1xudmFyIGZhaWxzID0gX2RlcmVxXygzNSk7XG52YXIgdmFsaWRhdGUgPSBfZGVyZXFfKDEyNSk7XG52YXIgV0VBS19NQVAgPSAnV2Vha01hcCc7XG52YXIgZ2V0V2VhayA9IG1ldGEuZ2V0V2VhaztcbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xudmFyIHVuY2F1Z2h0RnJvemVuU3RvcmUgPSB3ZWFrLnVmc3RvcmU7XG52YXIgdG1wID0ge307XG52YXIgSW50ZXJuYWxNYXA7XG5cbnZhciB3cmFwcGVyID0gZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gV2Vha01hcCgpIHtcbiAgICByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgfTtcbn07XG5cbnZhciBtZXRob2RzID0ge1xuICAvLyAyMy4zLjMuMyBXZWFrTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICBpZiAoaXNPYmplY3Qoa2V5KSkge1xuICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgV0VBS19NQVApKS5nZXQoa2V5KTtcbiAgICAgIHJldHVybiBkYXRhID8gZGF0YVt0aGlzLl9pXSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0sXG4gIC8vIDIzLjMuMy41IFdlYWtNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKVxuICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIHdlYWsuZGVmKHZhbGlkYXRlKHRoaXMsIFdFQUtfTUFQKSwga2V5LCB2YWx1ZSk7XG4gIH1cbn07XG5cbi8vIDIzLjMgV2Vha01hcCBPYmplY3RzXG52YXIgJFdlYWtNYXAgPSBtb2R1bGUuZXhwb3J0cyA9IF9kZXJlcV8oMjIpKFdFQUtfTUFQLCB3cmFwcGVyLCBtZXRob2RzLCB3ZWFrLCB0cnVlLCB0cnVlKTtcblxuLy8gSUUxMSBXZWFrTWFwIGZyb3plbiBrZXlzIGZpeFxuaWYgKGZhaWxzKGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyAkV2Vha01hcCgpLnNldCgoT2JqZWN0LmZyZWV6ZSB8fCBPYmplY3QpKHRtcCksIDcpLmdldCh0bXApICE9IDc7IH0pKSB7XG4gIEludGVybmFsTWFwID0gd2Vhay5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBXRUFLX01BUCk7XG4gIGFzc2lnbihJbnRlcm5hbE1hcC5wcm90b3R5cGUsIG1ldGhvZHMpO1xuICBtZXRhLk5FRUQgPSB0cnVlO1xuICBlYWNoKFsnZGVsZXRlJywgJ2hhcycsICdnZXQnLCAnc2V0J10sIGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcHJvdG8gPSAkV2Vha01hcC5wcm90b3R5cGU7XG4gICAgdmFyIG1ldGhvZCA9IHByb3RvW2tleV07XG4gICAgcmVkZWZpbmUocHJvdG8sIGtleSwgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIC8vIHN0b3JlIGZyb3plbiBvYmplY3RzIG9uIGludGVybmFsIHdlYWttYXAgc2hpbVxuICAgICAgaWYgKGlzT2JqZWN0KGEpICYmICFpc0V4dGVuc2libGUoYSkpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9mKSB0aGlzLl9mID0gbmV3IEludGVybmFsTWFwKCk7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9mW2tleV0oYSwgYik7XG4gICAgICAgIHJldHVybiBrZXkgPT0gJ3NldCcgPyB0aGlzIDogcmVzdWx0O1xuICAgICAgLy8gc3RvcmUgYWxsIHRoZSByZXN0IG9uIG5hdGl2ZSB3ZWFrbWFwXG4gICAgICB9IHJldHVybiBtZXRob2QuY2FsbCh0aGlzLCBhLCBiKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbn0se1wiMTJcIjoxMixcIjEyNVwiOjEyNSxcIjIxXCI6MjEsXCIyMlwiOjIyLFwiMzVcIjozNSxcIjUxXCI6NTEsXCI2NlwiOjY2LFwiNzBcIjo3MCxcIjk0XCI6OTR9XSwyNjc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xudmFyIHdlYWsgPSBfZGVyZXFfKDIxKTtcbnZhciB2YWxpZGF0ZSA9IF9kZXJlcV8oMTI1KTtcbnZhciBXRUFLX1NFVCA9ICdXZWFrU2V0JztcblxuLy8gMjMuNCBXZWFrU2V0IE9iamVjdHNcbl9kZXJlcV8oMjIpKFdFQUtfU0VULCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrU2V0KCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuNC4zLjEgV2Vha1NldC5wcm90b3R5cGUuYWRkKHZhbHVlKVxuICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgIHJldHVybiB3ZWFrLmRlZih2YWxpZGF0ZSh0aGlzLCBXRUFLX1NFVCksIHZhbHVlLCB0cnVlKTtcbiAgfVxufSwgd2VhaywgZmFsc2UsIHRydWUpO1xuXG59LHtcIjEyNVwiOjEyNSxcIjIxXCI6MjEsXCIyMlwiOjIyfV0sMjY4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtZmxhdE1hcC8jc2VjLUFycmF5LnByb3RvdHlwZS5mbGF0TWFwXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIGZsYXR0ZW5JbnRvQXJyYXkgPSBfZGVyZXFfKDM4KTtcbnZhciB0b09iamVjdCA9IF9kZXJlcV8oMTE5KTtcbnZhciB0b0xlbmd0aCA9IF9kZXJlcV8oMTE4KTtcbnZhciBhRnVuY3Rpb24gPSBfZGVyZXFfKDMpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IF9kZXJlcV8oMTUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge1xuICBmbGF0TWFwOiBmdW5jdGlvbiBmbGF0TWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgc291cmNlTGVuLCBBO1xuICAgIGFGdW5jdGlvbihjYWxsYmFja2ZuKTtcbiAgICBzb3VyY2VMZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICBmbGF0dGVuSW50b0FycmF5KEEsIE8sIE8sIHNvdXJjZUxlbiwgMCwgMSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG5cbl9kZXJlcV8oNSkoJ2ZsYXRNYXAnKTtcblxufSx7XCIxMThcIjoxMTgsXCIxMTlcIjoxMTksXCIxNVwiOjE1LFwiM1wiOjMsXCIzM1wiOjMzLFwiMzhcIjozOCxcIjVcIjo1fV0sMjY5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtZmxhdE1hcC8jc2VjLUFycmF5LnByb3RvdHlwZS5mbGF0dGVuXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIGZsYXR0ZW5JbnRvQXJyYXkgPSBfZGVyZXFfKDM4KTtcbnZhciB0b09iamVjdCA9IF9kZXJlcV8oMTE5KTtcbnZhciB0b0xlbmd0aCA9IF9kZXJlcV8oMTE4KTtcbnZhciB0b0ludGVnZXIgPSBfZGVyZXFfKDExNik7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gX2RlcmVxXygxNSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7XG4gIGZsYXR0ZW46IGZ1bmN0aW9uIGZsYXR0ZW4oLyogZGVwdGhBcmcgPSAxICovKSB7XG4gICAgdmFyIGRlcHRoQXJnID0gYXJndW1lbnRzWzBdO1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHNvdXJjZUxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICBmbGF0dGVuSW50b0FycmF5KEEsIE8sIE8sIHNvdXJjZUxlbiwgMCwgZGVwdGhBcmcgPT09IHVuZGVmaW5lZCA/IDEgOiB0b0ludGVnZXIoZGVwdGhBcmcpKTtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG5cbl9kZXJlcV8oNSkoJ2ZsYXR0ZW4nKTtcblxufSx7XCIxMTZcIjoxMTYsXCIxMThcIjoxMTgsXCIxMTlcIjoxMTksXCIxNVwiOjE1LFwiMzNcIjozMyxcIjM4XCI6MzgsXCI1XCI6NX1dLDI3MDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9BcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgJGluY2x1ZGVzID0gX2RlcmVxXygxMSkodHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhlbCAvKiAsIGZyb21JbmRleCA9IDAgKi8pIHtcbiAgICByZXR1cm4gJGluY2x1ZGVzKHRoaXMsIGVsLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG5fZGVyZXFfKDUpKCdpbmNsdWRlcycpO1xuXG59LHtcIjExXCI6MTEsXCIzM1wiOjMzLFwiNVwiOjV9XSwyNzE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3J3YWxkcm9uL3RjMzktbm90ZXMvYmxvYi9tYXN0ZXIvZXM2LzIwMTQtMDkvc2VwdC0yNS5tZCM1MTAtZ2xvYmFsYXNhcC1mb3ItZW5xdWV1aW5nLWEtbWljcm90YXNrXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIG1pY3JvdGFzayA9IF9kZXJlcV8oNjgpKCk7XG52YXIgcHJvY2VzcyA9IF9kZXJlcV8oNDApLnByb2Nlc3M7XG52YXIgaXNOb2RlID0gX2RlcmVxXygxOCkocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuXG4kZXhwb3J0KCRleHBvcnQuRywge1xuICBhc2FwOiBmdW5jdGlvbiBhc2FwKGZuKSB7XG4gICAgdmFyIGRvbWFpbiA9IGlzTm9kZSAmJiBwcm9jZXNzLmRvbWFpbjtcbiAgICBtaWNyb3Rhc2soZG9tYWluID8gZG9tYWluLmJpbmQoZm4pIDogZm4pO1xuICB9XG59KTtcblxufSx7XCIxOFwiOjE4LFwiMzNcIjozMyxcIjQwXCI6NDAsXCI2OFwiOjY4fV0sMjcyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9samhhcmIvcHJvcG9zYWwtaXMtZXJyb3JcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgY29mID0gX2RlcmVxXygxOCk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnRXJyb3InLCB7XG4gIGlzRXJyb3I6IGZ1bmN0aW9uIGlzRXJyb3IoaXQpIHtcbiAgICByZXR1cm4gY29mKGl0KSA9PT0gJ0Vycm9yJztcbiAgfVxufSk7XG5cbn0se1wiMThcIjoxOCxcIjMzXCI6MzN9XSwyNzM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtZ2xvYmFsXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xuXG4kZXhwb3J0KCRleHBvcnQuRywgeyBnbG9iYWw6IF9kZXJlcV8oNDApIH0pO1xuXG59LHtcIjMzXCI6MzMsXCI0MFwiOjQwfV0sMjc0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLW1hcC5mcm9tXG5fZGVyZXFfKDk3KSgnTWFwJyk7XG5cbn0se1wiOTdcIjo5N31dLDI3NTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy1tYXAub2Zcbl9kZXJlcV8oOTgpKCdNYXAnKTtcblxufSx7XCI5OFwiOjk4fV0sMjc2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXZpZEJydWFudC9NYXAtU2V0LnByb3RvdHlwZS50b0pTT05cbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5SLCAnTWFwJywgeyB0b0pTT046IF9kZXJlcV8oMjApKCdNYXAnKSB9KTtcblxufSx7XCIyMFwiOjIwLFwiMzNcIjozM31dLDI3NzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNsYW1wOiBmdW5jdGlvbiBjbGFtcCh4LCBsb3dlciwgdXBwZXIpIHtcbiAgICByZXR1cm4gTWF0aC5taW4odXBwZXIsIE1hdGgubWF4KGxvd2VyLCB4KSk7XG4gIH1cbn0pO1xuXG59LHtcIjMzXCI6MzN9XSwyNzg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBERUdfUEVSX1JBRDogTWF0aC5QSSAvIDE4MCB9KTtcblxufSx7XCIzM1wiOjMzfV0sMjc5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgUkFEX1BFUl9ERUcgPSAxODAgLyBNYXRoLlBJO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGRlZ3JlZXM6IGZ1bmN0aW9uIGRlZ3JlZXMocmFkaWFucykge1xuICAgIHJldHVybiByYWRpYW5zICogUkFEX1BFUl9ERUc7XG4gIH1cbn0pO1xuXG59LHtcIjMzXCI6MzN9XSwyODA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciBzY2FsZSA9IF9kZXJlcV8oNjQpO1xudmFyIGZyb3VuZCA9IF9kZXJlcV8oNjIpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGZzY2FsZTogZnVuY3Rpb24gZnNjYWxlKHgsIGluTG93LCBpbkhpZ2gsIG91dExvdywgb3V0SGlnaCkge1xuICAgIHJldHVybiBmcm91bmQoc2NhbGUoeCwgaW5Mb3csIGluSGlnaCwgb3V0TG93LCBvdXRIaWdoKSk7XG4gIH1cbn0pO1xuXG59LHtcIjMzXCI6MzMsXCI2MlwiOjYyLFwiNjRcIjo2NH1dLDI4MTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBpYWRkaDogZnVuY3Rpb24gaWFkZGgoeDAsIHgxLCB5MCwgeTEpIHtcbiAgICB2YXIgJHgwID0geDAgPj4+IDA7XG4gICAgdmFyICR4MSA9IHgxID4+PiAwO1xuICAgIHZhciAkeTAgPSB5MCA+Pj4gMDtcbiAgICByZXR1cm4gJHgxICsgKHkxID4+PiAwKSArICgoJHgwICYgJHkwIHwgKCR4MCB8ICR5MCkgJiB+KCR4MCArICR5MCA+Pj4gMCkpID4+PiAzMSkgfCAwO1xuICB9XG59KTtcblxufSx7XCIzM1wiOjMzfV0sMjgyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGltdWxoOiBmdW5jdGlvbiBpbXVsaCh1LCB2KSB7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZjtcbiAgICB2YXIgJHUgPSArdTtcbiAgICB2YXIgJHYgPSArdjtcbiAgICB2YXIgdTAgPSAkdSAmIFVJTlQxNjtcbiAgICB2YXIgdjAgPSAkdiAmIFVJTlQxNjtcbiAgICB2YXIgdTEgPSAkdSA+PiAxNjtcbiAgICB2YXIgdjEgPSAkdiA+PiAxNjtcbiAgICB2YXIgdCA9ICh1MSAqIHYwID4+PiAwKSArICh1MCAqIHYwID4+PiAxNik7XG4gICAgcmV0dXJuIHUxICogdjEgKyAodCA+PiAxNikgKyAoKHUwICogdjEgPj4+IDApICsgKHQgJiBVSU5UMTYpID4+IDE2KTtcbiAgfVxufSk7XG5cbn0se1wiMzNcIjozM31dLDI4MzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBpc3ViaDogZnVuY3Rpb24gaXN1YmgoeDAsIHgxLCB5MCwgeTEpIHtcbiAgICB2YXIgJHgwID0geDAgPj4+IDA7XG4gICAgdmFyICR4MSA9IHgxID4+PiAwO1xuICAgIHZhciAkeTAgPSB5MCA+Pj4gMDtcbiAgICByZXR1cm4gJHgxIC0gKHkxID4+PiAwKSAtICgofiR4MCAmICR5MCB8IH4oJHgwIF4gJHkwKSAmICR4MCAtICR5MCA+Pj4gMCkgPj4+IDMxKSB8IDA7XG4gIH1cbn0pO1xuXG59LHtcIjMzXCI6MzN9XSwyODQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBSQURfUEVSX0RFRzogMTgwIC8gTWF0aC5QSSB9KTtcblxufSx7XCIzM1wiOjMzfV0sMjg1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgREVHX1BFUl9SQUQgPSBNYXRoLlBJIC8gMTgwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHJhZGlhbnM6IGZ1bmN0aW9uIHJhZGlhbnMoZGVncmVlcykge1xuICAgIHJldHVybiBkZWdyZWVzICogREVHX1BFUl9SQUQ7XG4gIH1cbn0pO1xuXG59LHtcIjMzXCI6MzN9XSwyODY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBzY2FsZTogX2RlcmVxXyg2NCkgfSk7XG5cbn0se1wiMzNcIjozMyxcIjY0XCI6NjR9XSwyODc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gaHR0cDovL2pmYmFzdGllbi5naXRodWIuaW8vcGFwZXJzL01hdGguc2lnbmJpdC5odG1sXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IHNpZ25iaXQ6IGZ1bmN0aW9uIHNpZ25iaXQoeCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiAoeCA9ICt4KSAhPSB4ID8geCA6IHggPT0gMCA/IDEgLyB4ID09IEluZmluaXR5IDogeCA+IDA7XG59IH0pO1xuXG59LHtcIjMzXCI6MzN9XSwyODg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDNcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgdW11bGg6IGZ1bmN0aW9uIHVtdWxoKHUsIHYpIHtcbiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmO1xuICAgIHZhciAkdSA9ICt1O1xuICAgIHZhciAkdiA9ICt2O1xuICAgIHZhciB1MCA9ICR1ICYgVUlOVDE2O1xuICAgIHZhciB2MCA9ICR2ICYgVUlOVDE2O1xuICAgIHZhciB1MSA9ICR1ID4+PiAxNjtcbiAgICB2YXIgdjEgPSAkdiA+Pj4gMTY7XG4gICAgdmFyIHQgPSAodTEgKiB2MCA+Pj4gMCkgKyAodTAgKiB2MCA+Pj4gMTYpO1xuICAgIHJldHVybiB1MSAqIHYxICsgKHQgPj4+IDE2KSArICgodTAgKiB2MSA+Pj4gMCkgKyAodCAmIFVJTlQxNikgPj4+IDE2KTtcbiAgfVxufSk7XG5cbn0se1wiMzNcIjozM31dLDI4OTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIHRvT2JqZWN0ID0gX2RlcmVxXygxMTkpO1xudmFyIGFGdW5jdGlvbiA9IF9kZXJlcV8oMyk7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gX2RlcmVxXyg3Mik7XG5cbi8vIEIuMi4yLjIgT2JqZWN0LnByb3RvdHlwZS5fX2RlZmluZUdldHRlcl9fKFAsIGdldHRlcilcbl9kZXJlcV8oMjkpICYmICRleHBvcnQoJGV4cG9ydC5QICsgX2RlcmVxXyg3NCksICdPYmplY3QnLCB7XG4gIF9fZGVmaW5lR2V0dGVyX186IGZ1bmN0aW9uIF9fZGVmaW5lR2V0dGVyX18oUCwgZ2V0dGVyKSB7XG4gICAgJGRlZmluZVByb3BlcnR5LmYodG9PYmplY3QodGhpcyksIFAsIHsgZ2V0OiBhRnVuY3Rpb24oZ2V0dGVyKSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xuICB9XG59KTtcblxufSx7XCIxMTlcIjoxMTksXCIyOVwiOjI5LFwiM1wiOjMsXCIzM1wiOjMzLFwiNzJcIjo3MixcIjc0XCI6NzR9XSwyOTA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciB0b09iamVjdCA9IF9kZXJlcV8oMTE5KTtcbnZhciBhRnVuY3Rpb24gPSBfZGVyZXFfKDMpO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IF9kZXJlcV8oNzIpO1xuXG4vLyBCLjIuMi4zIE9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVTZXR0ZXJfXyhQLCBzZXR0ZXIpXG5fZGVyZXFfKDI5KSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIF9kZXJlcV8oNzQpLCAnT2JqZWN0Jywge1xuICBfX2RlZmluZVNldHRlcl9fOiBmdW5jdGlvbiBfX2RlZmluZVNldHRlcl9fKFAsIHNldHRlcikge1xuICAgICRkZWZpbmVQcm9wZXJ0eS5mKHRvT2JqZWN0KHRoaXMpLCBQLCB7IHNldDogYUZ1bmN0aW9uKHNldHRlciksIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbiAgfVxufSk7XG5cbn0se1wiMTE5XCI6MTE5LFwiMjlcIjoyOSxcIjNcIjozLFwiMzNcIjozMyxcIjcyXCI6NzIsXCI3NFwiOjc0fV0sMjkxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllc1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciAkZW50cmllcyA9IF9kZXJlcV8oODQpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgZW50cmllczogZnVuY3Rpb24gZW50cmllcyhpdCkge1xuICAgIHJldHVybiAkZW50cmllcyhpdCk7XG4gIH1cbn0pO1xuXG59LHtcIjMzXCI6MzMsXCI4NFwiOjg0fV0sMjkyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIG93bktleXMgPSBfZGVyZXFfKDg1KTtcbnZhciB0b0lPYmplY3QgPSBfZGVyZXFfKDExNyk7XG52YXIgZ09QRCA9IF9kZXJlcV8oNzUpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gX2RlcmVxXygyNCk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9iamVjdCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gICAgdmFyIGdldERlc2MgPSBnT1BELmY7XG4gICAgdmFyIGtleXMgPSBvd25LZXlzKE8pO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGtleSwgZGVzYztcbiAgICB3aGlsZSAoa2V5cy5sZW5ndGggPiBpKSB7XG4gICAgICBkZXNjID0gZ2V0RGVzYyhPLCBrZXkgPSBrZXlzW2krK10pO1xuICAgICAgaWYgKGRlc2MgIT09IHVuZGVmaW5lZCkgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBrZXksIGRlc2MpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcblxufSx7XCIxMTdcIjoxMTcsXCIyNFwiOjI0LFwiMzNcIjozMyxcIjc1XCI6NzUsXCI4NVwiOjg1fV0sMjkzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgdG9PYmplY3QgPSBfZGVyZXFfKDExOSk7XG52YXIgdG9QcmltaXRpdmUgPSBfZGVyZXFfKDEyMCk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBfZGVyZXFfKDc5KTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBfZGVyZXFfKDc1KS5mO1xuXG4vLyBCLjIuMi40IE9iamVjdC5wcm90b3R5cGUuX19sb29rdXBHZXR0ZXJfXyhQKVxuX2RlcmVxXygyOSkgJiYgJGV4cG9ydCgkZXhwb3J0LlAgKyBfZGVyZXFfKDc0KSwgJ09iamVjdCcsIHtcbiAgX19sb29rdXBHZXR0ZXJfXzogZnVuY3Rpb24gX19sb29rdXBHZXR0ZXJfXyhQKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgSyA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICAgIHZhciBEO1xuICAgIGRvIHtcbiAgICAgIGlmIChEID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIEspKSByZXR1cm4gRC5nZXQ7XG4gICAgfSB3aGlsZSAoTyA9IGdldFByb3RvdHlwZU9mKE8pKTtcbiAgfVxufSk7XG5cbn0se1wiMTE5XCI6MTE5LFwiMTIwXCI6MTIwLFwiMjlcIjoyOSxcIjMzXCI6MzMsXCI3NFwiOjc0LFwiNzVcIjo3NSxcIjc5XCI6Nzl9XSwyOTQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciB0b09iamVjdCA9IF9kZXJlcV8oMTE5KTtcbnZhciB0b1ByaW1pdGl2ZSA9IF9kZXJlcV8oMTIwKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IF9kZXJlcV8oNzkpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IF9kZXJlcV8oNzUpLmY7XG5cbi8vIEIuMi4yLjUgT2JqZWN0LnByb3RvdHlwZS5fX2xvb2t1cFNldHRlcl9fKFApXG5fZGVyZXFfKDI5KSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIF9kZXJlcV8oNzQpLCAnT2JqZWN0Jywge1xuICBfX2xvb2t1cFNldHRlcl9fOiBmdW5jdGlvbiBfX2xvb2t1cFNldHRlcl9fKFApIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBLID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gICAgdmFyIEQ7XG4gICAgZG8ge1xuICAgICAgaWYgKEQgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgSykpIHJldHVybiBELnNldDtcbiAgICB9IHdoaWxlIChPID0gZ2V0UHJvdG90eXBlT2YoTykpO1xuICB9XG59KTtcblxufSx7XCIxMTlcIjoxMTksXCIxMjBcIjoxMjAsXCIyOVwiOjI5LFwiMzNcIjozMyxcIjc0XCI6NzQsXCI3NVwiOjc1LFwiNzlcIjo3OX1dLDI5NTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtdmFsdWVzLWVudHJpZXNcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgJHZhbHVlcyA9IF9kZXJlcV8oODQpKGZhbHNlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKGl0KSB7XG4gICAgcmV0dXJuICR2YWx1ZXMoaXQpO1xuICB9XG59KTtcblxufSx7XCIzM1wiOjMzLFwiODRcIjo4NH1dLDI5NjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vemVucGFyc2luZy9lcy1vYnNlcnZhYmxlXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIGdsb2JhbCA9IF9kZXJlcV8oNDApO1xudmFyIGNvcmUgPSBfZGVyZXFfKDIzKTtcbnZhciBtaWNyb3Rhc2sgPSBfZGVyZXFfKDY4KSgpO1xudmFyIE9CU0VSVkFCTEUgPSBfZGVyZXFfKDEyOCkoJ29ic2VydmFibGUnKTtcbnZhciBhRnVuY3Rpb24gPSBfZGVyZXFfKDMpO1xudmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTtcbnZhciBhbkluc3RhbmNlID0gX2RlcmVxXyg2KTtcbnZhciByZWRlZmluZUFsbCA9IF9kZXJlcV8oOTMpO1xudmFyIGhpZGUgPSBfZGVyZXFfKDQyKTtcbnZhciBmb3JPZiA9IF9kZXJlcV8oMzkpO1xudmFyIFJFVFVSTiA9IGZvck9mLlJFVFVSTjtcblxudmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uIChmbikge1xuICByZXR1cm4gZm4gPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGFGdW5jdGlvbihmbik7XG59O1xuXG52YXIgY2xlYW51cFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgdmFyIGNsZWFudXAgPSBzdWJzY3JpcHRpb24uX2M7XG4gIGlmIChjbGVhbnVwKSB7XG4gICAgc3Vic2NyaXB0aW9uLl9jID0gdW5kZWZpbmVkO1xuICAgIGNsZWFudXAoKTtcbiAgfVxufTtcblxudmFyIHN1YnNjcmlwdGlvbkNsb3NlZCA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgcmV0dXJuIHN1YnNjcmlwdGlvbi5fbyA9PT0gdW5kZWZpbmVkO1xufTtcblxudmFyIGNsb3NlU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICBpZiAoIXN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKSB7XG4gICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xuICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgfVxufTtcblxudmFyIFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChvYnNlcnZlciwgc3Vic2NyaWJlcikge1xuICBhbk9iamVjdChvYnNlcnZlcik7XG4gIHRoaXMuX2MgPSB1bmRlZmluZWQ7XG4gIHRoaXMuX28gPSBvYnNlcnZlcjtcbiAgb2JzZXJ2ZXIgPSBuZXcgU3Vic2NyaXB0aW9uT2JzZXJ2ZXIodGhpcyk7XG4gIHRyeSB7XG4gICAgdmFyIGNsZWFudXAgPSBzdWJzY3JpYmVyKG9ic2VydmVyKTtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gY2xlYW51cDtcbiAgICBpZiAoY2xlYW51cCAhPSBudWxsKSB7XG4gICAgICBpZiAodHlwZW9mIGNsZWFudXAudW5zdWJzY3JpYmUgPT09ICdmdW5jdGlvbicpIGNsZWFudXAgPSBmdW5jdGlvbiAoKSB7IHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpOyB9O1xuICAgICAgZWxzZSBhRnVuY3Rpb24oY2xlYW51cCk7XG4gICAgICB0aGlzLl9jID0gY2xlYW51cDtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBvYnNlcnZlci5lcnJvcihlKTtcbiAgICByZXR1cm47XG4gIH0gaWYgKHN1YnNjcmlwdGlvbkNsb3NlZCh0aGlzKSkgY2xlYW51cFN1YnNjcmlwdGlvbih0aGlzKTtcbn07XG5cblN1YnNjcmlwdGlvbi5wcm90b3R5cGUgPSByZWRlZmluZUFsbCh7fSwge1xuICB1bnN1YnNjcmliZTogZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7IGNsb3NlU3Vic2NyaXB0aW9uKHRoaXMpOyB9XG59KTtcblxudmFyIFN1YnNjcmlwdGlvbk9ic2VydmVyID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICB0aGlzLl9zID0gc3Vic2NyaXB0aW9uO1xufTtcblxuU3Vic2NyaXB0aW9uT2JzZXJ2ZXIucHJvdG90eXBlID0gcmVkZWZpbmVBbGwoe30sIHtcbiAgbmV4dDogZnVuY3Rpb24gbmV4dCh2YWx1ZSkge1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLl9zO1xuICAgIGlmICghc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpIHtcbiAgICAgIHZhciBvYnNlcnZlciA9IHN1YnNjcmlwdGlvbi5fbztcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBtID0gZ2V0TWV0aG9kKG9ic2VydmVyLm5leHQpO1xuICAgICAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvYnNlcnZlciwgdmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNsb3NlU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKHZhbHVlKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7XG4gICAgaWYgKHN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKSB0aHJvdyB2YWx1ZTtcbiAgICB2YXIgb2JzZXJ2ZXIgPSBzdWJzY3JpcHRpb24uX287XG4gICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xuICAgIHRyeSB7XG4gICAgICB2YXIgbSA9IGdldE1ldGhvZChvYnNlcnZlci5lcnJvcik7XG4gICAgICBpZiAoIW0pIHRocm93IHZhbHVlO1xuICAgICAgdmFsdWUgPSBtLmNhbGwob2JzZXJ2ZXIsIHZhbHVlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH0gY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcbiAgY29tcGxldGU6IGZ1bmN0aW9uIGNvbXBsZXRlKHZhbHVlKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7XG4gICAgaWYgKCFzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSkge1xuICAgICAgdmFyIG9ic2VydmVyID0gc3Vic2NyaXB0aW9uLl9vO1xuICAgICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG0gPSBnZXRNZXRob2Qob2JzZXJ2ZXIuY29tcGxldGUpO1xuICAgICAgICB2YWx1ZSA9IG0gPyBtLmNhbGwob2JzZXJ2ZXIsIHZhbHVlKSA6IHVuZGVmaW5lZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfSBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICB9XG59KTtcblxudmFyICRPYnNlcnZhYmxlID0gZnVuY3Rpb24gT2JzZXJ2YWJsZShzdWJzY3JpYmVyKSB7XG4gIGFuSW5zdGFuY2UodGhpcywgJE9ic2VydmFibGUsICdPYnNlcnZhYmxlJywgJ19mJykuX2YgPSBhRnVuY3Rpb24oc3Vic2NyaWJlcik7XG59O1xuXG5yZWRlZmluZUFsbCgkT2JzZXJ2YWJsZS5wcm90b3R5cGUsIHtcbiAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUob2JzZXJ2ZXIpIHtcbiAgICByZXR1cm4gbmV3IFN1YnNjcmlwdGlvbihvYnNlcnZlciwgdGhpcy5fZik7XG4gIH0sXG4gIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgcmV0dXJuIG5ldyAoY29yZS5Qcm9taXNlIHx8IGdsb2JhbC5Qcm9taXNlKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBhRnVuY3Rpb24oZm4pO1xuICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoYXQuc3Vic2NyaWJlKHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBmbih2YWx1ZSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlcnJvcjogcmVqZWN0LFxuICAgICAgICBjb21wbGV0ZTogcmVzb2x2ZVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn0pO1xuXG5yZWRlZmluZUFsbCgkT2JzZXJ2YWJsZSwge1xuICBmcm9tOiBmdW5jdGlvbiBmcm9tKHgpIHtcbiAgICB2YXIgQyA9IHR5cGVvZiB0aGlzID09PSAnZnVuY3Rpb24nID8gdGhpcyA6ICRPYnNlcnZhYmxlO1xuICAgIHZhciBtZXRob2QgPSBnZXRNZXRob2QoYW5PYmplY3QoeClbT0JTRVJWQUJMRV0pO1xuICAgIGlmIChtZXRob2QpIHtcbiAgICAgIHZhciBvYnNlcnZhYmxlID0gYW5PYmplY3QobWV0aG9kLmNhbGwoeCkpO1xuICAgICAgcmV0dXJuIG9ic2VydmFibGUuY29uc3RydWN0b3IgPT09IEMgPyBvYnNlcnZhYmxlIDogbmV3IEMoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlLnN1YnNjcmliZShvYnNlcnZlcik7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBDKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgdmFyIGRvbmUgPSBmYWxzZTtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghZG9uZSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoZm9yT2YoeCwgZmFsc2UsIGZ1bmN0aW9uIChpdCkge1xuICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KGl0KTtcbiAgICAgICAgICAgICAgaWYgKGRvbmUpIHJldHVybiBSRVRVUk47XG4gICAgICAgICAgICB9KSA9PT0gUkVUVVJOKSByZXR1cm47XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaWYgKGRvbmUpIHRocm93IGU7XG4gICAgICAgICAgICBvYnNlcnZlci5lcnJvcihlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9IG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgZG9uZSA9IHRydWU7IH07XG4gICAgfSk7XG4gIH0sXG4gIG9mOiBmdW5jdGlvbiBvZigpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGgsIGl0ZW1zID0gQXJyYXkobCk7IGkgPCBsOykgaXRlbXNbaV0gPSBhcmd1bWVudHNbaSsrXTtcbiAgICByZXR1cm4gbmV3ICh0eXBlb2YgdGhpcyA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiAkT2JzZXJ2YWJsZSkoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICB2YXIgZG9uZSA9IGZhbHNlO1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFkb25lKSB7XG4gICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBpdGVtcy5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChpdGVtc1tqXSk7XG4gICAgICAgICAgICBpZiAoZG9uZSkgcmV0dXJuO1xuICAgICAgICAgIH0gb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyBkb25lID0gdHJ1ZTsgfTtcbiAgICB9KTtcbiAgfVxufSk7XG5cbmhpZGUoJE9ic2VydmFibGUucHJvdG90eXBlLCBPQlNFUlZBQkxFLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTtcblxuJGV4cG9ydCgkZXhwb3J0LkcsIHsgT2JzZXJ2YWJsZTogJE9ic2VydmFibGUgfSk7XG5cbl9kZXJlcV8oMTAwKSgnT2JzZXJ2YWJsZScpO1xuXG59LHtcIjEwMFwiOjEwMCxcIjEyOFwiOjEyOCxcIjIzXCI6MjMsXCIzXCI6MyxcIjMzXCI6MzMsXCIzOVwiOjM5LFwiNDBcIjo0MCxcIjQyXCI6NDIsXCI2XCI6NixcIjY4XCI6NjgsXCI3XCI6NyxcIjkzXCI6OTN9XSwyOTc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtcHJvbWlzZS1maW5hbGx5XG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIGNvcmUgPSBfZGVyZXFfKDIzKTtcbnZhciBnbG9iYWwgPSBfZGVyZXFfKDQwKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSBfZGVyZXFfKDEwNCk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSBfZGVyZXFfKDkxKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdQcm9taXNlJywgeyAnZmluYWxseSc6IGZ1bmN0aW9uIChvbkZpbmFsbHkpIHtcbiAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgY29yZS5Qcm9taXNlIHx8IGdsb2JhbC5Qcm9taXNlKTtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2Ygb25GaW5hbGx5ID09ICdmdW5jdGlvbic7XG4gIHJldHVybiB0aGlzLnRoZW4oXG4gICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4geDsgfSk7XG4gICAgfSA6IG9uRmluYWxseSxcbiAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7IHRocm93IGU7IH0pO1xuICAgIH0gOiBvbkZpbmFsbHlcbiAgKTtcbn0gfSk7XG5cbn0se1wiMTA0XCI6MTA0LFwiMjNcIjoyMyxcIjMzXCI6MzMsXCI0MFwiOjQwLFwiOTFcIjo5MX1dLDI5ODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1wcm9taXNlLXRyeVxudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IF9kZXJlcV8oNjkpO1xudmFyIHBlcmZvcm0gPSBfZGVyZXFfKDkwKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdQcm9taXNlJywgeyAndHJ5JzogZnVuY3Rpb24gKGNhbGxiYWNrZm4pIHtcbiAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZih0aGlzKTtcbiAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oY2FsbGJhY2tmbik7XG4gIChyZXN1bHQuZSA/IHByb21pc2VDYXBhYmlsaXR5LnJlamVjdCA6IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmUpKHJlc3VsdC52KTtcbiAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XG59IH0pO1xuXG59LHtcIjMzXCI6MzMsXCI2OVwiOjY5LFwiOTBcIjo5MH1dLDI5OTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgbWV0YWRhdGEgPSBfZGVyZXFfKDY3KTtcbnZhciBhbk9iamVjdCA9IF9kZXJlcV8oNyk7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xudmFyIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5zZXQ7XG5cbm1ldGFkYXRhLmV4cCh7IGRlZmluZU1ldGFkYXRhOiBmdW5jdGlvbiBkZWZpbmVNZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgdGFyZ2V0LCB0YXJnZXRLZXkpIHtcbiAgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgYW5PYmplY3QodGFyZ2V0KSwgdG9NZXRhS2V5KHRhcmdldEtleSkpO1xufSB9KTtcblxufSx7XCI2N1wiOjY3LFwiN1wiOjd9XSwzMDA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyIG1ldGFkYXRhID0gX2RlcmVxXyg2Nyk7XG52YXIgYW5PYmplY3QgPSBfZGVyZXFfKDcpO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcbnZhciBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwID0gbWV0YWRhdGEubWFwO1xudmFyIHN0b3JlID0gbWV0YWRhdGEuc3RvcmU7XG5cbm1ldGFkYXRhLmV4cCh7IGRlbGV0ZU1ldGFkYXRhOiBmdW5jdGlvbiBkZWxldGVNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHZhciB0YXJnZXRLZXkgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pO1xuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKGFuT2JqZWN0KHRhcmdldCksIHRhcmdldEtleSwgZmFsc2UpO1xuICBpZiAobWV0YWRhdGFNYXAgPT09IHVuZGVmaW5lZCB8fCAhbWV0YWRhdGFNYXBbJ2RlbGV0ZSddKG1ldGFkYXRhS2V5KSkgcmV0dXJuIGZhbHNlO1xuICBpZiAobWV0YWRhdGFNYXAuc2l6ZSkgcmV0dXJuIHRydWU7XG4gIHZhciB0YXJnZXRNZXRhZGF0YSA9IHN0b3JlLmdldCh0YXJnZXQpO1xuICB0YXJnZXRNZXRhZGF0YVsnZGVsZXRlJ10odGFyZ2V0S2V5KTtcbiAgcmV0dXJuICEhdGFyZ2V0TWV0YWRhdGEuc2l6ZSB8fCBzdG9yZVsnZGVsZXRlJ10odGFyZ2V0KTtcbn0gfSk7XG5cbn0se1wiNjdcIjo2NyxcIjdcIjo3fV0sMzAxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBTZXQgPSBfZGVyZXFfKDIzMSk7XG52YXIgZnJvbSA9IF9kZXJlcV8oMTApO1xudmFyIG1ldGFkYXRhID0gX2RlcmVxXyg2Nyk7XG52YXIgYW5PYmplY3QgPSBfZGVyZXFfKDcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gX2RlcmVxXyg3OSk7XG52YXIgb3JkaW5hcnlPd25NZXRhZGF0YUtleXMgPSBtZXRhZGF0YS5rZXlzO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxudmFyIG9yZGluYXJ5TWV0YWRhdGFLZXlzID0gZnVuY3Rpb24gKE8sIFApIHtcbiAgdmFyIG9LZXlzID0gb3JkaW5hcnlPd25NZXRhZGF0YUtleXMoTywgUCk7XG4gIHZhciBwYXJlbnQgPSBnZXRQcm90b3R5cGVPZihPKTtcbiAgaWYgKHBhcmVudCA9PT0gbnVsbCkgcmV0dXJuIG9LZXlzO1xuICB2YXIgcEtleXMgPSBvcmRpbmFyeU1ldGFkYXRhS2V5cyhwYXJlbnQsIFApO1xuICByZXR1cm4gcEtleXMubGVuZ3RoID8gb0tleXMubGVuZ3RoID8gZnJvbShuZXcgU2V0KG9LZXlzLmNvbmNhdChwS2V5cykpKSA6IHBLZXlzIDogb0tleXM7XG59O1xuXG5tZXRhZGF0YS5leHAoeyBnZXRNZXRhZGF0YUtleXM6IGZ1bmN0aW9uIGdldE1ldGFkYXRhS2V5cyh0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5TWV0YWRhdGFLZXlzKGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1sxXSkpO1xufSB9KTtcblxufSx7XCIxMFwiOjEwLFwiMjMxXCI6MjMxLFwiNjdcIjo2NyxcIjdcIjo3LFwiNzlcIjo3OX1dLDMwMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgbWV0YWRhdGEgPSBfZGVyZXFfKDY3KTtcbnZhciBhbk9iamVjdCA9IF9kZXJlcV8oNyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBfZGVyZXFfKDc5KTtcbnZhciBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gbWV0YWRhdGEuaGFzO1xudmFyIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBtZXRhZGF0YS5nZXQ7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xuXG52YXIgb3JkaW5hcnlHZXRNZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTywgUCkge1xuICB2YXIgaGFzT3duID0gb3JkaW5hcnlIYXNPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7XG4gIGlmIChoYXNPd24pIHJldHVybiBvcmRpbmFyeUdldE93bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgdmFyIHBhcmVudCA9IGdldFByb3RvdHlwZU9mKE8pO1xuICByZXR1cm4gcGFyZW50ICE9PSBudWxsID8gb3JkaW5hcnlHZXRNZXRhZGF0YShNZXRhZGF0YUtleSwgcGFyZW50LCBQKSA6IHVuZGVmaW5lZDtcbn07XG5cbm1ldGFkYXRhLmV4cCh7IGdldE1ldGFkYXRhOiBmdW5jdGlvbiBnZXRNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeUdldE1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn0gfSk7XG5cbn0se1wiNjdcIjo2NyxcIjdcIjo3LFwiNzlcIjo3OX1dLDMwMzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgbWV0YWRhdGEgPSBfZGVyZXFfKDY3KTtcbnZhciBhbk9iamVjdCA9IF9kZXJlcV8oNyk7XG52YXIgb3JkaW5hcnlPd25NZXRhZGF0YUtleXMgPSBtZXRhZGF0YS5rZXlzO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxubWV0YWRhdGEuZXhwKHsgZ2V0T3duTWV0YWRhdGFLZXlzOiBmdW5jdGlvbiBnZXRPd25NZXRhZGF0YUtleXModGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyhhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMV0pKTtcbn0gfSk7XG5cbn0se1wiNjdcIjo2NyxcIjdcIjo3fV0sMzA0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBtZXRhZGF0YSA9IF9kZXJlcV8oNjcpO1xudmFyIGFuT2JqZWN0ID0gX2RlcmVxXyg3KTtcbnZhciBvcmRpbmFyeUdldE93bk1ldGFkYXRhID0gbWV0YWRhdGEuZ2V0O1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxubWV0YWRhdGEuZXhwKHsgZ2V0T3duTWV0YWRhdGE6IGZ1bmN0aW9uIGdldE93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldClcbiAgICAsIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xufSB9KTtcblxufSx7XCI2N1wiOjY3LFwiN1wiOjd9XSwzMDU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyIG1ldGFkYXRhID0gX2RlcmVxXyg2Nyk7XG52YXIgYW5PYmplY3QgPSBfZGVyZXFfKDcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gX2RlcmVxXyg3OSk7XG52YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmhhcztcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbnZhciBvcmRpbmFyeUhhc01ldGFkYXRhID0gZnVuY3Rpb24gKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gIHZhciBoYXNPd24gPSBvcmRpbmFyeUhhc093bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgaWYgKGhhc093bikgcmV0dXJuIHRydWU7XG4gIHZhciBwYXJlbnQgPSBnZXRQcm90b3R5cGVPZihPKTtcbiAgcmV0dXJuIHBhcmVudCAhPT0gbnVsbCA/IG9yZGluYXJ5SGFzTWV0YWRhdGEoTWV0YWRhdGFLZXksIHBhcmVudCwgUCkgOiBmYWxzZTtcbn07XG5cbm1ldGFkYXRhLmV4cCh7IGhhc01ldGFkYXRhOiBmdW5jdGlvbiBoYXNNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeUhhc01ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn0gfSk7XG5cbn0se1wiNjdcIjo2NyxcIjdcIjo3LFwiNzlcIjo3OX1dLDMwNjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgbWV0YWRhdGEgPSBfZGVyZXFfKDY3KTtcbnZhciBhbk9iamVjdCA9IF9kZXJlcV8oNyk7XG52YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmhhcztcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbm1ldGFkYXRhLmV4cCh7IGhhc093bk1ldGFkYXRhOiBmdW5jdGlvbiBoYXNPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeUhhc093bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpXG4gICAgLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn0gfSk7XG5cbn0se1wiNjdcIjo2NyxcIjdcIjo3fV0sMzA3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciAkbWV0YWRhdGEgPSBfZGVyZXFfKDY3KTtcbnZhciBhbk9iamVjdCA9IF9kZXJlcV8oNyk7XG52YXIgYUZ1bmN0aW9uID0gX2RlcmVxXygzKTtcbnZhciB0b01ldGFLZXkgPSAkbWV0YWRhdGEua2V5O1xudmFyIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSAkbWV0YWRhdGEuc2V0O1xuXG4kbWV0YWRhdGEuZXhwKHsgbWV0YWRhdGE6IGZ1bmN0aW9uIG1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbiBkZWNvcmF0b3IodGFyZ2V0LCB0YXJnZXRLZXkpIHtcbiAgICBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhKFxuICAgICAgbWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsXG4gICAgICAodGFyZ2V0S2V5ICE9PSB1bmRlZmluZWQgPyBhbk9iamVjdCA6IGFGdW5jdGlvbikodGFyZ2V0KSxcbiAgICAgIHRvTWV0YUtleSh0YXJnZXRLZXkpXG4gICAgKTtcbiAgfTtcbn0gfSk7XG5cbn0se1wiM1wiOjMsXCI2N1wiOjY3LFwiN1wiOjd9XSwzMDg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtc2V0LmZyb21cbl9kZXJlcV8oOTcpKCdTZXQnKTtcblxufSx7XCI5N1wiOjk3fV0sMzA5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXNldC5vZlxuX2RlcmVxXyg5OCkoJ1NldCcpO1xuXG59LHtcIjk4XCI6OTh9XSwzMTA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdTZXQnLCB7IHRvSlNPTjogX2RlcmVxXygyMCkoJ1NldCcpIH0pO1xuXG59LHtcIjIwXCI6MjAsXCIzM1wiOjMzfV0sMzExOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRoaWFzYnluZW5zL1N0cmluZy5wcm90b3R5cGUuYXRcbnZhciAkZXhwb3J0ID0gX2RlcmVxXygzMyk7XG52YXIgJGF0ID0gX2RlcmVxXygxMDYpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgYXQ6IGZ1bmN0aW9uIGF0KHBvcykge1xuICAgIHJldHVybiAkYXQodGhpcywgcG9zKTtcbiAgfVxufSk7XG5cbn0se1wiMTA2XCI6MTA2LFwiMzNcIjozM31dLDMxMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL1N0cmluZy5wcm90b3R5cGUubWF0Y2hBbGwvXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyIGRlZmluZWQgPSBfZGVyZXFfKDI4KTtcbnZhciB0b0xlbmd0aCA9IF9kZXJlcV8oMTE4KTtcbnZhciBpc1JlZ0V4cCA9IF9kZXJlcV8oNTIpO1xudmFyIGdldEZsYWdzID0gX2RlcmVxXygzNyk7XG52YXIgUmVnRXhwUHJvdG8gPSBSZWdFeHAucHJvdG90eXBlO1xuXG52YXIgJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yID0gZnVuY3Rpb24gKHJlZ2V4cCwgc3RyaW5nKSB7XG4gIHRoaXMuX3IgPSByZWdleHA7XG4gIHRoaXMuX3MgPSBzdHJpbmc7XG59O1xuXG5fZGVyZXFfKDU0KSgkUmVnRXhwU3RyaW5nSXRlcmF0b3IsICdSZWdFeHAgU3RyaW5nJywgZnVuY3Rpb24gbmV4dCgpIHtcbiAgdmFyIG1hdGNoID0gdGhpcy5fci5leGVjKHRoaXMuX3MpO1xuICByZXR1cm4geyB2YWx1ZTogbWF0Y2gsIGRvbmU6IG1hdGNoID09PSBudWxsIH07XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIG1hdGNoQWxsOiBmdW5jdGlvbiBtYXRjaEFsbChyZWdleHApIHtcbiAgICBkZWZpbmVkKHRoaXMpO1xuICAgIGlmICghaXNSZWdFeHAocmVnZXhwKSkgdGhyb3cgVHlwZUVycm9yKHJlZ2V4cCArICcgaXMgbm90IGEgcmVnZXhwIScpO1xuICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgIHZhciBmbGFncyA9ICdmbGFncycgaW4gUmVnRXhwUHJvdG8gPyBTdHJpbmcocmVnZXhwLmZsYWdzKSA6IGdldEZsYWdzLmNhbGwocmVnZXhwKTtcbiAgICB2YXIgcnggPSBuZXcgUmVnRXhwKHJlZ2V4cC5zb3VyY2UsIH5mbGFncy5pbmRleE9mKCdnJykgPyBmbGFncyA6ICdnJyArIGZsYWdzKTtcbiAgICByeC5sYXN0SW5kZXggPSB0b0xlbmd0aChyZWdleHAubGFzdEluZGV4KTtcbiAgICByZXR1cm4gbmV3ICRSZWdFeHBTdHJpbmdJdGVyYXRvcihyeCwgUyk7XG4gIH1cbn0pO1xuXG59LHtcIjExOFwiOjExOCxcIjI4XCI6MjgsXCIzM1wiOjMzLFwiMzdcIjozNyxcIjUyXCI6NTIsXCI1NFwiOjU0fV0sMzEzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyICRwYWQgPSBfZGVyZXFfKDEwOSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICBwYWRFbmQ6IGZ1bmN0aW9uIHBhZEVuZChtYXhMZW5ndGggLyogLCBmaWxsU3RyaW5nID0gJyAnICovKSB7XG4gICAgcmV0dXJuICRwYWQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgZmFsc2UpO1xuICB9XG59KTtcblxufSx7XCIxMDlcIjoxMDksXCIzM1wiOjMzfV0sMzE0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgJGV4cG9ydCA9IF9kZXJlcV8oMzMpO1xudmFyICRwYWQgPSBfZGVyZXFfKDEwOSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICBwYWRTdGFydDogZnVuY3Rpb24gcGFkU3RhcnQobWF4TGVuZ3RoIC8qICwgZmlsbFN0cmluZyA9ICcgJyAqLykge1xuICAgIHJldHVybiAkcGFkKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRydWUpO1xuICB9XG59KTtcblxufSx7XCIxMDlcIjoxMDksXCIzM1wiOjMzfV0sMzE1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWJtYXJrYmFnZS9lY21hc2NyaXB0LXN0cmluZy1sZWZ0LXJpZ2h0LXRyaW1cbl9kZXJlcV8oMTExKSgndHJpbUxlZnQnLCBmdW5jdGlvbiAoJHRyaW0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW1MZWZ0KCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAxKTtcbiAgfTtcbn0sICd0cmltU3RhcnQnKTtcblxufSx7XCIxMTFcIjoxMTF9XSwzMTY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3NlYm1hcmtiYWdlL2VjbWFzY3JpcHQtc3RyaW5nLWxlZnQtcmlnaHQtdHJpbVxuX2RlcmVxXygxMTEpKCd0cmltUmlnaHQnLCBmdW5jdGlvbiAoJHRyaW0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW1SaWdodCgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcywgMik7XG4gIH07XG59LCAndHJpbUVuZCcpO1xuXG59LHtcIjExMVwiOjExMX1dLDMxNzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5fZGVyZXFfKDEyNikoJ2FzeW5jSXRlcmF0b3InKTtcblxufSx7XCIxMjZcIjoxMjZ9XSwzMTg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuX2RlcmVxXygxMjYpKCdvYnNlcnZhYmxlJyk7XG5cbn0se1wiMTI2XCI6MTI2fV0sMzE5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWdsb2JhbFxudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdTeXN0ZW0nLCB7IGdsb2JhbDogX2RlcmVxXyg0MCkgfSk7XG5cbn0se1wiMzNcIjozMyxcIjQwXCI6NDB9XSwzMjA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha21hcC5mcm9tXG5fZGVyZXFfKDk3KSgnV2Vha01hcCcpO1xuXG59LHtcIjk3XCI6OTd9XSwzMjE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha21hcC5vZlxuX2RlcmVxXyg5OCkoJ1dlYWtNYXAnKTtcblxufSx7XCI5OFwiOjk4fV0sMzIyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXdlYWtzZXQuZnJvbVxuX2RlcmVxXyg5NykoJ1dlYWtTZXQnKTtcblxufSx7XCI5N1wiOjk3fV0sMzIzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXdlYWtzZXQub2Zcbl9kZXJlcV8oOTgpKCdXZWFrU2V0Jyk7XG5cbn0se1wiOThcIjo5OH1dLDMyNDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgJGl0ZXJhdG9ycyA9IF9kZXJlcV8oMTQxKTtcbnZhciBnZXRLZXlzID0gX2RlcmVxXyg4MSk7XG52YXIgcmVkZWZpbmUgPSBfZGVyZXFfKDk0KTtcbnZhciBnbG9iYWwgPSBfZGVyZXFfKDQwKTtcbnZhciBoaWRlID0gX2RlcmVxXyg0Mik7XG52YXIgSXRlcmF0b3JzID0gX2RlcmVxXyg1OCk7XG52YXIgd2tzID0gX2RlcmVxXygxMjgpO1xudmFyIElURVJBVE9SID0gd2tzKCdpdGVyYXRvcicpO1xudmFyIFRPX1NUUklOR19UQUcgPSB3a3MoJ3RvU3RyaW5nVGFnJyk7XG52YXIgQXJyYXlWYWx1ZXMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbnZhciBET01JdGVyYWJsZXMgPSB7XG4gIENTU1J1bGVMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgQ1NTU3R5bGVEZWNsYXJhdGlvbjogZmFsc2UsXG4gIENTU1ZhbHVlTGlzdDogZmFsc2UsXG4gIENsaWVudFJlY3RMaXN0OiBmYWxzZSxcbiAgRE9NUmVjdExpc3Q6IGZhbHNlLFxuICBET01TdHJpbmdMaXN0OiBmYWxzZSxcbiAgRE9NVG9rZW5MaXN0OiB0cnVlLFxuICBEYXRhVHJhbnNmZXJJdGVtTGlzdDogZmFsc2UsXG4gIEZpbGVMaXN0OiBmYWxzZSxcbiAgSFRNTEFsbENvbGxlY3Rpb246IGZhbHNlLFxuICBIVE1MQ29sbGVjdGlvbjogZmFsc2UsXG4gIEhUTUxGb3JtRWxlbWVudDogZmFsc2UsXG4gIEhUTUxTZWxlY3RFbGVtZW50OiBmYWxzZSxcbiAgTWVkaWFMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgTWltZVR5cGVBcnJheTogZmFsc2UsXG4gIE5hbWVkTm9kZU1hcDogZmFsc2UsXG4gIE5vZGVMaXN0OiB0cnVlLFxuICBQYWludFJlcXVlc3RMaXN0OiBmYWxzZSxcbiAgUGx1Z2luOiBmYWxzZSxcbiAgUGx1Z2luQXJyYXk6IGZhbHNlLFxuICBTVkdMZW5ndGhMaXN0OiBmYWxzZSxcbiAgU1ZHTnVtYmVyTGlzdDogZmFsc2UsXG4gIFNWR1BhdGhTZWdMaXN0OiBmYWxzZSxcbiAgU1ZHUG9pbnRMaXN0OiBmYWxzZSxcbiAgU1ZHU3RyaW5nTGlzdDogZmFsc2UsXG4gIFNWR1RyYW5zZm9ybUxpc3Q6IGZhbHNlLFxuICBTb3VyY2VCdWZmZXJMaXN0OiBmYWxzZSxcbiAgU3R5bGVTaGVldExpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBUZXh0VHJhY2tDdWVMaXN0OiBmYWxzZSxcbiAgVGV4dFRyYWNrTGlzdDogZmFsc2UsXG4gIFRvdWNoTGlzdDogZmFsc2Vcbn07XG5cbmZvciAodmFyIGNvbGxlY3Rpb25zID0gZ2V0S2V5cyhET01JdGVyYWJsZXMpLCBpID0gMDsgaSA8IGNvbGxlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gIHZhciBOQU1FID0gY29sbGVjdGlvbnNbaV07XG4gIHZhciBleHBsaWNpdCA9IERPTUl0ZXJhYmxlc1tOQU1FXTtcbiAgdmFyIENvbGxlY3Rpb24gPSBnbG9iYWxbTkFNRV07XG4gIHZhciBwcm90byA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIHZhciBrZXk7XG4gIGlmIChwcm90bykge1xuICAgIGlmICghcHJvdG9bSVRFUkFUT1JdKSBoaWRlKHByb3RvLCBJVEVSQVRPUiwgQXJyYXlWYWx1ZXMpO1xuICAgIGlmICghcHJvdG9bVE9fU1RSSU5HX1RBR10pIGhpZGUocHJvdG8sIFRPX1NUUklOR19UQUcsIE5BTUUpO1xuICAgIEl0ZXJhdG9yc1tOQU1FXSA9IEFycmF5VmFsdWVzO1xuICAgIGlmIChleHBsaWNpdCkgZm9yIChrZXkgaW4gJGl0ZXJhdG9ycykgaWYgKCFwcm90b1trZXldKSByZWRlZmluZShwcm90bywga2V5LCAkaXRlcmF0b3JzW2tleV0sIHRydWUpO1xuICB9XG59XG5cbn0se1wiMTI4XCI6MTI4LFwiMTQxXCI6MTQxLFwiNDBcIjo0MCxcIjQyXCI6NDIsXCI1OFwiOjU4LFwiODFcIjo4MSxcIjk0XCI6OTR9XSwzMjU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciAkdGFzayA9IF9kZXJlcV8oMTEzKTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CLCB7XG4gIHNldEltbWVkaWF0ZTogJHRhc2suc2V0LFxuICBjbGVhckltbWVkaWF0ZTogJHRhc2suY2xlYXJcbn0pO1xuXG59LHtcIjExM1wiOjExMyxcIjMzXCI6MzN9XSwzMjY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLy8gaWU5LSBzZXRUaW1lb3V0ICYgc2V0SW50ZXJ2YWwgYWRkaXRpb25hbCBwYXJhbWV0ZXJzIGZpeFxudmFyIGdsb2JhbCA9IF9kZXJlcV8oNDApO1xudmFyICRleHBvcnQgPSBfZGVyZXFfKDMzKTtcbnZhciBpbnZva2UgPSBfZGVyZXFfKDQ2KTtcbnZhciBwYXJ0aWFsID0gX2RlcmVxXyg4OCk7XG52YXIgbmF2aWdhdG9yID0gZ2xvYmFsLm5hdmlnYXRvcjtcbnZhciBNU0lFID0gISFuYXZpZ2F0b3IgJiYgL01TSUUgLlxcLi8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTsgLy8gPC0gZGlydHkgaWU5LSBjaGVja1xudmFyIHdyYXAgPSBmdW5jdGlvbiAoc2V0KSB7XG4gIHJldHVybiBNU0lFID8gZnVuY3Rpb24gKGZuLCB0aW1lIC8qICwgLi4uYXJncyAqLykge1xuICAgIHJldHVybiBzZXQoaW52b2tlKFxuICAgICAgcGFydGlhbCxcbiAgICAgIFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKSxcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgICAgdHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKVxuICAgICksIHRpbWUpO1xuICB9IDogc2V0O1xufTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CICsgJGV4cG9ydC5GICogTVNJRSwge1xuICBzZXRUaW1lb3V0OiB3cmFwKGdsb2JhbC5zZXRUaW1lb3V0KSxcbiAgc2V0SW50ZXJ2YWw6IHdyYXAoZ2xvYmFsLnNldEludGVydmFsKVxufSk7XG5cbn0se1wiMzNcIjozMyxcIjQwXCI6NDAsXCI0NlwiOjQ2LFwiODhcIjo4OH1dLDMyNzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5fZGVyZXFfKDI1NCk7XG5fZGVyZXFfKDE5MSk7XG5fZGVyZXFfKDE5Myk7XG5fZGVyZXFfKDE5Mik7XG5fZGVyZXFfKDE5NSk7XG5fZGVyZXFfKDE5Nyk7XG5fZGVyZXFfKDIwMik7XG5fZGVyZXFfKDE5Nik7XG5fZGVyZXFfKDE5NCk7XG5fZGVyZXFfKDIwNCk7XG5fZGVyZXFfKDIwMyk7XG5fZGVyZXFfKDE5OSk7XG5fZGVyZXFfKDIwMCk7XG5fZGVyZXFfKDE5OCk7XG5fZGVyZXFfKDE5MCk7XG5fZGVyZXFfKDIwMSk7XG5fZGVyZXFfKDIwNSk7XG5fZGVyZXFfKDIwNik7XG5fZGVyZXFfKDE1Nyk7XG5fZGVyZXFfKDE1OSk7XG5fZGVyZXFfKDE1OCk7XG5fZGVyZXFfKDIwOCk7XG5fZGVyZXFfKDIwNyk7XG5fZGVyZXFfKDE3OCk7XG5fZGVyZXFfKDE4OCk7XG5fZGVyZXFfKDE4OSk7XG5fZGVyZXFfKDE3OSk7XG5fZGVyZXFfKDE4MCk7XG5fZGVyZXFfKDE4MSk7XG5fZGVyZXFfKDE4Mik7XG5fZGVyZXFfKDE4Myk7XG5fZGVyZXFfKDE4NCk7XG5fZGVyZXFfKDE4NSk7XG5fZGVyZXFfKDE4Nik7XG5fZGVyZXFfKDE4Nyk7XG5fZGVyZXFfKDE2MSk7XG5fZGVyZXFfKDE2Mik7XG5fZGVyZXFfKDE2Myk7XG5fZGVyZXFfKDE2NCk7XG5fZGVyZXFfKDE2NSk7XG5fZGVyZXFfKDE2Nik7XG5fZGVyZXFfKDE2Nyk7XG5fZGVyZXFfKDE2OCk7XG5fZGVyZXFfKDE2OSk7XG5fZGVyZXFfKDE3MCk7XG5fZGVyZXFfKDE3MSk7XG5fZGVyZXFfKDE3Mik7XG5fZGVyZXFfKDE3Myk7XG5fZGVyZXFfKDE3NCk7XG5fZGVyZXFfKDE3NSk7XG5fZGVyZXFfKDE3Nik7XG5fZGVyZXFfKDE3Nyk7XG5fZGVyZXFfKDI0MSk7XG5fZGVyZXFfKDI0Nik7XG5fZGVyZXFfKDI1Myk7XG5fZGVyZXFfKDI0NCk7XG5fZGVyZXFfKDIzNik7XG5fZGVyZXFfKDIzNyk7XG5fZGVyZXFfKDI0Mik7XG5fZGVyZXFfKDI0Nyk7XG5fZGVyZXFfKDI0OSk7XG5fZGVyZXFfKDIzMik7XG5fZGVyZXFfKDIzMyk7XG5fZGVyZXFfKDIzNCk7XG5fZGVyZXFfKDIzNSk7XG5fZGVyZXFfKDIzOCk7XG5fZGVyZXFfKDIzOSk7XG5fZGVyZXFfKDI0MCk7XG5fZGVyZXFfKDI0Myk7XG5fZGVyZXFfKDI0NSk7XG5fZGVyZXFfKDI0OCk7XG5fZGVyZXFfKDI1MCk7XG5fZGVyZXFfKDI1MSk7XG5fZGVyZXFfKDI1Mik7XG5fZGVyZXFfKDE1Mik7XG5fZGVyZXFfKDE1NCk7XG5fZGVyZXFfKDE1Myk7XG5fZGVyZXFfKDE1Nik7XG5fZGVyZXFfKDE1NSk7XG5fZGVyZXFfKDE0MCk7XG5fZGVyZXFfKDEzOCk7XG5fZGVyZXFfKDE0NSk7XG5fZGVyZXFfKDE0Mik7XG5fZGVyZXFfKDE0OCk7XG5fZGVyZXFfKDE1MCk7XG5fZGVyZXFfKDEzNyk7XG5fZGVyZXFfKDE0NCk7XG5fZGVyZXFfKDEzNCk7XG5fZGVyZXFfKDE0OSk7XG5fZGVyZXFfKDEzMik7XG5fZGVyZXFfKDE0Nyk7XG5fZGVyZXFfKDE0Nik7XG5fZGVyZXFfKDEzOSk7XG5fZGVyZXFfKDE0Myk7XG5fZGVyZXFfKDEzMSk7XG5fZGVyZXFfKDEzMyk7XG5fZGVyZXFfKDEzNik7XG5fZGVyZXFfKDEzNSk7XG5fZGVyZXFfKDE1MSk7XG5fZGVyZXFfKDE0MSk7XG5fZGVyZXFfKDIyNCk7XG5fZGVyZXFfKDIzMCk7XG5fZGVyZXFfKDIyNSk7XG5fZGVyZXFfKDIyNik7XG5fZGVyZXFfKDIyNyk7XG5fZGVyZXFfKDIyOCk7XG5fZGVyZXFfKDIyOSk7XG5fZGVyZXFfKDIwOSk7XG5fZGVyZXFfKDE2MCk7XG5fZGVyZXFfKDIzMSk7XG5fZGVyZXFfKDI2Nik7XG5fZGVyZXFfKDI2Nyk7XG5fZGVyZXFfKDI1NSk7XG5fZGVyZXFfKDI1Nik7XG5fZGVyZXFfKDI2MSk7XG5fZGVyZXFfKDI2NCk7XG5fZGVyZXFfKDI2NSk7XG5fZGVyZXFfKDI1OSk7XG5fZGVyZXFfKDI2Mik7XG5fZGVyZXFfKDI2MCk7XG5fZGVyZXFfKDI2Myk7XG5fZGVyZXFfKDI1Nyk7XG5fZGVyZXFfKDI1OCk7XG5fZGVyZXFfKDIxMCk7XG5fZGVyZXFfKDIxMSk7XG5fZGVyZXFfKDIxMik7XG5fZGVyZXFfKDIxMyk7XG5fZGVyZXFfKDIxNCk7XG5fZGVyZXFfKDIxNyk7XG5fZGVyZXFfKDIxNSk7XG5fZGVyZXFfKDIxNik7XG5fZGVyZXFfKDIxOCk7XG5fZGVyZXFfKDIxOSk7XG5fZGVyZXFfKDIyMCk7XG5fZGVyZXFfKDIyMSk7XG5fZGVyZXFfKDIyMyk7XG5fZGVyZXFfKDIyMik7XG5fZGVyZXFfKDI3MCk7XG5fZGVyZXFfKDI2OCk7XG5fZGVyZXFfKDI2OSk7XG5fZGVyZXFfKDMxMSk7XG5fZGVyZXFfKDMxNCk7XG5fZGVyZXFfKDMxMyk7XG5fZGVyZXFfKDMxNSk7XG5fZGVyZXFfKDMxNik7XG5fZGVyZXFfKDMxMik7XG5fZGVyZXFfKDMxNyk7XG5fZGVyZXFfKDMxOCk7XG5fZGVyZXFfKDI5Mik7XG5fZGVyZXFfKDI5NSk7XG5fZGVyZXFfKDI5MSk7XG5fZGVyZXFfKDI4OSk7XG5fZGVyZXFfKDI5MCk7XG5fZGVyZXFfKDI5Myk7XG5fZGVyZXFfKDI5NCk7XG5fZGVyZXFfKDI3Nik7XG5fZGVyZXFfKDMxMCk7XG5fZGVyZXFfKDI3NSk7XG5fZGVyZXFfKDMwOSk7XG5fZGVyZXFfKDMyMSk7XG5fZGVyZXFfKDMyMyk7XG5fZGVyZXFfKDI3NCk7XG5fZGVyZXFfKDMwOCk7XG5fZGVyZXFfKDMyMCk7XG5fZGVyZXFfKDMyMik7XG5fZGVyZXFfKDI3Myk7XG5fZGVyZXFfKDMxOSk7XG5fZGVyZXFfKDI3Mik7XG5fZGVyZXFfKDI3Nyk7XG5fZGVyZXFfKDI3OCk7XG5fZGVyZXFfKDI3OSk7XG5fZGVyZXFfKDI4MCk7XG5fZGVyZXFfKDI4MSk7XG5fZGVyZXFfKDI4Myk7XG5fZGVyZXFfKDI4Mik7XG5fZGVyZXFfKDI4NCk7XG5fZGVyZXFfKDI4NSk7XG5fZGVyZXFfKDI4Nik7XG5fZGVyZXFfKDI4OCk7XG5fZGVyZXFfKDI4Nyk7XG5fZGVyZXFfKDI5Nyk7XG5fZGVyZXFfKDI5OCk7XG5fZGVyZXFfKDI5OSk7XG5fZGVyZXFfKDMwMCk7XG5fZGVyZXFfKDMwMik7XG5fZGVyZXFfKDMwMSk7XG5fZGVyZXFfKDMwNCk7XG5fZGVyZXFfKDMwMyk7XG5fZGVyZXFfKDMwNSk7XG5fZGVyZXFfKDMwNik7XG5fZGVyZXFfKDMwNyk7XG5fZGVyZXFfKDI3MSk7XG5fZGVyZXFfKDI5Nik7XG5fZGVyZXFfKDMyNik7XG5fZGVyZXFfKDMyNSk7XG5fZGVyZXFfKDMyNCk7XG5tb2R1bGUuZXhwb3J0cyA9IF9kZXJlcV8oMjMpO1xuXG59LHtcIjEzMVwiOjEzMSxcIjEzMlwiOjEzMixcIjEzM1wiOjEzMyxcIjEzNFwiOjEzNCxcIjEzNVwiOjEzNSxcIjEzNlwiOjEzNixcIjEzN1wiOjEzNyxcIjEzOFwiOjEzOCxcIjEzOVwiOjEzOSxcIjE0MFwiOjE0MCxcIjE0MVwiOjE0MSxcIjE0MlwiOjE0MixcIjE0M1wiOjE0MyxcIjE0NFwiOjE0NCxcIjE0NVwiOjE0NSxcIjE0NlwiOjE0NixcIjE0N1wiOjE0NyxcIjE0OFwiOjE0OCxcIjE0OVwiOjE0OSxcIjE1MFwiOjE1MCxcIjE1MVwiOjE1MSxcIjE1MlwiOjE1MixcIjE1M1wiOjE1MyxcIjE1NFwiOjE1NCxcIjE1NVwiOjE1NSxcIjE1NlwiOjE1NixcIjE1N1wiOjE1NyxcIjE1OFwiOjE1OCxcIjE1OVwiOjE1OSxcIjE2MFwiOjE2MCxcIjE2MVwiOjE2MSxcIjE2MlwiOjE2MixcIjE2M1wiOjE2MyxcIjE2NFwiOjE2NCxcIjE2NVwiOjE2NSxcIjE2NlwiOjE2NixcIjE2N1wiOjE2NyxcIjE2OFwiOjE2OCxcIjE2OVwiOjE2OSxcIjE3MFwiOjE3MCxcIjE3MVwiOjE3MSxcIjE3MlwiOjE3MixcIjE3M1wiOjE3MyxcIjE3NFwiOjE3NCxcIjE3NVwiOjE3NSxcIjE3NlwiOjE3NixcIjE3N1wiOjE3NyxcIjE3OFwiOjE3OCxcIjE3OVwiOjE3OSxcIjE4MFwiOjE4MCxcIjE4MVwiOjE4MSxcIjE4MlwiOjE4MixcIjE4M1wiOjE4MyxcIjE4NFwiOjE4NCxcIjE4NVwiOjE4NSxcIjE4NlwiOjE4NixcIjE4N1wiOjE4NyxcIjE4OFwiOjE4OCxcIjE4OVwiOjE4OSxcIjE5MFwiOjE5MCxcIjE5MVwiOjE5MSxcIjE5MlwiOjE5MixcIjE5M1wiOjE5MyxcIjE5NFwiOjE5NCxcIjE5NVwiOjE5NSxcIjE5NlwiOjE5NixcIjE5N1wiOjE5NyxcIjE5OFwiOjE5OCxcIjE5OVwiOjE5OSxcIjIwMFwiOjIwMCxcIjIwMVwiOjIwMSxcIjIwMlwiOjIwMixcIjIwM1wiOjIwMyxcIjIwNFwiOjIwNCxcIjIwNVwiOjIwNSxcIjIwNlwiOjIwNixcIjIwN1wiOjIwNyxcIjIwOFwiOjIwOCxcIjIwOVwiOjIwOSxcIjIxMFwiOjIxMCxcIjIxMVwiOjIxMSxcIjIxMlwiOjIxMixcIjIxM1wiOjIxMyxcIjIxNFwiOjIxNCxcIjIxNVwiOjIxNSxcIjIxNlwiOjIxNixcIjIxN1wiOjIxNyxcIjIxOFwiOjIxOCxcIjIxOVwiOjIxOSxcIjIyMFwiOjIyMCxcIjIyMVwiOjIyMSxcIjIyMlwiOjIyMixcIjIyM1wiOjIyMyxcIjIyNFwiOjIyNCxcIjIyNVwiOjIyNSxcIjIyNlwiOjIyNixcIjIyN1wiOjIyNyxcIjIyOFwiOjIyOCxcIjIyOVwiOjIyOSxcIjIzXCI6MjMsXCIyMzBcIjoyMzAsXCIyMzFcIjoyMzEsXCIyMzJcIjoyMzIsXCIyMzNcIjoyMzMsXCIyMzRcIjoyMzQsXCIyMzVcIjoyMzUsXCIyMzZcIjoyMzYsXCIyMzdcIjoyMzcsXCIyMzhcIjoyMzgsXCIyMzlcIjoyMzksXCIyNDBcIjoyNDAsXCIyNDFcIjoyNDEsXCIyNDJcIjoyNDIsXCIyNDNcIjoyNDMsXCIyNDRcIjoyNDQsXCIyNDVcIjoyNDUsXCIyNDZcIjoyNDYsXCIyNDdcIjoyNDcsXCIyNDhcIjoyNDgsXCIyNDlcIjoyNDksXCIyNTBcIjoyNTAsXCIyNTFcIjoyNTEsXCIyNTJcIjoyNTIsXCIyNTNcIjoyNTMsXCIyNTRcIjoyNTQsXCIyNTVcIjoyNTUsXCIyNTZcIjoyNTYsXCIyNTdcIjoyNTcsXCIyNThcIjoyNTgsXCIyNTlcIjoyNTksXCIyNjBcIjoyNjAsXCIyNjFcIjoyNjEsXCIyNjJcIjoyNjIsXCIyNjNcIjoyNjMsXCIyNjRcIjoyNjQsXCIyNjVcIjoyNjUsXCIyNjZcIjoyNjYsXCIyNjdcIjoyNjcsXCIyNjhcIjoyNjgsXCIyNjlcIjoyNjksXCIyNzBcIjoyNzAsXCIyNzFcIjoyNzEsXCIyNzJcIjoyNzIsXCIyNzNcIjoyNzMsXCIyNzRcIjoyNzQsXCIyNzVcIjoyNzUsXCIyNzZcIjoyNzYsXCIyNzdcIjoyNzcsXCIyNzhcIjoyNzgsXCIyNzlcIjoyNzksXCIyODBcIjoyODAsXCIyODFcIjoyODEsXCIyODJcIjoyODIsXCIyODNcIjoyODMsXCIyODRcIjoyODQsXCIyODVcIjoyODUsXCIyODZcIjoyODYsXCIyODdcIjoyODcsXCIyODhcIjoyODgsXCIyODlcIjoyODksXCIyOTBcIjoyOTAsXCIyOTFcIjoyOTEsXCIyOTJcIjoyOTIsXCIyOTNcIjoyOTMsXCIyOTRcIjoyOTQsXCIyOTVcIjoyOTUsXCIyOTZcIjoyOTYsXCIyOTdcIjoyOTcsXCIyOThcIjoyOTgsXCIyOTlcIjoyOTksXCIzMDBcIjozMDAsXCIzMDFcIjozMDEsXCIzMDJcIjozMDIsXCIzMDNcIjozMDMsXCIzMDRcIjozMDQsXCIzMDVcIjozMDUsXCIzMDZcIjozMDYsXCIzMDdcIjozMDcsXCIzMDhcIjozMDgsXCIzMDlcIjozMDksXCIzMTBcIjozMTAsXCIzMTFcIjozMTEsXCIzMTJcIjozMTIsXCIzMTNcIjozMTMsXCIzMTRcIjozMTQsXCIzMTVcIjozMTUsXCIzMTZcIjozMTYsXCIzMTdcIjozMTcsXCIzMThcIjozMTgsXCIzMTlcIjozMTksXCIzMjBcIjozMjAsXCIzMjFcIjozMjEsXCIzMjJcIjozMjIsXCIzMjNcIjozMjMsXCIzMjRcIjozMjQsXCIzMjVcIjozMjUsXCIzMjZcIjozMjZ9XSwzMjg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChnbG9iYWwpe1xuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogaHR0cHM6Ly9yYXcuZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9tYXN0ZXIvTElDRU5TRSBmaWxlLiBBblxuICogYWRkaXRpb25hbCBncmFudCBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluXG4gKiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKi9cblxuIShmdW5jdGlvbihnbG9iYWwpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICB2YXIgaW5Nb2R1bGUgPSB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiO1xuICB2YXIgcnVudGltZSA9IGdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWU7XG4gIGlmIChydW50aW1lKSB7XG4gICAgaWYgKGluTW9kdWxlKSB7XG4gICAgICAvLyBJZiByZWdlbmVyYXRvclJ1bnRpbWUgaXMgZGVmaW5lZCBnbG9iYWxseSBhbmQgd2UncmUgaW4gYSBtb2R1bGUsXG4gICAgICAvLyBtYWtlIHRoZSBleHBvcnRzIG9iamVjdCBpZGVudGljYWwgdG8gcmVnZW5lcmF0b3JSdW50aW1lLlxuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBydW50aW1lO1xuICAgIH1cbiAgICAvLyBEb24ndCBib3RoZXIgZXZhbHVhdGluZyB0aGUgcmVzdCBvZiB0aGlzIGZpbGUgaWYgdGhlIHJ1bnRpbWUgd2FzXG4gICAgLy8gYWxyZWFkeSBkZWZpbmVkIGdsb2JhbGx5LlxuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIERlZmluZSB0aGUgcnVudGltZSBnbG9iYWxseSAoYXMgZXhwZWN0ZWQgYnkgZ2VuZXJhdGVkIGNvZGUpIGFzIGVpdGhlclxuICAvLyBtb2R1bGUuZXhwb3J0cyAoaWYgd2UncmUgaW4gYSBtb2R1bGUpIG9yIGEgbmV3LCBlbXB0eSBvYmplY3QuXG4gIHJ1bnRpbWUgPSBnbG9iYWwucmVnZW5lcmF0b3JSdW50aW1lID0gaW5Nb2R1bGUgPyBtb2R1bGUuZXhwb3J0cyA6IHt9O1xuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIHJ1bnRpbWUud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIEl0ZXJhdG9yUHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgaWYgKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiZcbiAgICAgIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICAvLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZFxuICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC5cbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID1cbiAgICBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdwLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb247XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlW3RvU3RyaW5nVGFnU3ltYm9sXSA9XG4gICAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgcHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgcnVudGltZS5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgcnVudGltZS5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBpZiAoISh0b1N0cmluZ1RhZ1N5bWJvbCBpbiBnZW5GdW4pKSB7XG4gICAgICAgIGdlbkZ1blt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG4gICAgICB9XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIHJ1bnRpbWUuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLiBJZiB0aGUgUHJvbWlzZSBpcyByZWplY3RlZCwgaG93ZXZlciwgdGhlXG4gICAgICAgICAgLy8gcmVzdWx0IGZvciB0aGlzIGl0ZXJhdGlvbiB3aWxsIGJlIHJlamVjdGVkIHdpdGggdGhlIHNhbWVcbiAgICAgICAgICAvLyByZWFzb24uIE5vdGUgdGhhdCByZWplY3Rpb25zIG9mIHlpZWxkZWQgUHJvbWlzZXMgYXJlIG5vdFxuICAgICAgICAgIC8vIHRocm93biBiYWNrIGludG8gdGhlIGdlbmVyYXRvciBmdW5jdGlvbiwgYXMgaXMgdGhlIGNhc2VcbiAgICAgICAgICAvLyB3aGVuIGFuIGF3YWl0ZWQgUHJvbWlzZSBpcyByZWplY3RlZC4gVGhpcyBkaWZmZXJlbmNlIGluXG4gICAgICAgICAgLy8gYmVoYXZpb3IgYmV0d2VlbiB5aWVsZCBhbmQgYXdhaXQgaXMgaW1wb3J0YW50LCBiZWNhdXNlIGl0XG4gICAgICAgICAgLy8gYWxsb3dzIHRoZSBjb25zdW1lciB0byBkZWNpZGUgd2hhdCB0byBkbyB3aXRoIHRoZSB5aWVsZGVkXG4gICAgICAgICAgLy8gcmVqZWN0aW9uIChzd2FsbG93IGl0IGFuZCBjb250aW51ZSwgbWFudWFsbHkgLnRocm93IGl0IGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBnZW5lcmF0b3IsIGFiYW5kb24gaXRlcmF0aW9uLCB3aGF0ZXZlcikuIFdpdGhcbiAgICAgICAgICAvLyBhd2FpdCwgYnkgY29udHJhc3QsIHRoZXJlIGlzIG5vIG9wcG9ydHVuaXR5IHRvIGV4YW1pbmUgdGhlXG4gICAgICAgICAgLy8gcmVqZWN0aW9uIHJlYXNvbiBvdXRzaWRlIHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24sIHNvIHRoZVxuICAgICAgICAgIC8vIG9ubHkgb3B0aW9uIGlzIHRvIHRocm93IGl0IGZyb20gdGhlIGF3YWl0IGV4cHJlc3Npb24sIGFuZFxuICAgICAgICAgIC8vIGxldCB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhbmRsZSB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBnbG9iYWwucHJvY2VzcyA9PT0gXCJvYmplY3RcIiAmJiBnbG9iYWwucHJvY2Vzcy5kb21haW4pIHtcbiAgICAgIGludm9rZSA9IGdsb2JhbC5wcm9jZXNzLmRvbWFpbi5iaW5kKGludm9rZSk7XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthc3luY0l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgcnVudGltZS5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgcnVudGltZS5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpXG4gICAgKTtcblxuICAgIHJldHVybiBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgR3BbdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JcIjtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBydW50aW1lLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgcnVudGltZS52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcbn0pKFxuICAvLyBBbW9uZyB0aGUgdmFyaW91cyB0cmlja3MgZm9yIG9idGFpbmluZyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsXG4gIC8vIG9iamVjdCwgdGhpcyBzZWVtcyB0byBiZSB0aGUgbW9zdCByZWxpYWJsZSB0ZWNobmlxdWUgdGhhdCBkb2VzIG5vdFxuICAvLyB1c2UgaW5kaXJlY3QgZXZhbCAod2hpY2ggdmlvbGF0ZXMgQ29udGVudCBTZWN1cml0eSBQb2xpY3kpLlxuICB0eXBlb2YgZ2xvYmFsID09PSBcIm9iamVjdFwiID8gZ2xvYmFsIDpcbiAgdHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIiA/IHdpbmRvdyA6XG4gIHR5cGVvZiBzZWxmID09PSBcIm9iamVjdFwiID8gc2VsZiA6IHRoaXNcbik7XG5cbn0pLmNhbGwodGhpcyx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KVxufSx7fV19LHt9LFsxXSk7XG4iLCJ2YXIgU2NyYW1ibGVyID0gKGZ1bmN0aW9uICgpIHtcdFxyXG5cdFxyXG5cdC8vIG1haW4gZm4gLSBleHBvc2VkIHRvIHdpbmRvd1xyXG5cdGxldCBwcmV2ZW50O1xyXG5cdGNvbnN0IHNjcmFtYmxlID0gZnVuY3Rpb24oc2NyYW1ibGVBcmdzKSB7XHJcblx0XHR0cnkge1xyXG5cdFx0XHRjb25zb2xlLmxvZyhwcmV2ZW50KTtcclxuXHRcdFx0bGV0IHByZXZlbnQgPSBmYWxzZTtcclxuXHRcdFx0Y29uc29sZS5sb2cocHJldmVudCk7XHJcblx0XHRcdC8qKiogaGVscGVyIGZ1bmN0aW9ucyAqKiovXHJcblx0XHRcdC8vIHV0aWxpdHkgZm4gdG8gZ2V0IGEgcmFuZG9tIGNoYXJhY3RlciBcclxuXHRcdFx0Y29uc3QgcmFuZG9tQ2hhciA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5yZXBsYWNlKC9bXmEtel0rL2csICcnKS5zdWJzdHIoMCwgMSk7XHJcblx0XHRcdH1cclxuXHRcdFx0Ly8gb2JqZWN0IHRlc3RcclxuXHRcdFx0Y29uc3QgaXNPYmplY3QgPSBmdW5jdGlvbihhKSB7XHJcblx0XHRcdFx0cmV0dXJuICghIWEpICYmIChhLmNvbnN0cnVjdG9yID09PSBPYmplY3QpO1xyXG5cdFx0XHR9O1xyXG5cdFx0XHQvLyBkaWQgdGhlIHVzZXIgcGFzcyBhbiBvYmplY3QgYXMgYW4gYXJndW1lbnQ/XHJcblx0XHRcdGxldCBwYXNzZWRBc09iamVjdCA9IChpc09iamVjdChzY3JhbWJsZUFyZ3MpIHx8IHR5cGVvZiBzY3JhbWJsZUFyZ3MgPT0gJ29iamVjdCcpO1xyXG5cdFx0XHQvLyBzZXQgZnVuY3Rpb24gZGVmYXVsdCBhcmd1bWVudHMgaWYgaXQgd2FzIGFuIG9iamVjdFxyXG5cdFx0XHRpZiAoIHBhc3NlZEFzT2JqZWN0ICkgeyBcclxuXHRcdFx0XHRzY3JhbWJsZUFyZ3MudGFyZ2V0ID0gKCB0eXBlb2Ygc2NyYW1ibGVBcmdzLnRhcmdldCAhPT0gJ3VuZGVmaW5lZCcgJiYgKCBwYXNzZWRBc09iamVjdCApICkgPyBzY3JhbWJsZUFyZ3MudGFyZ2V0IDogJ1tkYXRhLXNjcmFtYmxlcl0nO1xyXG5cdFx0XHRcdHNjcmFtYmxlQXJncy5yYW5kb20gPSAoIHR5cGVvZiBzY3JhbWJsZUFyZ3MucmFuZG9tICE9PSAndW5kZWZpbmVkJyAmJiAoIHBhc3NlZEFzT2JqZWN0ICkgKSA/IHNjcmFtYmxlQXJncy5yYW5kb20gOiBbMTAwMCwgMzAwMF07XHJcblx0XHRcdH1cclxuXHRcdFx0Ly8gdXRpbGl0eSBmbiB0byBnZXQgYSByYW5kb20gZGVsYXkgdGltZSBcclxuXHRcdFx0Y29uc3QgcmFuZG9tVGltZSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGlmICggcGFzc2VkQXNPYmplY3QgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gc2NyYW1ibGVBcmdzLnJhbmRvbVswXSArIChNYXRoLnJhbmRvbSgpICogKDEgLSBzY3JhbWJsZUFyZ3MucmFuZG9tWzFdKSArIHNjcmFtYmxlQXJncy5yYW5kb21bMV0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gMTAwMCArIChNYXRoLnJhbmRvbSgpICogKDEgLSAzMDAwKSArIDMwMDApO1xyXG5cdFx0XHR9XHRcclxuXHJcblx0XHRcdGlmICggcHJldmVudCAhPSB0cnVlICkge1xyXG5cdFx0XHRcdHNjcmFtYmxlRmlyZShzY3JhbWJsZUFyZ3MpOyAvLyBjYWxsIGFjdGlvbiBmblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRmdW5jdGlvbiBzY3JhbWJsZUZpcmUgKCBzY3JhbWJsZUFyZ3MgKSB7IC8vIHJlbWVtYmVyLCBob2lzdGVkXHJcblx0XHRcdFx0Y29uc29sZS53YXJuKHNjcmFtYmxlQXJncyk7XHJcblx0XHRcdFx0XHQvLyBnZXQgY2hvc2VuIHNjcmFtYmxlIGl0ZW1zXHJcblx0XHRcdFx0XHR2YXIgc2NyYW1ibGUgPSAoIHBhc3NlZEFzT2JqZWN0ICkgPyBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzY3JhbWJsZUFyZ3MudGFyZ2V0KV0gOiBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzY3JhbWJsZUFyZ3MpXSA7XHJcblxyXG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvcihzY3JhbWJsZSk7XHJcblx0XHRcdFx0XHQvLyBmb3IgZWFjaCBzY3JhbWJsZSBlbGVtZW50XHJcblx0XHRcdFx0XHRzY3JhbWJsZS5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50LCB3aGljaCkge1xyXG5cdFx0XHRcdFx0XHRsZXQgdHJ1dGggPSBlbGVtZW50LnRleHRDb250ZW50LnNwbGl0KCcnKTsgLy8gZ2V0IGxldHRlcnNcclxuXHRcdFx0XHRcdFx0bGV0IG5ld0xldHRlcnMgPSBlbGVtZW50LnRleHRDb250ZW50LnNwbGl0KCcnKTtcclxuXHRcdFx0XHRcdFx0bGV0IHJldmVydCA9IFtdOyAvLyBpbml0IGVtcHR5IGtpbGwgc3dpdGNoIGFycmF5XHRcdFxyXG5cdFx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdFx0Y29uc3QgdGlja2VyID0gc2V0SW50ZXJ2YWwoIGZ1bmN0aW9uKCkgeyBcclxuXHRcdFx0XHRcdFx0XHQvLyBtYXAgb3ZlciBsZXR0ZXJzIGFuZCByZXBsYWNlIHdpdGggcmFuZG9tIG9yIHJldmVydCBiYWNrIHRvIHRydXRoXHJcblx0XHRcdFx0XHRcdFx0dHJ1dGgubWFwKCAobGV0dGVyLCBpKSA9PiB7XHJcblx0XHRcdFx0XHRcdFx0XHQvLyBicmVhayBpZiBhIHNwYWNlXHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoJyBcXHRcXG5cXHJcXHYnLmluZGV4T2YobGV0dGVyKSA+IC0xKSByZXR1cm47IFxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gc2V0IG5ldyByYW5kb20gbGV0dGVyXHJcblx0XHRcdFx0XHRcdFx0XHRuZXdMZXR0ZXJzW2ldID0gcmFuZG9tQ2hhcigpO1xyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gc2V0IHJhbmRvbSB0aW1lb3V0IHRvIG1ha2UgbGV0dGVycyByZXNldCBhdCBkaWZmZXJlbnQgdGltZXNcclxuXHRcdFx0XHRcdFx0XHRcdHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkgeyBcclxuXHRcdFx0XHRcdFx0XHRcdFx0cmV2ZXJ0W2ldID0gdHJ1ZTsgXHJcblx0XHRcdFx0XHRcdFx0XHR9LCByYW5kb21UaW1lKCkgKTtcclxuXHRcdFx0XHRcdFx0XHRcdC8vIHJlc2V0IGluZGl2aWR1YWwgbGV0dGVyIGlmIGtpbGwgc3dpdGNoXHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldmVydFtpXSA9PT0gdHJ1ZSApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRuZXdMZXR0ZXJzW2ldID0gdHJ1dGhbaV07XHJcblx0XHRcdFx0XHRcdFx0XHR9O1xyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gc2V0IGh0bWxcclxuXHRcdFx0XHRcdFx0XHRcdGVsZW1lbnQudGV4dENvbnRlbnQgPSBuZXdMZXR0ZXJzLmpvaW4oJycpO1xyXG5cdFx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0XHRcdC8vIGtpbGwgaW50ZXJ2YWwgYWZ0ZXIgYWxsIGxldHRlciByZXR1cm5lZCB0byBub3JtYWwgdG8gc2F2ZSBzdGFja1xyXG5cdFx0XHRcdFx0XHRcdFx0bGV0IGtpbGxDaGVjayA9IChuZXdMZXR0ZXJzLmxlbmd0aCA9PSB0cnV0aC5sZW5ndGgpICYmIG5ld0xldHRlcnMuZXZlcnkoZnVuY3Rpb24oZSwgaSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZSA9PT0gdHJ1dGhbaV07IFxyXG5cdFx0XHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGtpbGxDaGVjayApIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0Y2xlYXJJbnRlcnZhbCh0aWNrZXIpOyAvLyBzdG9wIGxvb3BpbmdcclxuXHRcdFx0XHRcdFx0XHRcdH07XHJcblx0XHRcdFx0XHRcdH0sIDEwMCk7XHJcblx0XHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0fSk7IC8vIGVuZCBmb3JFYWNoXHJcblx0XHRcdH07IC8vIGVuZCBzY3JhbWJsZUZpcmVcclxuXHRcdH0gY2F0Y2goZSkge1xyXG5cdFx0XHRjb25zb2xlLnRyYWNlKCclY3VoLW9oOiAlYycgKyBlICsgJycsJ2NvbG9yOmluZGlhbnJlZDsnLCdjb2xvcjpjb3JuZmxvd2VyYmx1ZTsnKTtcclxuXHRcdH0gXHJcblx0fTsgLy8gZW5kIFNjcmFtYmxlXHJcblxyXG5cdHJldHVybiBzY3JhbWJsZTtcclxuXHRcclxufSkoKTtcclxuXHJcbi8vIGNvbnNvbGUubG9nKFNjcmFtYmxlcik7Il19
