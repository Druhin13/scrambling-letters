export const Scrambler=function(t){try{const e=function(t){let e=t||1,n=Math.random().toString(36).replace(/[^a-z]+/g,"").substr(0,e);if(" \t\n\r\v".indexOf(n)<0)return n};let n=function(t){return!!t&&t.constructor===Object}(t)||"object"==typeof t;n&&(t.target=void 0!==t.target&&n?t.target:"[data-scrambler]",t.random=void 0!==t.random&&n?t.random:[1e3,3e3],t.speed=void 0!==t.speed&&n?t.speed:100,t.text=!(void 0===t.text||!n)&&t.text);const r=function(){return n?t.random[0]+(Math.random()*(1-t.random[1])+t.random[1]):-2999*Math.random()+3e3+1e3};!function(t){(n?[...document.querySelectorAll(t.target)]:[...document.querySelectorAll(t)]).forEach(function(n,o){if("true"!==n.getAttribute("data-scramble-active")){n.setAttribute("data-scramble-active","true");let o=n.textContent.split(""),a=n.innerHTML,c=o,i=n.textContent.split(""),l=[],s=t.speed?t.speed:100,d=!1;const u=function(t){let r=t||n.textContent;o=r.split(""),i=r.split(""),c=[],o.forEach((t,n)=>{" \t\n\r\v".indexOf(o[n])>-1?c.push(" "):c.push(e())}),c=c};t.text&&""!==t.text&&("string"==typeof t.text||t.text instanceof String)?(u(t.text),d=!0):n.getAttribute("data-scramble-text")&&""!==n.getAttribute("data-scramble-text")&&(u(n.getAttribute("data-scramble-text")),d=!0);const f=setInterval(function(){c.map((t,a)=>{" \t\n\r\v".indexOf(t)>-1||(i[a]=e(),setTimeout(function(){l[a]=!0},r()),!0===l[a]&&(i[a]=o[a]),n.textContent=i.join(""))});let t=i.length==o.length&&i.every(function(t,e){return t===o[e]});if(t){if(n.innerHTML=a,d){let t=n.children[0];t&&""!==t&&(t.textContent=i.join(""))}clearInterval(f),n.setAttribute("data-scramble-active","false")}},s)}})}(t)}catch(t){console.trace("%cuh-oh: %c"+t,"color:indianred;","color:cornflowerblue;")}};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
