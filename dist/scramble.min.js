export const Scrambler=function(t){const e=function(t){let e=t||1,n=Math.random().toString(36).replace(/[^a-z]+/g,"").substr(0,e);if(" \t\n\r\v".indexOf(n)<0)return n};let n=!!(r=t)&&r.constructor===Object||"object"==typeof t;var r;n&&(t.target=void 0!==t.target&&n?t.target:"[data-scrambler]",t.random=void 0!==t.random&&n?t.random:[1e3,3e3],t.speed=void 0!==t.speed&&n?t.speed:100,t.text=!(void 0===t.text||!n)&&t.text);const a=function(){return n?t.random[0]+(Math.random()*(1-t.random[1])+t.random[1]):-2999*Math.random()+3e3+1e3};!function(t){(n?[...document.querySelectorAll(t.target)]:[...document.querySelectorAll(t)]).forEach(function(n,r){if("true"!==n.getAttribute("data-scramble-active")){n.setAttribute("data-scramble-active","true");let r=n.textContent.split(""),o=n.innerHTML,i=r,c=n.textContent.split(""),s=[],l=t.speed?t.speed:100,d=!1;const u=function(t){let a=t||n.textContent;r=a.split(""),c=a.split(""),i=[],r.forEach((t,n)=>{" \t\n\r\v".indexOf(r[n])>-1?i.push(" "):i.push(e())}),i=i};t.text&&""!==t.text&&("string"==typeof t.text||t.text instanceof String)?(u(t.text),d=!0):n.getAttribute("data-scramble-text")&&""!==n.getAttribute("data-scramble-text")&&(u(n.getAttribute("data-scramble-text")),d=!0);const f=setInterval(function(){i.map((t,o)=>{" \t\n\r\v".indexOf(t)>-1||(c[o]=e(),setTimeout(function(){s[o]=!0},a()),!0===s[o]&&(c[o]=r[o]),n.textContent=c.join(""))});let t=c.length==r.length&&c.every(function(t,e){return t===r[e]});if(t){if(n.innerHTML=o,d){let t=n.children[0];t&&""!==t?t.textContent=c.join(""):n.textContent=c.join("")}clearInterval(f),n.setAttribute("data-scramble-active","false")}},l)}})}(t)};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
