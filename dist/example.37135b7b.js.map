{"version":3,"sources":["js/scrambleSetup.js","js/scramble.js","js/example.js"],"names":["ScramblerSetup","scrambleArgs","randomChar","length","l","r","Math","random","toString","replace","substr","indexOf","isObject","a","constructor","Object","randomTime","arg","asObj","scrambleFire","scrambleFireArgs","isArray","Array","Boolean","isBool","passedAsObject","target","speed","text","document","querySelectorAll","forEach","element","getAttribute","setAttribute","truth","textContent","split","truthHTML","innerHTML","startText","newLetters","revert","HTMLreset","defineEndText","end","endText","startTextTemp","item","index","push","String","ticker","setInterval","killCheck","map","letter","i","setTimeout","join","every","e","innerContent","children","clearInterval","Scrambler","buttonT","querySelector","buttonP","buttonN","addEventListener"],"mappings":"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","file":"example.37135b7b.js","sourceRoot":"..","sourcesContent":["/* eslint-disable import/prefer-default-export, no-console */\n\n// export main setup function - this is imported in the main api export\nexport const ScramblerSetup = (function (scrambleArgs) { // wrapper function\n  /** * helper functions ** */\n  // utility fn to get a random character\n  const randomChar = function (length) {\n    const l = length || 1;\n    const r = Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, l);\n    if (' \\t\\n\\r\\v'.indexOf(r) < 0) return r;\n    return false;\n  };\n\n  // object test\n  const isObject = function (a) {\n    return (!!a) && (a.constructor === Object);\n  };\n\n  // array test\n  const isArray = function (a) {\n    return (!!a) && (a.constructor === Array);\n  };\n\n  // boolean test\n  const isBool = function (a) {\n    return (!!a) && (a.constructor === Boolean);\n  };\n\n  // utility fn to get a random delay time\n  const randomTime = function (arg) {\n    const asObj = arg || false;\n    if (asObj) {\n      return scrambleArgs.random[0] + ((Math.random() * (1 - scrambleArgs.random[1])) + scrambleArgs.random[1]);\n    }\n    return 1000 + ((Math.random() * (1 - 3000)) + 3000);\n  };\n\n  const scrambleFire = function (scrambleFireArgs) {\n    // return if array passed (needs string or object)\n    if (isArray(scrambleFireArgs) || isBool(scrambleFireArgs)) {\n      return false;\n    }\n\n    // set function default arguments if it was an object\n    const passedAsObject = (isObject(scrambleFireArgs) || typeof scrambleFireArgs === 'object');\n    if (passedAsObject) {\n      scrambleFireArgs.target = (typeof scrambleFireArgs.target !== 'undefined' && (passedAsObject)) ? scrambleFireArgs.target : '[data-scrambler]';\n      scrambleFireArgs.random = (typeof scrambleFireArgs.random !== 'undefined' && (passedAsObject)) ? scrambleFireArgs.random : [1000, 3000];\n      scrambleFireArgs.speed = (typeof scrambleFireArgs.speed !== 'undefined' && (passedAsObject)) ? scrambleFireArgs.speed : 100;\n      scrambleFireArgs.text = (typeof scrambleFireArgs.text !== 'undefined' && (passedAsObject)) ? scrambleFireArgs.text : false;\n    }\n\n    // get chosen scramble items\n    const scramble = (passedAsObject) ? [...document.querySelectorAll(scrambleFireArgs.target)] : [...document.querySelectorAll(scrambleFireArgs)];\n\n    // for each scramble element\n    scramble.forEach((element) => {\n      if (element.getAttribute('data-scramble-active') !== 'true') {\n        element.setAttribute('data-scramble-active', 'true');\n\n        let truth = element.textContent.split(''); // get letters\n        const truthHTML = element.innerHTML; // get html\n        let startText = truth;\n        let newLetters = element.textContent.split('');\n        const revert = []; // init empty kill switch array\n        const speed = (scrambleFireArgs.speed) ? scrambleFireArgs.speed : 100;\n        let HTMLreset = false;\n\n        // if user defines an ending text string then use that instead of the original text\n        const defineEndText = function (end) {\n          const endText = end || element.textContent;\n          truth = endText.split('');\n          newLetters = endText.split('');\n          const startTextTemp = [];\n          truth.forEach((item, index) => {\n            if (' \\t\\n\\r\\v'.indexOf(truth[index]) > -1) {\n              startTextTemp.push(' ');\n            } else {\n              startTextTemp.push(randomChar());\n            }\n          });\n          startText = startTextTemp;\n        };\n        // first check passed option and then data-attribute\n        if (scrambleFireArgs.text && scrambleFireArgs.text !== '' && (typeof scrambleFireArgs.text === 'string' || scrambleFireArgs.text instanceof String)) {\n          defineEndText(scrambleFireArgs.text);\n          HTMLreset = true;\n        } else if (element.getAttribute('data-scramble-text') && element.getAttribute('data-scramble-text') !== '') {\n          defineEndText(element.getAttribute('data-scramble-text'));\n          HTMLreset = true;\n        }\n\n        const ticker = setInterval(() => {\n          // map over letters and replace with random or revert back to truth\n          startText.map((letter, i) => {\n            // break if a space\n            if (' \\t\\n\\r\\v'.indexOf(letter) > -1) return false;\n            // set new random letter\n            newLetters[i] = randomChar();\n            // set random timeout to make letters reset at different times\n            setTimeout(() => {\n              revert[i] = true;\n            }, randomTime());\n            // reset individual letter if kill switch\n            if (revert[i] === true) {\n              newLetters[i] = truth[i];\n            }\n            // set html\n            element.textContent = newLetters.join('');\n            return true;\n          });\n\n          // kill interval after all letter returned to normal to save stack\n          const killCheck = (newLetters.length === truth.length) && newLetters.every((e, i) => e === truth[i]);\n          if (killCheck) {\n            element.innerHTML = truthHTML;\n            if (HTMLreset) {\n              const innerContent = element.children[0];\n              if (innerContent && innerContent !== '') {\n                innerContent.textContent = newLetters.join('');\n              } else {\n                element.textContent = newLetters.join('');\n              }\n            }\n            clearInterval(ticker); // stop looping\n            element.setAttribute('data-scramble-active', 'false');\n          }\n        }, speed); // end ticker\n      } // end check for active\n    }); // end forEach\n    return true;\n  }; // end scrambleFire\n\n  // scrambleFire(scrambleArgs); // trigger function\n\n  // expose functions\n  return {\n    scrambleFire,\n    randomChar,\n    randomTime,\n    isObject,\n  };\n}()); // end ScramblerSetup","/* eslint-disable import/prefer-default-export, no-console */\n\n// get setup function\nimport { ScramblerSetup } from './scrambleSetup';\n\n// export main api function\nexport const Scrambler = (function (setup) { // wrapper function\n  return setup.scrambleFire;\n}(ScramblerSetup)); ","/* eslint-disable no-console */\n\nimport { Scrambler } from './scramble';\n\nScrambler({\n  target: '[data-title-scrambler]',\n  random: [1000, 30000],\n  speed: 100,\n});\n\nScrambler('p:not(.no-scramble), ul:not(.no-scramble) li');\n\nScrambler({\n  target: '#scramble-text-id',\n  random: [1000, 30000],\n  speed: 100,\n});\n\nconst buttonT = document.querySelector('#scramble-title-button');\nconst buttonP = document.querySelector('#scramble-paragraph-button');\nconst buttonN = document.querySelector('#scramble-paragraph-new');\n\nbuttonT.addEventListener('click', () => {\n  Scrambler('[data-title-scrambler]');\n  Scrambler({\n    target: '#scramble-text-id',\n    random: [1000, 30000],\n    speed: 100,\n  });\n});\n\nbuttonP.addEventListener('click', () => {\n  Scrambler('p:not(.no-scramble), ul:not(.no-scramble) li, h3:not(.no-scramble)');\n});\n\nbuttonN.addEventListener('click', () => {\n  Scrambler({\n    target: '[data-title-scrambler]',\n    random: [1000, 30000],\n    speed: 100,\n    text: 'Secret message',\n  });\n});\n"]}